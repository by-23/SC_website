// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 61763921e49c2823 "Suprema (copy)", do not edit manually */
import {
  NullState,
  defaultEvents,
  useIconSelection
} from "./chunk-BVM6H744.js";

// /:https://framerusercontent.com/modules/hKjtTuWGYB451ckw6eTN/bbq95ZQZ142lE2fXscHd/Hero.js
import { jsx as _jsx } from "react/jsx-runtime";
import * as React from "react";
import { useState, useEffect, useRef } from "react";
import { addPropertyControls, ControlType, RenderTarget } from "unframer";
import { motion } from "unframer";

// /:https://framer.com/m/hero-icons/Home.js@0.0.28
var Component;
var Home_default = (React2) => {
  if (!Component) {
    const HomeIcon = React2.forwardRef(function HomeIcon2({
      title,
      titleId,
      ...props
    }, svgRef) {
      return /* @__PURE__ */ React2.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: svgRef,
        "aria-labelledby": titleId
      }, props), title ? /* @__PURE__ */ React2.createElement("title", {
        id: titleId
      }, title) : null, /* @__PURE__ */ React2.createElement("path", {
        d: "M11.47 3.841a.75.75 0 0 1 1.06 0l8.69 8.69a.75.75 0 1 0 1.06-1.061l-8.689-8.69a2.25 2.25 0 0 0-3.182 0l-8.69 8.69a.75.75 0 1 0 1.061 1.06l8.69-8.689Z"
      }), /* @__PURE__ */ React2.createElement("path", {
        d: "m12 5.432 8.159 8.159c.03.03.06.058.091.086v6.198c0 1.035-.84 1.875-1.875 1.875H15a.75.75 0 0 1-.75-.75v-4.5a.75.75 0 0 0-.75-.75h-3a.75.75 0 0 0-.75.75V21a.75.75 0 0 1-.75.75H5.625a1.875 1.875 0 0 1-1.875-1.875v-6.198a2.29 2.29 0 0 0 .091-.086L12 5.432Z"
      }));
    });
    Component = HomeIcon;
  }
  return Component;
};

// /:https://framerusercontent.com/modules/hKjtTuWGYB451ckw6eTN/bbq95ZQZ142lE2fXscHd/Hero.js
var iconKeys = ["AcademicCap", "AdjustmentsVertical", "ArchiveBox", "ArchiveBoxArrowDown", "ArchiveBoxXMark", "ArrowDown", "ArrowDownCircle", "ArrowDownLeft", "ArrowDownOnSquare", "ArrowDownRight", "ArrowDownTray", "ArrowLeft", "ArrowLeftCircle", "ArrowLeftOnRectangle", "ArrowLongDown", "ArrowLongLeft", "ArrowLongRight", "ArrowLongUp", "ArrowPath", "ArrowRight", "ArrowRightCircle", "ArrowSmallDown", "ArrowSmallLeft", "ArrowSmallRight", "ArrowSmallUp", "ArrowTrendingDown", "ArrowTrendingUp", "ArrowUp", "ArrowUpCircle", "ArrowUpLeft", "ArrowUpOnSquare", "ArrowUpOnSquareStack", "ArrowUpRight", "ArrowUpTray", "ArrowUturnDown", "ArrowUturnLeft", "ArrowUturnRight", "ArrowUturnUp", "ArrowsPointingIn", "ArrowsPointingOut", "ArrowsRightLeft", "ArrowsUpDown", "AtSymbol", "Backspace", "Backward", "Banknotes", "Bars2", "Bars3", "Bars3BottomLeft", "Bars3BottomRight", "Bars3CenterLeft", "Bars4", "BarsArrowDown", "BarsArrowUp", "Battery0", "Battery100", "Battery50", "Beaker", "Bell", "BellAlert", "BellSlash", "BellSnooze", "Bolt", "BoltSlash", "BookOpen", "Bookmark", "BookmarkSlash", "BookmarkSquare", "Briefcase", "BugAnt", "BuildingLibrary", "BuildingOffice", "BuildingOffice2", "BuildingStorefront", "Cake", "Calculator", "Calendar", "CalendarDays", "Camera", "ChartBar", "ChartBarSquare", "ChartPie", "ChatBubbleLeft", "ChatBubbleLeftRight", "ChatBubbleOvalLeft", "Check", "CheckBadge", "CheckCircle", "ChevronDoubleDown", "ChevronDoubleLeft", "ChevronDoubleRight", "ChevronDoubleUp", "ChevronDown", "ChevronLeft", "ChevronRight", "ChevronUp", "ChevronUpDown", "CircleStack", "Clipboard", "ClipboardDocument", "Clock", "Cloud", "CloudArrowDown", "CloudArrowUp", "CodeBracket", "CodeBracketSquare", "Cog", "Cog6Tooth", "Cog8Tooth", "CommandLine", "ComputerDesktop", "CpuChip", "CreditCard", "Cube", "CubeTransparent", "CurrencyBangladeshi", "CurrencyDollar", "CurrencyEuro", "CurrencyPound", "CurrencyRupee", "CurrencyYen", "CursorArrowRays", "CursorArrowRipple", "DevicePhoneMobile", "DeviceTablet", "Document", "DocumentArrowDown", "DocumentArrowUp", "DocumentChartBar", "DocumentCheck", "DocumentDuplicate", "DocumentMinus", "DocumentPlus", "DocumentText", "EllipsisHorizontal", "EllipsisVertical", "Envelope", "EnvelopeOpen", "ExclamationCircle", "ExclamationTriangle", "Eye", "EyeDropper", "EyeSlash", "FaceFrown", "FaceSmile", "Film", "FingerPrint", "Fire", "Flag", "Folder", "FolderArrowDown", "FolderMinus", "FolderOpen", "FolderPlus", "Forward", "Funnel", "Gif", "Gift", "GiftTop", "GlobeAlt", "GlobeAmericas", "GlobeAsiaAustralia", "GlobeEuropeAfrica", "HandRaised", "HandThumbDown", "HandThumbUp", "Hashtag", "Heart", "Home", "HomeModern", "Identification", "Inbox", "InboxArrowDown", "InboxStack", "InformationCircle", "Key", "Language", "Lifebuoy", "LightBulb", "Link", "ListBullet", "LockClosed", "LockOpen", "MagnifyingGlass", "MagnifyingGlassMinus", "MagnifyingGlassPlus", "Map", "MapPin", "Megaphone", "Microphone", "Minus", "MinusCircle", "MinusSmall", "Moon", "MusicalNote", "Newspaper", "NoSymbol", "PaintBrush", "PaperAirplane", "PaperClip", "Pause", "PauseCircle", "Pencil", "PencilSquare", "Phone", "PhoneArrowDownLeft", "PhoneArrowUpRight", "PhoneXMark", "Photo", "Play", "PlayCircle", "PlayPause", "Plus", "PlusCircle", "PlusSmall", "Power", "PresentationChartBar", "Printer", "PuzzlePiece", "QrCode", "QuestionMarkCircle", "QueueList", "Radio", "ReceiptPercent", "ReceiptRefund", "RectangleGroup", "RectangleStack", "RocketLaunch", "Rss", "Scale", "Scissors", "Server", "ServerStack", "Share", "ShieldCheck", "ShieldExclamation", "ShoppingBag", "ShoppingCart", "Signal", "SignalSlash", "Sparkles", "SpeakerWave", "SpeakerXMark", "Square2Stack", "Square3Stack3D", "Squares2X2", "SquaresPlus", "Star", "Stop", "StopCircle", "Sun", "Swatch", "TableCells", "Tag", "Ticket", "Trash", "Trophy", "Truck", "Tv", "User", "UserCircle", "UserGroup", "UserMinus", "UserPlus", "Users", "Variable", "VideoCamera", "VideoCameraSlash", "ViewColumns", "ViewfinderCircle", "Wallet", "Wifi", "Window", "Wrench", "WrenchScrewdriver", "XCircle", "XMark", "index"];
var moduleBaseUrl = "https://framer.com/m/hero-icons/";
var lowercaseIconKeyPairs = iconKeys.reduce((res, key) => {
  res[key.toLowerCase()] = key;
  return res;
}, {});
function Icon(props) {
  const { color, selectByList, iconSearch, iconSelection, onClick, onMouseDown, onMouseUp, onMouseEnter, onMouseLeave, mirrored } = props;
  const isMounted = useRef(false);
  const iconKey = useIconSelection(iconKeys, selectByList, iconSearch, iconSelection, lowercaseIconKeyPairs);
  const [SelectedIcon, setSelectedIcon] = useState(iconKey === "Home" ? Home_default(React) : null);
  async function importModule() {
    try {
      const iconModuleUrl = `${moduleBaseUrl}${iconKey}.js@0.0.28`;
      const module = await import(
        /* webpackIgnore: true */
        /* @vite-ignore */
        iconModuleUrl
      );
      if (isMounted.current) setSelectedIcon(module.default(React));
    } catch {
      if (isMounted.current) setSelectedIcon(null);
    }
  }
  useEffect(() => {
    isMounted.current = true;
    importModule();
    return () => {
      isMounted.current = false;
    };
  }, [iconKey]);
  const isOnCanvas = RenderTarget.current() === RenderTarget.canvas;
  const emptyState = isOnCanvas ? /* @__PURE__ */ _jsx(NullState, {}) : null;
  return /* @__PURE__ */ _jsx(motion.div, { style: { display: "contents" }, onClick, onMouseEnter, onMouseLeave, onMouseDown, onMouseUp, children: SelectedIcon ? /* @__PURE__ */ _jsx(SelectedIcon, { style: { width: "100%", height: "100%", transform: mirrored ? "scale(-1, 1)" : void 0 }, color }) : emptyState });
}
Icon.displayName = "Hero";
Icon.defaultProps = { width: 24, height: 24, iconSelection: "Home", iconSearch: "Home", color: "#66F", selectByList: true, mirrored: false };
addPropertyControls(Icon, { selectByList: { type: ControlType.Boolean, title: "Select", enabledTitle: "List", disabledTitle: "Search", defaultValue: Icon.defaultProps.selectByList }, iconSelection: { type: ControlType.Enum, options: iconKeys, defaultValue: Icon.defaultProps.iconSelection, title: "Name", hidden: ({ selectByList }) => !selectByList, description: "Find every icon name on the [Hero site](https://heroicons.com/)" }, iconSearch: { type: ControlType.String, title: "Name", placeholder: "Menu, Wifi, Box\u2026", hidden: ({ selectByList }) => selectByList }, mirrored: { type: ControlType.Boolean, enabledTitle: "Yes", disabledTitle: "No", defaultValue: Icon.defaultProps.mirrored }, color: { type: ControlType.Color, title: "Color", defaultValue: Icon.defaultProps.color }, ...defaultEvents });

export {
  Icon
};
