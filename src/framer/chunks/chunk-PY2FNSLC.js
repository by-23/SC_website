// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 61763921e49c2823 "Suprema (copy)", do not edit manually */
// /:https://framerusercontent.com/modules/wb6ZrZlCLNQ5HHBJtNND/c1GLxCsQBQvlLXhkz7er/Particles.js
import { jsx as _jsx } from "react/jsx-runtime";
import { addPropertyControls, ControlType, Color, RenderTarget } from "unframer";

// /:https://esm.sh/*react-tsparticles@2.12.2/es2022/react-tsparticles.mjs
import d2, { Component as y } from "react";

// /:https://esm.sh/*tsparticles-engine@2.12.0/es2022/tsparticles-engine.mjs
var U = "generated";
var Nt = "pointerdown";
var Xt = "pointerup";
var _t = "pointerleave";
var Yt = "pointerout";
var wt = "pointermove";
var Zt = "touchstart";
var zt = "touchend";
var Qt = "touchmove";
var Jt = "touchcancel";
var Kt = "resize";
var jt = "visibilitychange";
var I = "tsParticles - Error";
var W = class s {
  constructor(e6, t12, i8) {
    if (this._updateFromAngle = (o7, r8) => {
      this.x = Math.cos(o7) * r8, this.y = Math.sin(o7) * r8;
    }, !S(e6) && e6) {
      this.x = e6.x, this.y = e6.y;
      let o7 = e6;
      this.z = o7.z ? o7.z : 0;
    } else if (e6 !== void 0 && t12 !== void 0) this.x = e6, this.y = t12, this.z = i8 ?? 0;
    else throw new Error(`${I} Vector3d not initialized correctly`);
  }
  static get origin() {
    return s.create(0, 0, 0);
  }
  get angle() {
    return Math.atan2(this.y, this.x);
  }
  set angle(e6) {
    this._updateFromAngle(e6, this.length);
  }
  get length() {
    return Math.sqrt(this.getLengthSq());
  }
  set length(e6) {
    this._updateFromAngle(this.angle, e6);
  }
  static clone(e6) {
    return s.create(e6.x, e6.y, e6.z);
  }
  static create(e6, t12, i8) {
    return new s(e6, t12, i8);
  }
  add(e6) {
    return s.create(this.x + e6.x, this.y + e6.y, this.z + e6.z);
  }
  addTo(e6) {
    this.x += e6.x, this.y += e6.y, this.z += e6.z;
  }
  copy() {
    return s.clone(this);
  }
  distanceTo(e6) {
    return this.sub(e6).length;
  }
  distanceToSq(e6) {
    return this.sub(e6).getLengthSq();
  }
  div(e6) {
    return s.create(this.x / e6, this.y / e6, this.z / e6);
  }
  divTo(e6) {
    this.x /= e6, this.y /= e6, this.z /= e6;
  }
  getLengthSq() {
    return this.x ** 2 + this.y ** 2;
  }
  mult(e6) {
    return s.create(this.x * e6, this.y * e6, this.z * e6);
  }
  multTo(e6) {
    this.x *= e6, this.y *= e6, this.z *= e6;
  }
  normalize() {
    let e6 = this.length;
    e6 != 0 && this.multTo(1 / e6);
  }
  rotate(e6) {
    return s.create(this.x * Math.cos(e6) - this.y * Math.sin(e6), this.x * Math.sin(e6) + this.y * Math.cos(e6), 0);
  }
  setTo(e6) {
    this.x = e6.x, this.y = e6.y;
    let t12 = e6;
    this.z = t12.z ? t12.z : 0;
  }
  sub(e6) {
    return s.create(this.x - e6.x, this.y - e6.y, this.z - e6.z);
  }
  subFrom(e6) {
    this.x -= e6.x, this.y -= e6.y, this.z -= e6.z;
  }
};
var F = class s2 extends W {
  constructor(e6, t12) {
    super(e6, t12, 0);
  }
  static get origin() {
    return s2.create(0, 0);
  }
  static clone(e6) {
    return s2.create(e6.x, e6.y);
  }
  static create(e6, t12) {
    return new s2(e6, t12);
  }
};
var ei = Math.random;
function z() {
  return Pt(ei(), 0, 1 - 1e-16);
}
function Pt(s82, e6, t12) {
  return Math.min(Math.max(s82, e6), t12);
}
function L(s82) {
  let e6 = ce(s82), t12 = le(s82);
  return e6 === t12 && (t12 = 0), z() * (e6 - t12) + t12;
}
function d(s82) {
  return S(s82) ? s82 : L(s82);
}
function le(s82) {
  return S(s82) ? s82 : s82.min;
}
function ce(s82) {
  return S(s82) ? s82 : s82.max;
}
function p(s82, e6) {
  if (s82 === e6 || e6 === void 0 && S(s82)) return s82;
  let t12 = le(s82), i8 = ce(s82);
  return e6 !== void 0 ? { min: Math.min(t12, e6), max: Math.max(i8, e6) } : p(t12, i8);
}
function $(s82) {
  let e6 = s82.random, { enable: t12, minimumValue: i8 } = O(e6) ? { enable: e6, minimumValue: 0 } : e6;
  return d(t12 ? p(s82.value, i8) : s82.value);
}
function Rt(s82, e6) {
  let t12 = s82.x - e6.x, i8 = s82.y - e6.y;
  return { dx: t12, dy: i8, distance: Math.sqrt(t12 ** 2 + i8 ** 2) };
}
function X(s82, e6) {
  return Rt(s82, e6).distance;
}
function ti(s82, e6, t12) {
  if (S(s82)) return s82 * Math.PI / 180;
  switch (s82) {
    case "top":
      return -Math.PI / 2;
    case "top-right":
      return -Math.PI / 4;
    case "right":
      return 0;
    case "bottom-right":
      return Math.PI / 4;
    case "bottom":
      return Math.PI / 2;
    case "bottom-left":
      return 3 * Math.PI / 4;
    case "left":
      return Math.PI;
    case "top-left":
      return -3 * Math.PI / 4;
    case "inside":
      return Math.atan2(t12.y - e6.y, t12.x - e6.x);
    case "outside":
      return Math.atan2(e6.y - t12.y, e6.x - t12.x);
    default:
      return z() * Math.PI * 2;
  }
}
function ii(s82) {
  let e6 = F.origin;
  return e6.length = 1, e6.angle = s82, e6;
}
function kt(s82) {
  return { x: s82.position?.x ?? z() * s82.size.width, y: s82.position?.y ?? z() * s82.size.height };
}
function ue(s82) {
  return s82 ? s82.endsWith("%") ? parseFloat(s82) / 100 : parseFloat(s82) : 1;
}
var T = { debug: console.debug, error: console.error, info: console.info, log: console.log, verbose: console.log, warning: console.warn };
function A() {
  return T;
}
function Z() {
  return typeof window > "u" || !window || typeof window.document > "u" || !window.document;
}
function Ci() {
  return !Z() && typeof matchMedia < "u";
}
function fe(s82) {
  if (Ci()) return matchMedia(s82);
}
function oi(s82) {
  if (!(Z() || typeof MutationObserver > "u")) return new MutationObserver(s82);
}
function pe(s82, e6) {
  return s82 === e6 || R(e6) && e6.indexOf(s82) > -1;
}
function Oi(s82) {
  return Math.floor(z() * s82.length);
}
function de(s82, e6, t12 = true) {
  return s82[e6 !== void 0 && t12 ? e6 % s82.length : Oi(s82)];
}
function x(s82, ...e6) {
  for (let t12 of e6) {
    if (t12 == null) continue;
    if (!Y(t12)) {
      s82 = t12;
      continue;
    }
    let i8 = Array.isArray(t12);
    i8 && (Y(s82) || !s82 || !Array.isArray(s82)) ? s82 = [] : !i8 && (Y(s82) || !s82 || Array.isArray(s82)) && (s82 = {});
    for (let o7 in t12) {
      if (o7 === "__proto__") continue;
      let r8 = t12, n12 = r8[o7], a7 = s82;
      a7[o7] = Y(n12) && Array.isArray(n12) ? n12.map((h9) => x(a7[o7], h9)) : x(a7[o7], n12);
    }
  }
  return s82;
}
function M(s82, e6) {
  return R(s82) ? s82.map((t12, i8) => e6(t12, i8)) : e6(s82, 0);
}
function G(s82, e6, t12) {
  return R(s82) ? de(s82, e6, t12) : s82;
}
function ai(s82, e6) {
  let t12 = s82.value, i8 = s82.animation, o7 = { delayTime: d(i8.delay) * 1e3, enable: i8.enable, value: d(s82.value) * e6, max: ce(t12) * e6, min: le(t12) * e6, loops: 0, maxLoops: d(i8.count), time: 0 };
  if (i8.enable) {
    switch (o7.decay = 1 - d(i8.decay), i8.mode) {
      case "increase":
        o7.status = "increasing";
        break;
      case "decrease":
        o7.status = "decreasing";
        break;
      case "random":
        o7.status = z() >= 0.5 ? "increasing" : "decreasing";
        break;
    }
    let r8 = i8.mode === "auto";
    switch (i8.startValue) {
      case "min":
        o7.value = o7.min, r8 && (o7.status = "increasing");
        break;
      case "max":
        o7.value = o7.max, r8 && (o7.status = "decreasing");
        break;
      case "random":
      default:
        o7.value = L(o7), r8 && (o7.status = z() >= 0.5 ? "increasing" : "decreasing");
        break;
    }
  }
  return o7.initialValue = o7.value, o7;
}
function hi(s82, e6) {
  if (!(s82.mode === "percent")) {
    let { mode: o7, ...r8 } = s82;
    return r8;
  }
  return "x" in s82 ? { x: s82.x / 100 * e6.width, y: s82.y / 100 * e6.height } : { width: s82.width / 100 * e6.width, height: s82.height / 100 * e6.height };
}
function me(s82, e6) {
  return hi(s82, e6);
}
function O(s82) {
  return typeof s82 == "boolean";
}
function P(s82) {
  return typeof s82 == "string";
}
function S(s82) {
  return typeof s82 == "number";
}
function ge(s82) {
  return typeof s82 == "function";
}
function Y(s82) {
  return typeof s82 == "object" && s82 !== null;
}
function R(s82) {
  return Array.isArray(s82);
}
var ye = "random";
var ve = /* @__PURE__ */ new Map();
function Tt(s82) {
  ve.set(s82.key, s82);
}
function Ct(s82, e6, t12) {
  return t12 < 0 && (t12 += 1), t12 > 1 && (t12 -= 1), t12 < 1 / 6 ? s82 + (e6 - s82) * 6 * t12 : t12 < 1 / 2 ? e6 : t12 < 2 / 3 ? s82 + (e6 - s82) * (2 / 3 - t12) * 6 : s82;
}
function li(s82) {
  for (let [, r8] of ve) if (s82.startsWith(r8.stringPrefix)) return r8.parseString(s82);
  let e6 = /^#?([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i, t12 = s82.replace(e6, (r8, n12, a7, h9, l16) => n12 + n12 + a7 + a7 + h9 + h9 + (l16 !== void 0 ? l16 + l16 : "")), i8 = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i, o7 = i8.exec(t12);
  return o7 ? { a: o7[4] !== void 0 ? parseInt(o7[4], 16) / 255 : 1, b: parseInt(o7[3], 16), g: parseInt(o7[2], 16), r: parseInt(o7[1], 16) } : void 0;
}
function V(s82, e6, t12 = true) {
  if (!s82) return;
  let i8 = P(s82) ? { value: s82 } : s82;
  if (P(i8.value)) return Et(i8.value, e6, t12);
  if (R(i8.value)) return V({ value: de(i8.value, e6, t12) });
  for (let [, o7] of ve) {
    let r8 = o7.handleRangeColor(i8);
    if (r8) return r8;
  }
}
function Et(s82, e6, t12 = true) {
  if (!s82) return;
  let i8 = P(s82) ? { value: s82 } : s82;
  if (P(i8.value)) return i8.value === ye ? fi() : Ii(i8.value);
  if (R(i8.value)) return Et({ value: de(i8.value, e6, t12) });
  for (let [, o7] of ve) {
    let r8 = o7.handleColor(i8);
    if (r8) return r8;
  }
}
function It(s82, e6, t12 = true) {
  let i8 = V(s82, e6, t12);
  return i8 ? ci(i8) : void 0;
}
function ci(s82) {
  let e6 = s82.r / 255, t12 = s82.g / 255, i8 = s82.b / 255, o7 = Math.max(e6, t12, i8), r8 = Math.min(e6, t12, i8), n12 = { h: 0, l: (o7 + r8) / 2, s: 0 };
  return o7 !== r8 && (n12.s = n12.l < 0.5 ? (o7 - r8) / (o7 + r8) : (o7 - r8) / (2 - o7 - r8), n12.h = e6 === o7 ? (t12 - i8) / (o7 - r8) : n12.h = t12 === o7 ? 2 + (i8 - e6) / (o7 - r8) : 4 + (e6 - t12) / (o7 - r8)), n12.l *= 100, n12.s *= 100, n12.h *= 60, n12.h < 0 && (n12.h += 360), n12.h >= 360 && (n12.h -= 360), n12;
}
function Ii(s82) {
  return li(s82);
}
function q(s82) {
  let e6 = { b: 0, g: 0, r: 0 }, t12 = { h: s82.h / 360, l: s82.l / 100, s: s82.s / 100 };
  if (!t12.s) e6.r = e6.g = e6.b = t12.l;
  else {
    let i8 = t12.l < 0.5 ? t12.l * (1 + t12.s) : t12.l + t12.s - t12.l * t12.s, o7 = 2 * t12.l - i8;
    e6.r = Ct(o7, i8, t12.h + 1 / 3), e6.g = Ct(o7, i8, t12.h), e6.b = Ct(o7, i8, t12.h - 1 / 3);
  }
  return e6.r = Math.floor(e6.r * 255), e6.g = Math.floor(e6.g * 255), e6.b = Math.floor(e6.b * 255), e6;
}
function ui(s82) {
  let e6 = q(s82);
  return { a: s82.a, b: e6.b, g: e6.g, r: e6.r };
}
function fi(s82) {
  let e6 = s82 ?? 0;
  return { b: Math.floor(L(p(e6, 256))), g: Math.floor(L(p(e6, 256))), r: Math.floor(L(p(e6, 256))) };
}
function Q(s82, e6) {
  return `rgba(${s82.r}, ${s82.g}, ${s82.b}, ${e6 ?? 1})`;
}
function Dt(s82, e6) {
  return `hsla(${s82.h}, ${s82.s}%, ${s82.l}%, ${e6 ?? 1})`;
}
function Vt(s82) {
  return s82 !== void 0 ? { h: s82.h.value, s: s82.s.value, l: s82.l.value } : void 0;
}
function pi(s82, e6, t12) {
  s82.fillStyle = t12 ?? "rgba(0,0,0,0)", s82.fillRect(0, 0, e6.width, e6.height);
}
function di(s82, e6, t12, i8) {
  t12 && (s82.globalAlpha = i8, s82.drawImage(t12, 0, 0, e6.width, e6.height), s82.globalAlpha = 1);
}
function be(s82, e6) {
  s82.clearRect(0, 0, e6.width, e6.height);
}
function mi(s82) {
  let { container: e6, context: t12, particle: i8, delta: o7, colorStyles: r8, backgroundMask: n12, composite: a7, radius: h9, opacity: l16, shadow: c14, transform: u11 } = s82, f11 = i8.getPosition(), m11 = i8.rotation + (i8.pathRotation ? i8.velocity.angle : 0), y15 = { sin: Math.sin(m11), cos: Math.cos(m11) }, g14 = { a: y15.cos * (u11.a ?? 1), b: y15.sin * (u11.b ?? 1), c: -y15.sin * (u11.c ?? 1), d: y15.cos * (u11.d ?? 1) };
  t12.setTransform(g14.a, g14.b, g14.c, g14.d, f11.x, f11.y), t12.beginPath(), n12 && (t12.globalCompositeOperation = a7);
  let _8 = i8.shadowColor;
  c14.enable && _8 && (t12.shadowBlur = c14.blur, t12.shadowColor = Q(_8), t12.shadowOffsetX = c14.offset.x, t12.shadowOffsetY = c14.offset.y), r8.fill && (t12.fillStyle = r8.fill);
  let b14 = i8.strokeWidth ?? 0;
  t12.lineWidth = b14, r8.stroke && (t12.strokeStyle = r8.stroke), Vi(e6, t12, i8, h9, l16, o7), b14 > 0 && t12.stroke(), i8.close && t12.closePath(), i8.fill && t12.fill(), Fi(e6, t12, i8, h9, l16, o7), t12.globalCompositeOperation = "source-over", t12.setTransform(1, 0, 0, 1, 0, 0);
}
function Vi(s82, e6, t12, i8, o7, r8) {
  if (!t12.shape) return;
  let n12 = s82.drawers.get(t12.shape);
  n12 && n12.draw(e6, t12, i8, o7, r8, s82.retina.pixelRatio);
}
function Fi(s82, e6, t12, i8, o7, r8) {
  if (!t12.shape) return;
  let n12 = s82.drawers.get(t12.shape);
  !n12 || !n12.afterEffect || n12.afterEffect(e6, t12, i8, o7, r8, s82.retina.pixelRatio);
}
function gi(s82, e6, t12) {
  e6.draw && e6.draw(s82, t12);
}
function xi(s82, e6, t12, i8) {
  e6.drawParticle && e6.drawParticle(s82, t12, i8);
}
function yi(s82, e6, t12) {
  return { h: s82.h, s: s82.s, l: s82.l + (e6 === "darken" ? -1 : 1) * t12 };
}
function Li(s82, e6, t12) {
  let i8 = e6[t12];
  i8 !== void 0 && (s82[t12] = (s82[t12] ?? 1) * i8);
}
var _e = class {
  constructor(e6) {
    this.container = e6, this._applyPostDrawUpdaters = (t12) => {
      for (let i8 of this._postDrawUpdaters) i8.afterDraw && i8.afterDraw(t12);
    }, this._applyPreDrawUpdaters = (t12, i8, o7, r8, n12, a7) => {
      for (let h9 of this._preDrawUpdaters) {
        if (h9.getColorStyles) {
          let { fill: l16, stroke: c14 } = h9.getColorStyles(i8, t12, o7, r8);
          l16 && (n12.fill = l16), c14 && (n12.stroke = c14);
        }
        if (h9.getTransformValues) {
          let l16 = h9.getTransformValues(i8);
          for (let c14 in l16) Li(a7, l16, c14);
        }
        h9.beforeDraw && h9.beforeDraw(i8);
      }
    }, this._applyResizePlugins = () => {
      for (let t12 of this._resizePlugins) t12.resize && t12.resize();
    }, this._getPluginParticleColors = (t12) => {
      let i8, o7;
      for (let r8 of this._colorPlugins) if (!i8 && r8.particleFillColor && (i8 = It(r8.particleFillColor(t12))), !o7 && r8.particleStrokeColor && (o7 = It(r8.particleStrokeColor(t12))), i8 && o7) break;
      return [i8, o7];
    }, this._initCover = () => {
      let t12 = this.container.actualOptions, i8 = t12.backgroundMask.cover, o7 = i8.color, r8 = V(o7);
      if (r8) {
        let n12 = { ...r8, a: i8.opacity };
        this._coverColorStyle = Q(n12, n12.a);
      }
    }, this._initStyle = () => {
      let t12 = this.element, i8 = this.container.actualOptions;
      if (t12) {
        this._fullScreen ? (this._originalStyle = x({}, t12.style), this._setFullScreenStyle()) : this._resetOriginalStyle();
        for (let o7 in i8.style) {
          if (!o7 || !i8.style) continue;
          let r8 = i8.style[o7];
          r8 && t12.style.setProperty(o7, r8, "important");
        }
      }
    }, this._initTrail = async () => {
      let t12 = this.container.actualOptions, i8 = t12.particles.move.trail, o7 = i8.fill;
      if (i8.enable) if (o7.color) {
        let r8 = V(o7.color);
        if (!r8) return;
        let n12 = t12.particles.move.trail;
        this._trailFill = { color: { ...r8 }, opacity: 1 / n12.length };
      } else await new Promise((r8, n12) => {
        if (!o7.image) return;
        let a7 = document.createElement("img");
        a7.addEventListener("load", () => {
          this._trailFill = { image: a7, opacity: 1 / i8.length }, r8();
        }), a7.addEventListener("error", (h9) => {
          n12(h9.error);
        }), a7.src = o7.image;
      });
    }, this._paintBase = (t12) => {
      this.draw((i8) => pi(i8, this.size, t12));
    }, this._paintImage = (t12, i8) => {
      this.draw((o7) => di(o7, this.size, t12, i8));
    }, this._repairStyle = () => {
      let t12 = this.element;
      t12 && (this._safeMutationObserver((i8) => i8.disconnect()), this._initStyle(), this.initBackground(), this._safeMutationObserver((i8) => i8.observe(t12, { attributes: true })));
    }, this._resetOriginalStyle = () => {
      let t12 = this.element, i8 = this._originalStyle;
      if (!(t12 && i8)) return;
      let o7 = t12.style;
      o7.position = i8.position, o7.zIndex = i8.zIndex, o7.top = i8.top, o7.left = i8.left, o7.width = i8.width, o7.height = i8.height;
    }, this._safeMutationObserver = (t12) => {
      this._mutationObserver && t12(this._mutationObserver);
    }, this._setFullScreenStyle = () => {
      let t12 = this.element;
      if (!t12) return;
      let i8 = "important", o7 = t12.style;
      o7.setProperty("position", "fixed", i8), o7.setProperty("z-index", this.container.actualOptions.fullScreen.zIndex.toString(10), i8), o7.setProperty("top", "0", i8), o7.setProperty("left", "0", i8), o7.setProperty("width", "100%", i8), o7.setProperty("height", "100%", i8);
    }, this.size = { height: 0, width: 0 }, this._context = null, this._generated = false, this._preDrawUpdaters = [], this._postDrawUpdaters = [], this._resizePlugins = [], this._colorPlugins = [];
  }
  get _fullScreen() {
    return this.container.actualOptions.fullScreen.enable;
  }
  clear() {
    let e6 = this.container.actualOptions, t12 = e6.particles.move.trail, i8 = this._trailFill;
    e6.backgroundMask.enable ? this.paint() : t12.enable && t12.length > 0 && i8 ? i8.color ? this._paintBase(Q(i8.color, i8.opacity)) : i8.image && this._paintImage(i8.image, i8.opacity) : this.draw((o7) => {
      be(o7, this.size);
    });
  }
  destroy() {
    if (this.stop(), this._generated) {
      let e6 = this.element;
      e6 && e6.remove();
    } else this._resetOriginalStyle();
    this._preDrawUpdaters = [], this._postDrawUpdaters = [], this._resizePlugins = [], this._colorPlugins = [];
  }
  draw(e6) {
    let t12 = this._context;
    if (t12) return e6(t12);
  }
  drawParticle(e6, t12) {
    if (e6.spawning || e6.destroyed) return;
    let i8 = e6.getRadius();
    if (i8 <= 0) return;
    let o7 = e6.getFillColor(), r8 = e6.getStrokeColor() ?? o7, [n12, a7] = this._getPluginParticleColors(e6);
    n12 || (n12 = o7), a7 || (a7 = r8), !(!n12 && !a7) && this.draw((h9) => {
      let l16 = this.container, c14 = l16.actualOptions, u11 = e6.options.zIndex, f11 = (1 - e6.zIndexFactor) ** u11.opacityRate, m11 = e6.bubble.opacity ?? e6.opacity?.value ?? 1, y15 = e6.strokeOpacity ?? m11, g14 = m11 * f11, _8 = y15 * f11, b14 = {}, C13 = { fill: n12 ? Dt(n12, g14) : void 0 };
      C13.stroke = a7 ? Dt(a7, _8) : C13.fill, this._applyPreDrawUpdaters(h9, e6, i8, g14, C13, b14), mi({ container: l16, context: h9, particle: e6, delta: t12, colorStyles: C13, backgroundMask: c14.backgroundMask.enable, composite: c14.backgroundMask.composite, radius: i8 * (1 - e6.zIndexFactor) ** u11.sizeRate, opacity: g14, shadow: e6.options.shadow, transform: b14 }), this._applyPostDrawUpdaters(e6);
    });
  }
  drawParticlePlugin(e6, t12, i8) {
    this.draw((o7) => xi(o7, e6, t12, i8));
  }
  drawPlugin(e6, t12) {
    this.draw((i8) => gi(i8, e6, t12));
  }
  async init() {
    this._safeMutationObserver((e6) => e6.disconnect()), this._mutationObserver = oi((e6) => {
      for (let t12 of e6) t12.type === "attributes" && t12.attributeName === "style" && this._repairStyle();
    }), this.resize(), this._initStyle(), this._initCover();
    try {
      await this._initTrail();
    } catch (e6) {
      A().error(e6);
    }
    this.initBackground(), this._safeMutationObserver((e6) => {
      this.element && e6.observe(this.element, { attributes: true });
    }), this.initUpdaters(), this.initPlugins(), this.paint();
  }
  initBackground() {
    let e6 = this.container.actualOptions, t12 = e6.background, i8 = this.element;
    if (!i8) return;
    let o7 = i8.style;
    if (o7) {
      if (t12.color) {
        let r8 = V(t12.color);
        o7.backgroundColor = r8 ? Q(r8, t12.opacity) : "";
      } else o7.backgroundColor = "";
      o7.backgroundImage = t12.image || "", o7.backgroundPosition = t12.position || "", o7.backgroundRepeat = t12.repeat || "", o7.backgroundSize = t12.size || "";
    }
  }
  initPlugins() {
    this._resizePlugins = [];
    for (let [, e6] of this.container.plugins) e6.resize && this._resizePlugins.push(e6), (e6.particleFillColor || e6.particleStrokeColor) && this._colorPlugins.push(e6);
  }
  initUpdaters() {
    this._preDrawUpdaters = [], this._postDrawUpdaters = [];
    for (let e6 of this.container.particles.updaters) e6.afterDraw && this._postDrawUpdaters.push(e6), (e6.getColorStyles || e6.getTransformValues || e6.beforeDraw) && this._preDrawUpdaters.push(e6);
  }
  loadCanvas(e6) {
    this._generated && this.element && this.element.remove(), this._generated = e6.dataset && U in e6.dataset ? e6.dataset[U] === "true" : this._generated, this.element = e6, this.element.ariaHidden = "true", this._originalStyle = x({}, this.element.style), this.size.height = e6.offsetHeight, this.size.width = e6.offsetWidth, this._context = this.element.getContext("2d"), this._safeMutationObserver((t12) => {
      this.element && t12.observe(this.element, { attributes: true });
    }), this.container.retina.init(), this.initBackground();
  }
  paint() {
    let e6 = this.container.actualOptions;
    this.draw((t12) => {
      e6.backgroundMask.enable && e6.backgroundMask.cover ? (be(t12, this.size), this._paintBase(this._coverColorStyle)) : this._paintBase();
    });
  }
  resize() {
    if (!this.element) return false;
    let e6 = this.container, t12 = e6.retina.pixelRatio, i8 = e6.canvas.size, o7 = { width: this.element.offsetWidth * t12, height: this.element.offsetHeight * t12 };
    if (o7.height === i8.height && o7.width === i8.width && o7.height === this.element.height && o7.width === this.element.width) return false;
    let r8 = { ...i8 };
    return this.element.width = i8.width = this.element.offsetWidth * t12, this.element.height = i8.height = this.element.offsetHeight * t12, this.container.started && (this.resizeFactor = { width: i8.width / r8.width, height: i8.height / r8.height }), true;
  }
  stop() {
    this._safeMutationObserver((e6) => e6.disconnect()), this._mutationObserver = void 0, this.draw((e6) => be(e6, this.size));
  }
  async windowResize() {
    if (!this.element || !this.resize()) return;
    let e6 = this.container, t12 = e6.updateActualOptions();
    e6.particles.setDensity(), this._applyResizePlugins(), t12 && await e6.refresh();
  }
};
function D(s82, e6, t12, i8, o7) {
  if (i8) {
    let r8 = { passive: true };
    O(o7) ? r8.capture = o7 : o7 !== void 0 && (r8 = o7), s82.addEventListener(e6, t12, r8);
  } else {
    let r8 = o7;
    s82.removeEventListener(e6, t12, r8);
  }
}
var we = class {
  constructor(e6) {
    this.container = e6, this._doMouseTouchClick = (t12) => {
      let i8 = this.container, o7 = i8.actualOptions;
      if (this._canPush) {
        let r8 = i8.interactivity.mouse, n12 = r8.position;
        if (!n12) return;
        r8.clickPosition = { ...n12 }, r8.clickTime = (/* @__PURE__ */ new Date()).getTime();
        let a7 = o7.interactivity.events.onClick;
        M(a7.mode, (h9) => this.container.handleClickMode(h9));
      }
      t12.type === "touchend" && setTimeout(() => this._mouseTouchFinish(), 500);
    }, this._handleThemeChange = (t12) => {
      let i8 = t12, o7 = this.container, r8 = o7.options, n12 = r8.defaultThemes, a7 = i8.matches ? n12.dark : n12.light, h9 = r8.themes.find((l16) => l16.name === a7);
      h9 && h9.default.auto && o7.loadTheme(a7);
    }, this._handleVisibilityChange = () => {
      let t12 = this.container, i8 = t12.actualOptions;
      this._mouseTouchFinish(), i8.pauseOnBlur && (document && document.hidden ? (t12.pageHidden = true, t12.pause()) : (t12.pageHidden = false, t12.getAnimationStatus() ? t12.play(true) : t12.draw(true)));
    }, this._handleWindowResize = async () => {
      this._resizeTimeout && (clearTimeout(this._resizeTimeout), delete this._resizeTimeout), this._resizeTimeout = setTimeout(async () => {
        let t12 = this.container.canvas;
        t12 && await t12.windowResize();
      }, this.container.actualOptions.interactivity.events.resize.delay * 1e3);
    }, this._manageInteractivityListeners = (t12, i8) => {
      let o7 = this._handlers, r8 = this.container, n12 = r8.actualOptions, a7 = r8.interactivity.element;
      if (!a7) return;
      let h9 = a7, l16 = r8.canvas.element;
      l16 && (l16.style.pointerEvents = h9 === l16 ? "initial" : "none"), (n12.interactivity.events.onHover.enable || n12.interactivity.events.onClick.enable) && (D(a7, wt, o7.mouseMove, i8), D(a7, Zt, o7.touchStart, i8), D(a7, Qt, o7.touchMove, i8), n12.interactivity.events.onClick.enable ? (D(a7, zt, o7.touchEndClick, i8), D(a7, Xt, o7.mouseUp, i8), D(a7, Nt, o7.mouseDown, i8)) : D(a7, zt, o7.touchEnd, i8), D(a7, t12, o7.mouseLeave, i8), D(a7, Jt, o7.touchCancel, i8));
    }, this._manageListeners = (t12) => {
      let i8 = this._handlers, o7 = this.container, r8 = o7.actualOptions, n12 = r8.interactivity.detectsOn, a7 = o7.canvas.element, h9 = _t;
      n12 === "window" ? (o7.interactivity.element = window, h9 = Yt) : n12 === "parent" && a7 ? o7.interactivity.element = a7.parentElement ?? a7.parentNode : o7.interactivity.element = a7, this._manageMediaMatch(t12), this._manageResize(t12), this._manageInteractivityListeners(h9, t12), document && D(document, jt, i8.visibilityChange, t12, false);
    }, this._manageMediaMatch = (t12) => {
      let i8 = this._handlers, o7 = fe("(prefers-color-scheme: dark)");
      if (o7) {
        if (o7.addEventListener !== void 0) {
          D(o7, "change", i8.themeChange, t12);
          return;
        }
        o7.addListener !== void 0 && (t12 ? o7.addListener(i8.oldThemeChange) : o7.removeListener(i8.oldThemeChange));
      }
    }, this._manageResize = (t12) => {
      let i8 = this._handlers, o7 = this.container;
      if (!o7.actualOptions.interactivity.events.resize) return;
      if (typeof ResizeObserver > "u") {
        D(window, Kt, i8.resize, t12);
        return;
      }
      let n12 = o7.canvas.element;
      this._resizeObserver && !t12 ? (n12 && this._resizeObserver.unobserve(n12), this._resizeObserver.disconnect(), delete this._resizeObserver) : !this._resizeObserver && t12 && n12 && (this._resizeObserver = new ResizeObserver(async (a7) => {
        a7.find((l16) => l16.target === n12) && await this._handleWindowResize();
      }), this._resizeObserver.observe(n12));
    }, this._mouseDown = () => {
      let { interactivity: t12 } = this.container;
      if (!t12) return;
      let { mouse: i8 } = t12;
      i8.clicking = true, i8.downPosition = i8.position;
    }, this._mouseTouchClick = (t12) => {
      let i8 = this.container, o7 = i8.actualOptions, { mouse: r8 } = i8.interactivity;
      r8.inside = true;
      let n12 = false, a7 = r8.position;
      if (!(!a7 || !o7.interactivity.events.onClick.enable)) {
        for (let [, h9] of i8.plugins) if (h9.clickPositionValid && (n12 = h9.clickPositionValid(a7), n12)) break;
        n12 || this._doMouseTouchClick(t12), r8.clicking = false;
      }
    }, this._mouseTouchFinish = () => {
      let t12 = this.container.interactivity;
      if (!t12) return;
      let i8 = t12.mouse;
      delete i8.position, delete i8.clickPosition, delete i8.downPosition, t12.status = _t, i8.inside = false, i8.clicking = false;
    }, this._mouseTouchMove = (t12) => {
      let i8 = this.container, o7 = i8.actualOptions, r8 = i8.interactivity, n12 = i8.canvas.element;
      if (!r8 || !r8.element) return;
      r8.mouse.inside = true;
      let a7;
      if (t12.type.startsWith("pointer")) {
        this._canPush = true;
        let l16 = t12;
        if (r8.element === window) {
          if (n12) {
            let c14 = n12.getBoundingClientRect();
            a7 = { x: l16.clientX - c14.left, y: l16.clientY - c14.top };
          }
        } else if (o7.interactivity.detectsOn === "parent") {
          let c14 = l16.target, u11 = l16.currentTarget;
          if (c14 && u11 && n12) {
            let f11 = c14.getBoundingClientRect(), m11 = u11.getBoundingClientRect(), y15 = n12.getBoundingClientRect();
            a7 = { x: l16.offsetX + 2 * f11.left - (m11.left + y15.left), y: l16.offsetY + 2 * f11.top - (m11.top + y15.top) };
          } else a7 = { x: l16.offsetX ?? l16.clientX, y: l16.offsetY ?? l16.clientY };
        } else l16.target === n12 && (a7 = { x: l16.offsetX ?? l16.clientX, y: l16.offsetY ?? l16.clientY });
      } else if (this._canPush = t12.type !== "touchmove", n12) {
        let l16 = t12, c14 = l16.touches[l16.touches.length - 1], u11 = n12.getBoundingClientRect();
        a7 = { x: c14.clientX - (u11.left ?? 0), y: c14.clientY - (u11.top ?? 0) };
      }
      let h9 = i8.retina.pixelRatio;
      a7 && (a7.x *= h9, a7.y *= h9), r8.mouse.position = a7, r8.status = wt;
    }, this._touchEnd = (t12) => {
      let i8 = t12, o7 = Array.from(i8.changedTouches);
      for (let r8 of o7) this._touches.delete(r8.identifier);
      this._mouseTouchFinish();
    }, this._touchEndClick = (t12) => {
      let i8 = t12, o7 = Array.from(i8.changedTouches);
      for (let r8 of o7) this._touches.delete(r8.identifier);
      this._mouseTouchClick(t12);
    }, this._touchStart = (t12) => {
      let i8 = t12, o7 = Array.from(i8.changedTouches);
      for (let r8 of o7) this._touches.set(r8.identifier, performance.now());
      this._mouseTouchMove(t12);
    }, this._canPush = true, this._touches = /* @__PURE__ */ new Map(), this._handlers = { mouseDown: () => this._mouseDown(), mouseLeave: () => this._mouseTouchFinish(), mouseMove: (t12) => this._mouseTouchMove(t12), mouseUp: (t12) => this._mouseTouchClick(t12), touchStart: (t12) => this._touchStart(t12), touchMove: (t12) => this._mouseTouchMove(t12), touchEnd: (t12) => this._touchEnd(t12), touchCancel: (t12) => this._touchEnd(t12), touchEndClick: (t12) => this._touchEndClick(t12), visibilityChange: () => this._handleVisibilityChange(), themeChange: (t12) => this._handleThemeChange(t12), oldThemeChange: (t12) => this._handleThemeChange(t12), resize: () => {
      this._handleWindowResize();
    } };
  }
  addListeners() {
    this._manageListeners(true);
  }
  removeListeners() {
    this._manageListeners(false);
  }
};
var k = class s3 {
  constructor() {
    this.value = "";
  }
  static create(e6, t12) {
    let i8 = new s3();
    return i8.load(e6), t12 !== void 0 && (P(t12) || R(t12) ? i8.load({ value: t12 }) : i8.load(t12)), i8;
  }
  load(e6) {
    e6?.value !== void 0 && (this.value = e6.value);
  }
};
var ze = class {
  constructor() {
    this.color = new k(), this.color.value = "", this.image = "", this.position = "", this.repeat = "", this.size = "", this.opacity = 1;
  }
  load(e6) {
    e6 && (e6.color !== void 0 && (this.color = k.create(this.color, e6.color)), e6.image !== void 0 && (this.image = e6.image), e6.position !== void 0 && (this.position = e6.position), e6.repeat !== void 0 && (this.repeat = e6.repeat), e6.size !== void 0 && (this.size = e6.size), e6.opacity !== void 0 && (this.opacity = e6.opacity));
  }
};
var Me = class {
  constructor() {
    this.color = new k(), this.color.value = "#fff", this.opacity = 1;
  }
  load(e6) {
    e6 && (e6.color !== void 0 && (this.color = k.create(this.color, e6.color)), e6.opacity !== void 0 && (this.opacity = e6.opacity));
  }
};
var Pe = class {
  constructor() {
    this.composite = "destination-out", this.cover = new Me(), this.enable = false;
  }
  load(e6) {
    if (e6) {
      if (e6.composite !== void 0 && (this.composite = e6.composite), e6.cover !== void 0) {
        let t12 = e6.cover, i8 = P(e6.cover) ? { color: e6.cover } : e6.cover;
        this.cover.load(t12.color !== void 0 ? t12 : { color: i8 });
      }
      e6.enable !== void 0 && (this.enable = e6.enable);
    }
  }
};
var Re = class {
  constructor() {
    this.enable = true, this.zIndex = 0;
  }
  load(e6) {
    e6 && (e6.enable !== void 0 && (this.enable = e6.enable), e6.zIndex !== void 0 && (this.zIndex = e6.zIndex));
  }
};
var Se = class {
  constructor() {
    this.enable = false, this.mode = [];
  }
  load(e6) {
    e6 && (e6.enable !== void 0 && (this.enable = e6.enable), e6.mode !== void 0 && (this.mode = e6.mode));
  }
};
var se = class {
  constructor() {
    this.selectors = [], this.enable = false, this.mode = [], this.type = "circle";
  }
  get el() {
    return this.elementId;
  }
  set el(e6) {
    this.elementId = e6;
  }
  get elementId() {
    return this.ids;
  }
  set elementId(e6) {
    this.ids = e6;
  }
  get ids() {
    return M(this.selectors, (e6) => e6.replace("#", ""));
  }
  set ids(e6) {
    this.selectors = M(e6, (t12) => `#${t12}`);
  }
  load(e6) {
    if (!e6) return;
    let t12 = e6.ids ?? e6.elementId ?? e6.el;
    t12 !== void 0 && (this.ids = t12), e6.selectors !== void 0 && (this.selectors = e6.selectors), e6.enable !== void 0 && (this.enable = e6.enable), e6.mode !== void 0 && (this.mode = e6.mode), e6.type !== void 0 && (this.type = e6.type);
  }
};
var ke = class {
  constructor() {
    this.enable = false, this.force = 2, this.smooth = 10;
  }
  load(e6) {
    e6 && (e6.enable !== void 0 && (this.enable = e6.enable), e6.force !== void 0 && (this.force = e6.force), e6.smooth !== void 0 && (this.smooth = e6.smooth));
  }
};
var Ce = class {
  constructor() {
    this.enable = false, this.mode = [], this.parallax = new ke();
  }
  load(e6) {
    e6 && (e6.enable !== void 0 && (this.enable = e6.enable), e6.mode !== void 0 && (this.mode = e6.mode), this.parallax.load(e6.parallax));
  }
};
var Oe = class {
  constructor() {
    this.delay = 0.5, this.enable = true;
  }
  load(e6) {
    e6 !== void 0 && (e6.delay !== void 0 && (this.delay = e6.delay), e6.enable !== void 0 && (this.enable = e6.enable));
  }
};
var Te = class {
  constructor() {
    this.onClick = new Se(), this.onDiv = new se(), this.onHover = new Ce(), this.resize = new Oe();
  }
  get onclick() {
    return this.onClick;
  }
  set onclick(e6) {
    this.onClick = e6;
  }
  get ondiv() {
    return this.onDiv;
  }
  set ondiv(e6) {
    this.onDiv = e6;
  }
  get onhover() {
    return this.onHover;
  }
  set onhover(e6) {
    this.onHover = e6;
  }
  load(e6) {
    if (!e6) return;
    this.onClick.load(e6.onClick ?? e6.onclick);
    let t12 = e6.onDiv ?? e6.ondiv;
    t12 !== void 0 && (this.onDiv = M(t12, (i8) => {
      let o7 = new se();
      return o7.load(i8), o7;
    })), this.onHover.load(e6.onHover ?? e6.onhover), O(e6.resize) ? this.resize.enable = e6.resize : this.resize.load(e6.resize);
  }
};
var Ee = class {
  constructor(e6, t12) {
    this._engine = e6, this._container = t12;
  }
  load(e6) {
    if (!e6 || !this._container) return;
    let t12 = this._engine.plugins.interactors.get(this._container);
    if (t12) for (let i8 of t12) i8.loadModeOptions && i8.loadModeOptions(this, e6);
  }
};
var J = class {
  constructor(e6, t12) {
    this.detectsOn = "window", this.events = new Te(), this.modes = new Ee(e6, t12);
  }
  get detect_on() {
    return this.detectsOn;
  }
  set detect_on(e6) {
    this.detectsOn = e6;
  }
  load(e6) {
    if (!e6) return;
    let t12 = e6.detectsOn ?? e6.detect_on;
    t12 !== void 0 && (this.detectsOn = t12), this.events.load(e6.events), this.modes.load(e6.modes);
  }
};
var Ie = class {
  load(e6) {
    e6 && (e6.position && (this.position = { x: e6.position.x ?? 50, y: e6.position.y ?? 50, mode: e6.position.mode ?? "percent" }), e6.options && (this.options = x({}, e6.options)));
  }
};
var De = class {
  constructor() {
    this.maxWidth = 1 / 0, this.options = {}, this.mode = "canvas";
  }
  load(e6) {
    e6 && (e6.maxWidth !== void 0 && (this.maxWidth = e6.maxWidth), e6.mode !== void 0 && (e6.mode === "screen" ? this.mode = "screen" : this.mode = "canvas"), e6.options !== void 0 && (this.options = x({}, e6.options)));
  }
};
var Ve = class {
  constructor() {
    this.auto = false, this.mode = "any", this.value = false;
  }
  load(e6) {
    e6 && (e6.auto !== void 0 && (this.auto = e6.auto), e6.mode !== void 0 && (this.mode = e6.mode), e6.value !== void 0 && (this.value = e6.value));
  }
};
var Fe = class {
  constructor() {
    this.name = "", this.default = new Ve();
  }
  load(e6) {
    e6 && (e6.name !== void 0 && (this.name = e6.name), this.default.load(e6.default), e6.options !== void 0 && (this.options = x({}, e6.options)));
  }
};
var K = class {
  constructor() {
    this.count = 0, this.enable = false, this.offset = 0, this.speed = 1, this.delay = 0, this.decay = 0, this.sync = true;
  }
  load(e6) {
    e6 && (e6.count !== void 0 && (this.count = p(e6.count)), e6.enable !== void 0 && (this.enable = e6.enable), e6.offset !== void 0 && (this.offset = p(e6.offset)), e6.speed !== void 0 && (this.speed = p(e6.speed)), e6.decay !== void 0 && (this.decay = p(e6.decay)), e6.delay !== void 0 && (this.delay = p(e6.delay)), e6.sync !== void 0 && (this.sync = e6.sync));
  }
};
var Le = class {
  constructor() {
    this.h = new K(), this.s = new K(), this.l = new K();
  }
  load(e6) {
    e6 && (this.h.load(e6.h), this.s.load(e6.s), this.l.load(e6.l));
  }
};
var N = class s4 extends k {
  constructor() {
    super(), this.animation = new Le();
  }
  static create(e6, t12) {
    let i8 = new s4();
    return i8.load(e6), t12 !== void 0 && (P(t12) || R(t12) ? i8.load({ value: t12 }) : i8.load(t12)), i8;
  }
  load(e6) {
    if (super.load(e6), !e6) return;
    let t12 = e6.animation;
    t12 !== void 0 && (t12.enable !== void 0 ? this.animation.h.load(t12) : this.animation.load(e6.animation));
  }
};
var Ae = class {
  constructor() {
    this.speed = 2;
  }
  load(e6) {
    e6 && e6.speed !== void 0 && (this.speed = e6.speed);
  }
};
var He = class {
  constructor() {
    this.enable = true, this.retries = 0;
  }
  load(e6) {
    e6 && (e6.enable !== void 0 && (this.enable = e6.enable), e6.retries !== void 0 && (this.retries = e6.retries));
  }
};
var oe = class {
  constructor() {
    this.count = 0, this.enable = false, this.speed = 1, this.decay = 0, this.delay = 0, this.sync = false;
  }
  load(e6) {
    e6 && (e6.count !== void 0 && (this.count = p(e6.count)), e6.enable !== void 0 && (this.enable = e6.enable), e6.speed !== void 0 && (this.speed = p(e6.speed)), e6.decay !== void 0 && (this.decay = p(e6.decay)), e6.delay !== void 0 && (this.delay = p(e6.delay)), e6.sync !== void 0 && (this.sync = e6.sync));
  }
};
var B = class extends oe {
  constructor() {
    super(), this.mode = "auto", this.startValue = "random";
  }
  load(e6) {
    super.load(e6), e6 && (e6.minimumValue !== void 0 && (this.minimumValue = e6.minimumValue), e6.mode !== void 0 && (this.mode = e6.mode), e6.startValue !== void 0 && (this.startValue = e6.startValue));
  }
};
var Be = class {
  constructor() {
    this.enable = false, this.minimumValue = 0;
  }
  load(e6) {
    e6 && (e6.enable !== void 0 && (this.enable = e6.enable), e6.minimumValue !== void 0 && (this.minimumValue = e6.minimumValue));
  }
};
var E = class {
  constructor() {
    this.random = new Be(), this.value = 0;
  }
  load(e6) {
    e6 && (O(e6.random) ? this.random.enable = e6.random : this.random.load(e6.random), e6.value !== void 0 && (this.value = p(e6.value, this.random.enable ? this.random.minimumValue : void 0)));
  }
};
var re = class extends E {
  constructor() {
    super(), this.random.minimumValue = 0.1, this.value = 1;
  }
};
var j = class {
  constructor() {
    this.horizontal = new re(), this.vertical = new re();
  }
  load(e6) {
    e6 && (this.horizontal.load(e6.horizontal), this.vertical.load(e6.vertical));
  }
};
var Ue = class {
  constructor() {
    this.absorb = new Ae(), this.bounce = new j(), this.enable = false, this.maxSpeed = 50, this.mode = "bounce", this.overlap = new He();
  }
  load(e6) {
    e6 && (this.absorb.load(e6.absorb), this.bounce.load(e6.bounce), e6.enable !== void 0 && (this.enable = e6.enable), e6.maxSpeed !== void 0 && (this.maxSpeed = p(e6.maxSpeed)), e6.mode !== void 0 && (this.mode = e6.mode), this.overlap.load(e6.overlap));
  }
};
var We = class {
  constructor() {
    this.offset = 0, this.value = 90;
  }
  load(e6) {
    e6 && (e6.offset !== void 0 && (this.offset = p(e6.offset)), e6.value !== void 0 && (this.value = p(e6.value)));
  }
};
var $e = class {
  constructor() {
    this.distance = 200, this.enable = false, this.rotate = { x: 3e3, y: 3e3 };
  }
  get rotateX() {
    return this.rotate.x;
  }
  set rotateX(e6) {
    this.rotate.x = e6;
  }
  get rotateY() {
    return this.rotate.y;
  }
  set rotateY(e6) {
    this.rotate.y = e6;
  }
  load(e6) {
    if (!e6) return;
    e6.distance !== void 0 && (this.distance = p(e6.distance)), e6.enable !== void 0 && (this.enable = e6.enable);
    let t12 = e6.rotate?.x ?? e6.rotateX;
    t12 !== void 0 && (this.rotate.x = t12);
    let i8 = e6.rotate?.y ?? e6.rotateY;
    i8 !== void 0 && (this.rotate.y = i8);
  }
};
var Ge = class {
  constructor() {
    this.x = 50, this.y = 50, this.mode = "percent", this.radius = 0;
  }
  load(e6) {
    e6 && (e6.x !== void 0 && (this.x = e6.x), e6.y !== void 0 && (this.y = e6.y), e6.mode !== void 0 && (this.mode = e6.mode), e6.radius !== void 0 && (this.radius = e6.radius));
  }
};
var qe = class {
  constructor() {
    this.acceleration = 9.81, this.enable = false, this.inverse = false, this.maxSpeed = 50;
  }
  load(e6) {
    e6 && (e6.acceleration !== void 0 && (this.acceleration = p(e6.acceleration)), e6.enable !== void 0 && (this.enable = e6.enable), e6.inverse !== void 0 && (this.inverse = e6.inverse), e6.maxSpeed !== void 0 && (this.maxSpeed = p(e6.maxSpeed)));
  }
};
var Ne = class {
  constructor() {
    this.clamp = true, this.delay = new E(), this.enable = false, this.options = {};
  }
  load(e6) {
    e6 && (e6.clamp !== void 0 && (this.clamp = e6.clamp), this.delay.load(e6.delay), e6.enable !== void 0 && (this.enable = e6.enable), this.generator = e6.generator, e6.options && (this.options = x(this.options, e6.options)));
  }
};
var Xe = class {
  load(e6) {
    e6 && (e6.color !== void 0 && (this.color = k.create(this.color, e6.color)), e6.image !== void 0 && (this.image = e6.image));
  }
};
var Ye = class {
  constructor() {
    this.enable = false, this.length = 10, this.fill = new Xe();
  }
  get fillColor() {
    return this.fill.color;
  }
  set fillColor(e6) {
    this.fill.load({ color: e6 });
  }
  load(e6) {
    e6 && (e6.enable !== void 0 && (this.enable = e6.enable), (e6.fill !== void 0 || e6.fillColor !== void 0) && this.fill.load(e6.fill || { color: e6.fillColor }), e6.length !== void 0 && (this.length = e6.length));
  }
};
var Ze = class {
  constructor() {
    this.default = "out";
  }
  load(e6) {
    e6 && (e6.default !== void 0 && (this.default = e6.default), this.bottom = e6.bottom ?? e6.default, this.left = e6.left ?? e6.default, this.right = e6.right ?? e6.default, this.top = e6.top ?? e6.default);
  }
};
var Qe = class {
  constructor() {
    this.acceleration = 0, this.enable = false;
  }
  load(e6) {
    e6 && (e6.acceleration !== void 0 && (this.acceleration = p(e6.acceleration)), e6.enable !== void 0 && (this.enable = e6.enable), e6.position && (this.position = x({}, e6.position)));
  }
};
var Je = class {
  constructor() {
    this.angle = new We(), this.attract = new $e(), this.center = new Ge(), this.decay = 0, this.distance = {}, this.direction = "none", this.drift = 0, this.enable = false, this.gravity = new qe(), this.path = new Ne(), this.outModes = new Ze(), this.random = false, this.size = false, this.speed = 2, this.spin = new Qe(), this.straight = false, this.trail = new Ye(), this.vibrate = false, this.warp = false;
  }
  get bounce() {
    return this.collisions;
  }
  set bounce(e6) {
    this.collisions = e6;
  }
  get collisions() {
    return false;
  }
  set collisions(e6) {
  }
  get noise() {
    return this.path;
  }
  set noise(e6) {
    this.path = e6;
  }
  get outMode() {
    return this.outModes.default;
  }
  set outMode(e6) {
    this.outModes.default = e6;
  }
  get out_mode() {
    return this.outMode;
  }
  set out_mode(e6) {
    this.outMode = e6;
  }
  load(e6) {
    if (!e6) return;
    this.angle.load(S(e6.angle) ? { value: e6.angle } : e6.angle), this.attract.load(e6.attract), this.center.load(e6.center), e6.decay !== void 0 && (this.decay = p(e6.decay)), e6.direction !== void 0 && (this.direction = e6.direction), e6.distance !== void 0 && (this.distance = S(e6.distance) ? { horizontal: e6.distance, vertical: e6.distance } : { ...e6.distance }), e6.drift !== void 0 && (this.drift = p(e6.drift)), e6.enable !== void 0 && (this.enable = e6.enable), this.gravity.load(e6.gravity);
    let t12 = e6.outModes ?? e6.outMode ?? e6.out_mode;
    t12 !== void 0 && (Y(t12) ? this.outModes.load(t12) : this.outModes.load({ default: t12 })), this.path.load(e6.path ?? e6.noise), e6.random !== void 0 && (this.random = e6.random), e6.size !== void 0 && (this.size = e6.size), e6.speed !== void 0 && (this.speed = p(e6.speed)), this.spin.load(e6.spin), e6.straight !== void 0 && (this.straight = e6.straight), this.trail.load(e6.trail), e6.vibrate !== void 0 && (this.vibrate = e6.vibrate), e6.warp !== void 0 && (this.warp = e6.warp);
  }
};
var Ke = class extends B {
  constructor() {
    super(), this.destroy = "none", this.speed = 2;
  }
  get opacity_min() {
    return this.minimumValue;
  }
  set opacity_min(e6) {
    this.minimumValue = e6;
  }
  load(e6) {
    e6?.opacity_min !== void 0 && e6.minimumValue === void 0 && (e6.minimumValue = e6.opacity_min), super.load(e6), e6 && e6.destroy !== void 0 && (this.destroy = e6.destroy);
  }
};
var je = class extends E {
  constructor() {
    super(), this.animation = new Ke(), this.random.minimumValue = 0.1, this.value = 1;
  }
  get anim() {
    return this.animation;
  }
  set anim(e6) {
    this.animation = e6;
  }
  load(e6) {
    if (!e6) return;
    super.load(e6);
    let t12 = e6.animation ?? e6.anim;
    t12 !== void 0 && (this.animation.load(t12), this.value = p(this.value, this.animation.enable ? this.animation.minimumValue : void 0));
  }
};
var et = class {
  constructor() {
    this.enable = false, this.width = 1920, this.height = 1080;
  }
  get area() {
    return this.width;
  }
  set area(e6) {
    this.width = e6;
  }
  get factor() {
    return this.height;
  }
  set factor(e6) {
    this.height = e6;
  }
  get value_area() {
    return this.area;
  }
  set value_area(e6) {
    this.area = e6;
  }
  load(e6) {
    if (!e6) return;
    e6.enable !== void 0 && (this.enable = e6.enable);
    let t12 = e6.width ?? e6.area ?? e6.value_area;
    t12 !== void 0 && (this.width = t12);
    let i8 = e6.height ?? e6.factor;
    i8 !== void 0 && (this.height = i8);
  }
};
var tt = class {
  constructor() {
    this.density = new et(), this.limit = 0, this.value = 0;
  }
  get max() {
    return this.limit;
  }
  set max(e6) {
    this.limit = e6;
  }
  load(e6) {
    if (!e6) return;
    this.density.load(e6.density);
    let t12 = e6.limit ?? e6.max;
    t12 !== void 0 && (this.limit = t12), e6.value !== void 0 && (this.value = e6.value);
  }
};
var it = class {
  constructor() {
    this.blur = 0, this.color = new k(), this.enable = false, this.offset = { x: 0, y: 0 }, this.color.value = "#000";
  }
  load(e6) {
    e6 && (e6.blur !== void 0 && (this.blur = e6.blur), this.color = k.create(this.color, e6.color), e6.enable !== void 0 && (this.enable = e6.enable), e6.offset !== void 0 && (e6.offset.x !== void 0 && (this.offset.x = e6.offset.x), e6.offset.y !== void 0 && (this.offset.y = e6.offset.y)));
  }
};
var Lt = "character";
var At = "char";
var Ht = "image";
var Bt = "images";
var Ut = "polygon";
var Wt = "star";
var st = class {
  constructor() {
    this.loadShape = (e6, t12, i8, o7) => {
      if (!e6) return;
      let r8 = R(e6), n12 = r8 ? [] : {}, a7 = r8 !== R(this.options[t12]), h9 = r8 !== R(this.options[i8]);
      a7 && (this.options[t12] = n12), h9 && o7 && (this.options[i8] = n12), this.options[t12] = x(this.options[t12] ?? n12, e6), (!this.options[i8] || o7) && (this.options[i8] = x(this.options[i8] ?? n12, e6));
    }, this.close = true, this.fill = true, this.options = {}, this.type = "circle";
  }
  get character() {
    return this.options[Lt] ?? this.options[At];
  }
  set character(e6) {
    this.options[At] = this.options[Lt] = e6;
  }
  get custom() {
    return this.options;
  }
  set custom(e6) {
    this.options = e6;
  }
  get image() {
    return this.options[Ht] ?? this.options[Bt];
  }
  set image(e6) {
    this.options[Bt] = this.options[Ht] = e6;
  }
  get images() {
    return this.image;
  }
  set images(e6) {
    this.image = e6;
  }
  get polygon() {
    return this.options[Ut] ?? this.options[Wt];
  }
  set polygon(e6) {
    this.options[Wt] = this.options[Ut] = e6;
  }
  get stroke() {
    return [];
  }
  set stroke(e6) {
  }
  load(e6) {
    if (!e6) return;
    let t12 = e6.options ?? e6.custom;
    if (t12 !== void 0) for (let i8 in t12) {
      let o7 = t12[i8];
      o7 && (this.options[i8] = x(this.options[i8] ?? {}, o7));
    }
    this.loadShape(e6.character, Lt, At, true), this.loadShape(e6.polygon, Ut, Wt, false), this.loadShape(e6.image ?? e6.images, Ht, Bt, true), e6.close !== void 0 && (this.close = e6.close), e6.fill !== void 0 && (this.fill = e6.fill), e6.type !== void 0 && (this.type = e6.type);
  }
};
var ot = class extends B {
  constructor() {
    super(), this.destroy = "none", this.speed = 5;
  }
  get size_min() {
    return this.minimumValue;
  }
  set size_min(e6) {
    this.minimumValue = e6;
  }
  load(e6) {
    e6?.size_min !== void 0 && e6.minimumValue === void 0 && (e6.minimumValue = e6.size_min), super.load(e6), e6 && e6.destroy !== void 0 && (this.destroy = e6.destroy);
  }
};
var rt = class extends E {
  constructor() {
    super(), this.animation = new ot(), this.random.minimumValue = 1, this.value = 3;
  }
  get anim() {
    return this.animation;
  }
  set anim(e6) {
    this.animation = e6;
  }
  load(e6) {
    if (super.load(e6), !e6) return;
    let t12 = e6.animation ?? e6.anim;
    t12 !== void 0 && (this.animation.load(t12), this.value = p(this.value, this.animation.enable ? this.animation.minimumValue : void 0));
  }
};
var ne = class {
  constructor() {
    this.width = 0;
  }
  load(e6) {
    e6 && (e6.color !== void 0 && (this.color = N.create(this.color, e6.color)), e6.width !== void 0 && (this.width = p(e6.width)), e6.opacity !== void 0 && (this.opacity = p(e6.opacity)));
  }
};
var nt = class extends E {
  constructor() {
    super(), this.opacityRate = 1, this.sizeRate = 1, this.velocityRate = 1;
  }
  load(e6) {
    super.load(e6), e6 && (e6.opacityRate !== void 0 && (this.opacityRate = e6.opacityRate), e6.sizeRate !== void 0 && (this.sizeRate = e6.sizeRate), e6.velocityRate !== void 0 && (this.velocityRate = e6.velocityRate));
  }
};
var at = class {
  constructor(e6, t12) {
    this._engine = e6, this._container = t12, this.bounce = new j(), this.collisions = new Ue(), this.color = new N(), this.color.value = "#fff", this.groups = {}, this.move = new Je(), this.number = new tt(), this.opacity = new je(), this.reduceDuplicates = false, this.shadow = new it(), this.shape = new st(), this.size = new rt(), this.stroke = new ne(), this.zIndex = new nt();
  }
  load(e6) {
    if (!e6) return;
    if (this.bounce.load(e6.bounce), this.color.load(N.create(this.color, e6.color)), e6.groups !== void 0) for (let o7 in e6.groups) {
      let r8 = e6.groups[o7];
      r8 !== void 0 && (this.groups[o7] = x(this.groups[o7] ?? {}, r8));
    }
    this.move.load(e6.move), this.number.load(e6.number), this.opacity.load(e6.opacity), e6.reduceDuplicates !== void 0 && (this.reduceDuplicates = e6.reduceDuplicates), this.shape.load(e6.shape), this.size.load(e6.size), this.shadow.load(e6.shadow), this.zIndex.load(e6.zIndex);
    let t12 = e6.move?.collisions ?? e6.move?.bounce;
    t12 !== void 0 && (this.collisions.enable = t12), this.collisions.load(e6.collisions), e6.interactivity !== void 0 && (this.interactivity = x({}, e6.interactivity));
    let i8 = e6.stroke ?? e6.shape?.stroke;
    if (i8 && (this.stroke = M(i8, (o7) => {
      let r8 = new ne();
      return r8.load(o7), r8;
    })), this._container) {
      let o7 = this._engine.plugins.updaters.get(this._container);
      if (o7) for (let n12 of o7) n12.loadOptions && n12.loadOptions(this, e6);
      let r8 = this._engine.plugins.interactors.get(this._container);
      if (r8) for (let n12 of r8) n12.loadParticlesOptions && n12.loadParticlesOptions(this, e6);
    }
  }
};
function $t(s82, ...e6) {
  for (let t12 of e6) s82.load(t12);
}
function ht(s82, e6, ...t12) {
  let i8 = new at(s82, e6);
  return $t(i8, ...t12), i8;
}
var lt = class {
  constructor(e6, t12) {
    this._findDefaultTheme = (i8) => this.themes.find((o7) => o7.default.value && o7.default.mode === i8) ?? this.themes.find((o7) => o7.default.value && o7.default.mode === "any"), this._importPreset = (i8) => {
      this.load(this._engine.plugins.getPreset(i8));
    }, this._engine = e6, this._container = t12, this.autoPlay = true, this.background = new ze(), this.backgroundMask = new Pe(), this.defaultThemes = {}, this.delay = 0, this.fullScreen = new Re(), this.detectRetina = true, this.duration = 0, this.fpsLimit = 120, this.interactivity = new J(e6, t12), this.manualParticles = [], this.particles = ht(this._engine, this._container), this.pauseOnBlur = true, this.pauseOnOutsideViewport = true, this.responsive = [], this.smooth = false, this.style = {}, this.themes = [], this.zLayers = 100;
  }
  get backgroundMode() {
    return this.fullScreen;
  }
  set backgroundMode(e6) {
    this.fullScreen.load(e6);
  }
  get fps_limit() {
    return this.fpsLimit;
  }
  set fps_limit(e6) {
    this.fpsLimit = e6;
  }
  get retina_detect() {
    return this.detectRetina;
  }
  set retina_detect(e6) {
    this.detectRetina = e6;
  }
  load(e6) {
    if (!e6) return;
    e6.preset !== void 0 && M(e6.preset, (n12) => this._importPreset(n12)), e6.autoPlay !== void 0 && (this.autoPlay = e6.autoPlay), e6.delay !== void 0 && (this.delay = p(e6.delay));
    let t12 = e6.detectRetina ?? e6.retina_detect;
    t12 !== void 0 && (this.detectRetina = t12), e6.duration !== void 0 && (this.duration = p(e6.duration));
    let i8 = e6.fpsLimit ?? e6.fps_limit;
    i8 !== void 0 && (this.fpsLimit = i8), e6.pauseOnBlur !== void 0 && (this.pauseOnBlur = e6.pauseOnBlur), e6.pauseOnOutsideViewport !== void 0 && (this.pauseOnOutsideViewport = e6.pauseOnOutsideViewport), e6.zLayers !== void 0 && (this.zLayers = e6.zLayers), this.background.load(e6.background);
    let o7 = e6.fullScreen ?? e6.backgroundMode;
    O(o7) ? this.fullScreen.enable = o7 : this.fullScreen.load(o7), this.backgroundMask.load(e6.backgroundMask), this.interactivity.load(e6.interactivity), e6.manualParticles && (this.manualParticles = e6.manualParticles.map((n12) => {
      let a7 = new Ie();
      return a7.load(n12), a7;
    })), this.particles.load(e6.particles), this.style = x(this.style, e6.style), this._engine.plugins.loadOptions(this, e6), e6.smooth !== void 0 && (this.smooth = e6.smooth);
    let r8 = this._engine.plugins.interactors.get(this._container);
    if (r8) for (let n12 of r8) n12.loadOptions && n12.loadOptions(this, e6);
    if (e6.responsive !== void 0) for (let n12 of e6.responsive) {
      let a7 = new De();
      a7.load(n12), this.responsive.push(a7);
    }
    if (this.responsive.sort((n12, a7) => n12.maxWidth - a7.maxWidth), e6.themes !== void 0) for (let n12 of e6.themes) {
      let a7 = this.themes.find((h9) => h9.name === n12.name);
      if (a7) a7.load(n12);
      else {
        let h9 = new Fe();
        h9.load(n12), this.themes.push(h9);
      }
    }
    this.defaultThemes.dark = this._findDefaultTheme("dark")?.name, this.defaultThemes.light = this._findDefaultTheme("light")?.name;
  }
  setResponsive(e6, t12, i8) {
    this.load(i8);
    let o7 = this.responsive.find((r8) => r8.mode === "screen" && screen ? r8.maxWidth > screen.availWidth : r8.maxWidth * t12 > e6);
    return this.load(o7?.options), o7?.maxWidth;
  }
  setTheme(e6) {
    if (e6) {
      let t12 = this.themes.find((i8) => i8.name === e6);
      t12 && this.load(t12.options);
    } else {
      let t12 = fe("(prefers-color-scheme: dark)"), i8 = t12 && t12.matches, o7 = this._findDefaultTheme(i8 ? "dark" : "light");
      o7 && this.load(o7.options);
    }
  }
};
var ct = class {
  constructor(e6, t12) {
    this.container = t12, this._engine = e6, this._interactors = e6.plugins.getInteractors(this.container, true), this._externalInteractors = [], this._particleInteractors = [];
  }
  async externalInteract(e6) {
    for (let t12 of this._externalInteractors) t12.isEnabled() && await t12.interact(e6);
  }
  handleClickMode(e6) {
    for (let t12 of this._externalInteractors) t12.handleClickMode && t12.handleClickMode(e6);
  }
  init() {
    this._externalInteractors = [], this._particleInteractors = [];
    for (let e6 of this._interactors) {
      switch (e6.type) {
        case "external":
          this._externalInteractors.push(e6);
          break;
        case "particles":
          this._particleInteractors.push(e6);
          break;
      }
      e6.init();
    }
  }
  async particlesInteract(e6, t12) {
    for (let i8 of this._externalInteractors) i8.clear(e6, t12);
    for (let i8 of this._particleInteractors) i8.isEnabled(e6) && await i8.interact(e6, t12);
  }
  async reset(e6) {
    for (let t12 of this._externalInteractors) t12.isEnabled() && t12.reset(e6);
    for (let t12 of this._particleInteractors) t12.isEnabled(e6) && t12.reset(e6);
  }
};
var bi = (s82) => {
  if (!pe(s82.outMode, s82.checkModes)) return;
  let e6 = s82.radius * 2;
  s82.coord > s82.maxCoord - e6 ? s82.setCb(-s82.radius) : s82.coord < e6 && s82.setCb(s82.radius);
};
var ut = class {
  constructor(e6, t12, i8, o7, r8, n12) {
    this.container = i8, this._calcPosition = (a7, h9, l16, c14 = 0) => {
      for (let [, C13] of a7.plugins) {
        let w9 = C13.particlePosition !== void 0 ? C13.particlePosition(h9, this) : void 0;
        if (w9) return W.create(w9.x, w9.y, l16);
      }
      let u11 = a7.canvas.size, f11 = kt({ size: u11, position: h9 }), m11 = W.create(f11.x, f11.y, l16), y15 = this.getRadius(), g14 = this.options.move.outModes, _8 = (C13) => {
        bi({ outMode: C13, checkModes: ["bounce", "bounce-horizontal"], coord: m11.x, maxCoord: a7.canvas.size.width, setCb: (w9) => m11.x += w9, radius: y15 });
      }, b14 = (C13) => {
        bi({ outMode: C13, checkModes: ["bounce", "bounce-vertical"], coord: m11.y, maxCoord: a7.canvas.size.height, setCb: (w9) => m11.y += w9, radius: y15 });
      };
      return _8(g14.left ?? g14.default), _8(g14.right ?? g14.default), b14(g14.top ?? g14.default), b14(g14.bottom ?? g14.default), this._checkOverlap(m11, c14) ? this._calcPosition(a7, void 0, l16, c14 + 1) : m11;
    }, this._calculateVelocity = () => {
      let a7 = ii(this.direction), h9 = a7.copy(), l16 = this.options.move;
      if (l16.direction === "inside" || l16.direction === "outside") return h9;
      let c14 = Math.PI / 180 * d(l16.angle.value), u11 = Math.PI / 180 * d(l16.angle.offset), f11 = { left: u11 - c14 / 2, right: u11 + c14 / 2 };
      return l16.straight || (h9.angle += L(p(f11.left, f11.right))), l16.random && typeof l16.speed == "number" && (h9.length *= z()), h9;
    }, this._checkOverlap = (a7, h9 = 0) => {
      let l16 = this.options.collisions, c14 = this.getRadius();
      if (!l16.enable) return false;
      let u11 = l16.overlap;
      if (u11.enable) return false;
      let f11 = u11.retries;
      if (f11 >= 0 && h9 > f11) throw new Error(`${I} particle is overlapping and can't be placed`);
      return !!this.container.particles.find((m11) => X(a7, m11.position) < c14 + m11.getRadius());
    }, this._getRollColor = (a7) => {
      if (!a7 || !this.roll || !this.backColor && !this.roll.alter) return a7;
      let h9 = this.roll.horizontal && this.roll.vertical ? 2 : 1, l16 = this.roll.horizontal ? Math.PI / 2 : 0;
      return Math.floor(((this.roll.angle ?? 0) + l16) / (Math.PI / h9)) % 2 ? this.backColor ? this.backColor : this.roll.alter ? yi(a7, this.roll.alter.type, this.roll.alter.value) : a7 : a7;
    }, this._initPosition = (a7) => {
      let h9 = this.container, l16 = d(this.options.zIndex.value);
      this.position = this._calcPosition(h9, a7, Pt(l16, 0, h9.zLayers)), this.initialPosition = this.position.copy();
      let c14 = h9.canvas.size;
      switch (this.moveCenter = { ...me(this.options.move.center, c14), radius: this.options.move.center.radius ?? 0, mode: this.options.move.center.mode ?? "percent" }, this.direction = ti(this.options.move.direction, this.position, this.moveCenter), this.options.move.direction) {
        case "inside":
          this.outType = "inside";
          break;
        case "outside":
          this.outType = "outside";
          break;
      }
      this.offset = F.origin;
    }, this._loadShapeData = (a7, h9) => {
      let l16 = a7.options[this.shape];
      if (l16) return x({ close: a7.close, fill: a7.fill }, G(l16, this.id, h9));
    }, this._engine = e6, this.init(t12, o7, r8, n12);
  }
  destroy(e6) {
    if (this.unbreakable || this.destroyed) return;
    this.destroyed = true, this.bubble.inRange = false, this.slow.inRange = false;
    let t12 = this.container, i8 = this.pathGenerator;
    for (let [, o7] of t12.plugins) o7.particleDestroyed && o7.particleDestroyed(this, e6);
    for (let o7 of t12.particles.updaters) o7.particleDestroyed && o7.particleDestroyed(this, e6);
    i8 && i8.reset(this);
  }
  draw(e6) {
    let t12 = this.container;
    for (let [, i8] of t12.plugins) t12.canvas.drawParticlePlugin(i8, this, e6);
    t12.canvas.drawParticle(this, e6);
  }
  getFillColor() {
    return this._getRollColor(this.bubble.color ?? Vt(this.color));
  }
  getMass() {
    return this.getRadius() ** 2 * Math.PI / 2;
  }
  getPosition() {
    return { x: this.position.x + this.offset.x, y: this.position.y + this.offset.y, z: this.position.z };
  }
  getRadius() {
    return this.bubble.radius ?? this.size.value;
  }
  getStrokeColor() {
    return this._getRollColor(this.bubble.color ?? Vt(this.strokeColor));
  }
  init(e6, t12, i8, o7) {
    let r8 = this.container, n12 = this._engine;
    this.id = e6, this.group = o7, this.fill = true, this.pathRotation = false, this.close = true, this.lastPathTime = 0, this.destroyed = false, this.unbreakable = false, this.rotation = 0, this.misplaced = false, this.retina = { maxDistance: {} }, this.outType = "normal", this.ignoresResizeRatio = true;
    let a7 = r8.retina.pixelRatio, h9 = r8.actualOptions, l16 = ht(this._engine, r8, h9.particles), c14 = l16.shape.type, { reduceDuplicates: u11 } = l16;
    this.shape = G(c14, this.id, u11);
    let f11 = l16.shape;
    if (i8 && i8.shape && i8.shape.type) {
      let w9 = i8.shape.type, qt2 = G(w9, this.id, u11);
      qt2 && (this.shape = qt2, f11.load(i8.shape));
    }
    this.shapeData = this._loadShapeData(f11, u11), l16.load(i8);
    let m11 = this.shapeData;
    m11 && l16.load(m11.particles);
    let y15 = new J(n12, r8);
    y15.load(r8.actualOptions.interactivity), y15.load(l16.interactivity), this.interactivity = y15, this.fill = m11?.fill ?? l16.shape.fill, this.close = m11?.close ?? l16.shape.close, this.options = l16;
    let g14 = this.options.move.path;
    this.pathDelay = $(g14.delay) * 1e3, g14.generator && (this.pathGenerator = this._engine.plugins.getPathGenerator(g14.generator), this.pathGenerator && r8.addPath(g14.generator, this.pathGenerator) && this.pathGenerator.init(r8)), r8.retina.initParticle(this), this.size = ai(this.options.size, a7), this.bubble = { inRange: false }, this.slow = { inRange: false, factor: 1 }, this._initPosition(t12), this.initialVelocity = this._calculateVelocity(), this.velocity = this.initialVelocity.copy(), this.moveDecay = 1 - d(this.options.move.decay);
    let _8 = r8.particles;
    _8.needsSort = _8.needsSort || _8.lastZIndex < this.position.z, _8.lastZIndex = this.position.z, this.zIndexFactor = this.position.z / r8.zLayers, this.sides = 24;
    let b14 = r8.drawers.get(this.shape);
    b14 || (b14 = this._engine.plugins.getShapeDrawer(this.shape), b14 && r8.drawers.set(this.shape, b14)), b14 && b14.loadShape && b14.loadShape(this);
    let C13 = b14?.getSidesCount;
    C13 && (this.sides = C13(this)), this.spawning = false, this.shadowColor = V(this.options.shadow.color);
    for (let w9 of r8.particles.updaters) w9.init(this);
    for (let w9 of r8.particles.movers) w9.init && w9.init(this);
    b14 && b14.particleInit && b14.particleInit(r8, this);
    for (let [, w9] of r8.plugins) w9.particleCreated && w9.particleCreated(this);
  }
  isInsideCanvas() {
    let e6 = this.getRadius(), t12 = this.container.canvas.size, i8 = this.position;
    return i8.x >= -e6 && i8.y >= -e6 && i8.y <= t12.height + e6 && i8.x <= t12.width + e6;
  }
  isVisible() {
    return !this.destroyed && !this.spawning && this.isInsideCanvas();
  }
  reset() {
    for (let e6 of this.container.particles.updaters) e6.reset && e6.reset(this);
  }
};
var ft = class {
  constructor(e6, t12) {
    this.position = e6, this.particle = t12;
  }
};
var ee = class {
  constructor(e6, t12) {
    this.position = { x: e6, y: t12 };
  }
};
var H = class s5 extends ee {
  constructor(e6, t12, i8, o7) {
    super(e6, t12), this.size = { height: o7, width: i8 };
  }
  contains(e6) {
    let t12 = this.size.width, i8 = this.size.height, o7 = this.position;
    return e6.x >= o7.x && e6.x <= o7.x + t12 && e6.y >= o7.y && e6.y <= o7.y + i8;
  }
  intersects(e6) {
    e6 instanceof te && e6.intersects(this);
    let t12 = this.size.width, i8 = this.size.height, o7 = this.position, r8 = e6.position, n12 = e6 instanceof s5 ? e6.size : { width: 0, height: 0 }, a7 = n12.width, h9 = n12.height;
    return r8.x < o7.x + t12 && r8.x + a7 > o7.x && r8.y < o7.y + i8 && r8.y + h9 > o7.y;
  }
};
var te = class s6 extends ee {
  constructor(e6, t12, i8) {
    super(e6, t12), this.radius = i8;
  }
  contains(e6) {
    return X(e6, this.position) <= this.radius;
  }
  intersects(e6) {
    let t12 = this.position, i8 = e6.position, o7 = { x: Math.abs(i8.x - t12.x), y: Math.abs(i8.y - t12.y) }, r8 = this.radius;
    if (e6 instanceof s6) {
      let n12 = r8 + e6.radius, a7 = Math.sqrt(o7.x ** 2 + o7.y ** 2);
      return n12 > a7;
    } else if (e6 instanceof H) {
      let { width: n12, height: a7 } = e6.size;
      return Math.pow(o7.x - n12, 2) + Math.pow(o7.y - a7, 2) <= r8 ** 2 || o7.x <= r8 + n12 && o7.y <= r8 + a7 || o7.x <= n12 || o7.y <= a7;
    }
    return false;
  }
};
var ae = class s7 {
  constructor(e6, t12) {
    this.rectangle = e6, this.capacity = t12, this._subdivide = () => {
      let { x: i8, y: o7 } = this.rectangle.position, { width: r8, height: n12 } = this.rectangle.size, { capacity: a7 } = this;
      for (let h9 = 0; h9 < 4; h9++) this._subs.push(new s7(new H(i8 + r8 / 2 * (h9 % 2), o7 + n12 / 2 * (Math.round(h9 / 2) - h9 % 2), r8 / 2, n12 / 2), a7));
      this._divided = true;
    }, this._points = [], this._divided = false, this._subs = [];
  }
  insert(e6) {
    return this.rectangle.contains(e6.position) ? this._points.length < this.capacity ? (this._points.push(e6), true) : (this._divided || this._subdivide(), this._subs.some((t12) => t12.insert(e6))) : false;
  }
  query(e6, t12, i8) {
    let o7 = i8 || [];
    if (!e6.intersects(this.rectangle)) return [];
    for (let r8 of this._points) !e6.contains(r8.position) && X(e6.position, r8.position) > r8.particle.getRadius() && (!t12 || t12(r8.particle)) || o7.push(r8.particle);
    if (this._divided) for (let r8 of this._subs) r8.query(e6, t12, o7);
    return o7;
  }
  queryCircle(e6, t12, i8) {
    return this.query(new te(e6.x, e6.y, t12), i8);
  }
  queryRectangle(e6, t12, i8) {
    return this.query(new H(e6.x, e6.y, t12.width, t12.height), i8);
  }
};
var _i = 4;
var wi = (s82) => new H(-s82.width / 4, -s82.height / 4, s82.width * 3 / 2, s82.height * 3 / 2);
var pt = class {
  constructor(e6, t12) {
    this._applyDensity = (o7, r8, n12) => {
      if (!o7.number.density?.enable) return;
      let a7 = o7.number, h9 = this._initDensityFactor(a7.density), l16 = a7.value, c14 = a7.limit > 0 ? a7.limit : l16, u11 = Math.min(l16, c14) * h9 + r8, f11 = Math.min(this.count, this.filter((m11) => m11.group === n12).length);
      this.limit = a7.limit * h9, f11 < u11 ? this.push(Math.abs(u11 - f11), void 0, o7, n12) : f11 > u11 && this.removeQuantity(f11 - u11, n12);
    }, this._initDensityFactor = (o7) => {
      let r8 = this._container;
      if (!r8.canvas.element || !o7.enable) return 1;
      let n12 = r8.canvas.element, a7 = r8.retina.pixelRatio;
      return n12.width * n12.height / (o7.factor * a7 ** 2 * o7.area);
    }, this._pushParticle = (o7, r8, n12, a7) => {
      try {
        let h9 = this.pool.pop();
        h9 ? h9.init(this._nextId, o7, r8, n12) : h9 = new ut(this._engine, this._nextId, this._container, o7, r8, n12);
        let l16 = true;
        return a7 && (l16 = a7(h9)), l16 ? (this._array.push(h9), this._zArray.push(h9), this._nextId++, this._engine.dispatchEvent("particleAdded", { container: this._container, data: { particle: h9 } }), h9) : void 0;
      } catch (h9) {
        A().warning(`${I} adding particle: ${h9}`);
        return;
      }
    }, this._removeParticle = (o7, r8, n12) => {
      let a7 = this._array[o7];
      if (!a7 || a7.group !== r8) return false;
      a7.destroy(n12);
      let h9 = this._zArray.indexOf(a7);
      return this._array.splice(o7, 1), this._zArray.splice(h9, 1), this.pool.push(a7), this._engine.dispatchEvent("particleRemoved", { container: this._container, data: { particle: a7 } }), true;
    }, this._engine = e6, this._container = t12, this._nextId = 0, this._array = [], this._zArray = [], this.pool = [], this.limit = 0, this.needsSort = false, this.lastZIndex = 0, this._interactionManager = new ct(e6, t12);
    let i8 = t12.canvas.size;
    this.quadTree = new ae(wi(i8), _i), this.movers = this._engine.plugins.getMovers(t12, true), this.updaters = this._engine.plugins.getUpdaters(t12, true);
  }
  get count() {
    return this._array.length;
  }
  addManualParticles() {
    let e6 = this._container, t12 = e6.actualOptions;
    for (let i8 of t12.manualParticles) this.addParticle(i8.position ? me(i8.position, e6.canvas.size) : void 0, i8.options);
  }
  addParticle(e6, t12, i8, o7) {
    let r8 = this._container, n12 = r8.actualOptions, a7 = n12.particles.number.limit;
    if (a7 > 0) {
      let h9 = this.count + 1 - a7;
      h9 > 0 && this.removeQuantity(h9);
    }
    return this._pushParticle(e6, t12, i8, o7);
  }
  clear() {
    this._array = [], this._zArray = [];
  }
  destroy() {
    this._array = [], this._zArray = [], this.movers = [], this.updaters = [];
  }
  async draw(e6) {
    let t12 = this._container;
    t12.canvas.clear(), await this.update(e6);
    for (let [, i8] of t12.plugins) t12.canvas.drawPlugin(i8, e6);
    for (let i8 of this._zArray) i8.draw(e6);
  }
  filter(e6) {
    return this._array.filter(e6);
  }
  find(e6) {
    return this._array.find(e6);
  }
  handleClickMode(e6) {
    this._interactionManager.handleClickMode(e6);
  }
  init() {
    let e6 = this._container, t12 = e6.actualOptions;
    this.lastZIndex = 0, this.needsSort = false;
    let i8 = false;
    this.updaters = this._engine.plugins.getUpdaters(e6, true), this._interactionManager.init();
    for (let [, o7] of e6.plugins) if (o7.particlesInitialization !== void 0 && (i8 = o7.particlesInitialization()), i8) break;
    this._interactionManager.init();
    for (let [, o7] of e6.pathGenerators) o7.init(e6);
    if (this.addManualParticles(), !i8) {
      for (let o7 in t12.particles.groups) {
        let r8 = t12.particles.groups[o7];
        for (let n12 = this.count, a7 = 0; a7 < r8.number?.value && n12 < t12.particles.number.value; n12++, a7++) this.addParticle(void 0, r8, o7);
      }
      for (let o7 = this.count; o7 < t12.particles.number.value; o7++) this.addParticle();
    }
  }
  push(e6, t12, i8, o7) {
    this.pushing = true;
    for (let r8 = 0; r8 < e6; r8++) this.addParticle(t12?.position, i8, o7);
    this.pushing = false;
  }
  async redraw() {
    this.clear(), this.init(), await this.draw({ value: 0, factor: 0 });
  }
  remove(e6, t12, i8) {
    this.removeAt(this._array.indexOf(e6), void 0, t12, i8);
  }
  removeAt(e6, t12 = 1, i8, o7) {
    if (e6 < 0 || e6 > this.count) return;
    let r8 = 0;
    for (let n12 = e6; r8 < t12 && n12 < this.count; n12++) this._removeParticle(n12--, i8, o7) && r8++;
  }
  removeQuantity(e6, t12) {
    this.removeAt(0, e6, t12);
  }
  setDensity() {
    let e6 = this._container.actualOptions, t12 = e6.particles.groups;
    for (let i8 in t12) this._applyDensity(t12[i8], 0, i8);
    this._applyDensity(e6.particles, e6.manualParticles.length);
  }
  async update(e6) {
    let t12 = this._container, i8 = /* @__PURE__ */ new Set();
    this.quadTree = new ae(wi(t12.canvas.size), _i);
    for (let [, o7] of t12.pathGenerators) o7.update();
    for (let [, o7] of t12.plugins) o7.update && o7.update(e6);
    for (let o7 of this._array) {
      let r8 = t12.canvas.resizeFactor;
      r8 && !o7.ignoresResizeRatio && (o7.position.x *= r8.width, o7.position.y *= r8.height, o7.initialPosition.x *= r8.width, o7.initialPosition.y *= r8.height), o7.ignoresResizeRatio = false, await this._interactionManager.reset(o7);
      for (let [, n12] of this._container.plugins) {
        if (o7.destroyed) break;
        n12.particleUpdate && n12.particleUpdate(o7, e6);
      }
      for (let n12 of this.movers) n12.isEnabled(o7) && n12.move(o7, e6);
      if (o7.destroyed) {
        i8.add(o7);
        continue;
      }
      this.quadTree.insert(new ft(o7.getPosition(), o7));
    }
    if (i8.size) {
      let o7 = (r8) => !i8.has(r8);
      this._array = this.filter(o7), this._zArray = this._zArray.filter(o7), this.pool.push(...i8);
    }
    await this._interactionManager.externalInteract(e6);
    for (let o7 of this._array) {
      for (let r8 of this.updaters) r8.update(o7, e6);
      !o7.destroyed && !o7.spawning && await this._interactionManager.particlesInteract(o7, e6);
    }
    if (delete t12.canvas.resizeFactor, this.needsSort) {
      let o7 = this._zArray;
      o7.sort((r8, n12) => n12.position.z - r8.position.z || r8.id - n12.id), this.lastZIndex = o7[o7.length - 1].position.z, this.needsSort = false;
    }
  }
};
var dt = class {
  constructor(e6) {
    this.container = e6, this.pixelRatio = 1, this.reduceFactor = 1;
  }
  init() {
    let e6 = this.container, t12 = e6.actualOptions;
    this.pixelRatio = !t12.detectRetina || Z() ? 1 : window.devicePixelRatio, this.reduceFactor = 1;
    let i8 = this.pixelRatio;
    if (e6.canvas.element) {
      let n12 = e6.canvas.element;
      e6.canvas.size.width = n12.offsetWidth * i8, e6.canvas.size.height = n12.offsetHeight * i8;
    }
    let o7 = t12.particles, r8 = o7.move;
    this.attractDistance = d(r8.attract.distance) * i8, this.maxSpeed = d(r8.gravity.maxSpeed) * i8, this.sizeAnimationSpeed = d(o7.size.animation.speed) * i8;
  }
  initParticle(e6) {
    let t12 = e6.options, i8 = this.pixelRatio, o7 = t12.move, r8 = o7.distance, n12 = e6.retina;
    n12.attractDistance = d(o7.attract.distance) * i8, n12.moveDrift = d(o7.drift) * i8, n12.moveSpeed = d(o7.speed) * i8, n12.sizeAnimationSpeed = d(t12.size.animation.speed) * i8;
    let a7 = n12.maxDistance;
    a7.horizontal = r8.horizontal !== void 0 ? r8.horizontal * i8 : void 0, a7.vertical = r8.vertical !== void 0 ? r8.vertical * i8 : void 0, n12.maxSpeed = d(o7.gravity.maxSpeed) * i8;
  }
};
function v(s82) {
  return s82 && !s82.destroyed;
}
function Ai(s82, e6 = 60, t12 = false) {
  return { value: s82, factor: t12 ? 60 / e6 : 60 * s82 / 1e3 };
}
function ie(s82, e6, ...t12) {
  let i8 = new lt(s82, e6);
  return $t(i8, ...t12), i8;
}
var Hi = "default";
var zi = { generate: (s82) => s82.velocity, init: () => {
}, update: () => {
}, reset: () => {
} };
var mt = class {
  constructor(e6, t12, i8) {
    this.id = t12, this._intersectionManager = (o7) => {
      if (!(!v(this) || !this.actualOptions.pauseOnOutsideViewport)) for (let r8 of o7) r8.target === this.interactivity.element && (r8.isIntersecting ? this.play : this.pause)();
    }, this._nextFrame = async (o7) => {
      try {
        if (!this.smooth && this.lastFrameTime !== void 0 && o7 < this.lastFrameTime + 1e3 / this.fpsLimit) {
          this.draw(false);
          return;
        }
        this.lastFrameTime ??= o7;
        let r8 = Ai(o7 - this.lastFrameTime, this.fpsLimit, this.smooth);
        if (this.addLifeTime(r8.value), this.lastFrameTime = o7, r8.value > 1e3) {
          this.draw(false);
          return;
        }
        if (await this.particles.draw(r8), !this.alive()) {
          this.destroy();
          return;
        }
        this.getAnimationStatus() && this.draw(false);
      } catch (r8) {
        A().error(`${I} in animation loop`, r8);
      }
    }, this._engine = e6, this.fpsLimit = 120, this.smooth = false, this._delay = 0, this._duration = 0, this._lifeTime = 0, this._firstStart = true, this.started = false, this.destroyed = false, this._paused = true, this.lastFrameTime = 0, this.zLayers = 100, this.pageHidden = false, this._sourceOptions = i8, this._initialSourceOptions = i8, this.retina = new dt(this), this.canvas = new _e(this), this.particles = new pt(this._engine, this), this.pathGenerators = /* @__PURE__ */ new Map(), this.interactivity = { mouse: { clicking: false, inside: false } }, this.plugins = /* @__PURE__ */ new Map(), this.drawers = /* @__PURE__ */ new Map(), this._options = ie(this._engine, this), this.actualOptions = ie(this._engine, this), this._eventListeners = new we(this), typeof IntersectionObserver < "u" && IntersectionObserver && (this._intersectionObserver = new IntersectionObserver((o7) => this._intersectionManager(o7))), this._engine.dispatchEvent("containerBuilt", { container: this });
  }
  get options() {
    return this._options;
  }
  get sourceOptions() {
    return this._sourceOptions;
  }
  addClickHandler(e6) {
    if (!v(this)) return;
    let t12 = this.interactivity.element;
    if (!t12) return;
    let i8 = (u11, f11, m11) => {
      if (!v(this)) return;
      let y15 = this.retina.pixelRatio, g14 = { x: f11.x * y15, y: f11.y * y15 }, _8 = this.particles.quadTree.queryCircle(g14, m11 * y15);
      e6(u11, _8);
    }, o7 = (u11) => {
      if (!v(this)) return;
      let f11 = u11, m11 = { x: f11.offsetX || f11.clientX, y: f11.offsetY || f11.clientY };
      i8(u11, m11, 1);
    }, r8 = () => {
      v(this) && (l16 = true, c14 = false);
    }, n12 = () => {
      v(this) && (c14 = true);
    }, a7 = (u11) => {
      if (v(this)) {
        if (l16 && !c14) {
          let f11 = u11, m11 = f11.touches[f11.touches.length - 1];
          if (!m11 && (m11 = f11.changedTouches[f11.changedTouches.length - 1], !m11)) return;
          let y15 = this.canvas.element, g14 = y15 ? y15.getBoundingClientRect() : void 0, _8 = { x: m11.clientX - (g14 ? g14.left : 0), y: m11.clientY - (g14 ? g14.top : 0) };
          i8(u11, _8, Math.max(m11.radiusX, m11.radiusY));
        }
        l16 = false, c14 = false;
      }
    }, h9 = () => {
      v(this) && (l16 = false, c14 = false);
    }, l16 = false, c14 = false;
    t12.addEventListener("click", o7), t12.addEventListener("touchstart", r8), t12.addEventListener("touchmove", n12), t12.addEventListener("touchend", a7), t12.addEventListener("touchcancel", h9);
  }
  addLifeTime(e6) {
    this._lifeTime += e6;
  }
  addPath(e6, t12, i8 = false) {
    return !v(this) || !i8 && this.pathGenerators.has(e6) ? false : (this.pathGenerators.set(e6, t12 ?? zi), true);
  }
  alive() {
    return !this._duration || this._lifeTime <= this._duration;
  }
  destroy() {
    if (!v(this)) return;
    this.stop(), this.particles.destroy(), this.canvas.destroy();
    for (let [, i8] of this.drawers) i8.destroy && i8.destroy(this);
    for (let i8 of this.drawers.keys()) this.drawers.delete(i8);
    this._engine.plugins.destroy(this), this.destroyed = true;
    let e6 = this._engine.dom(), t12 = e6.findIndex((i8) => i8 === this);
    t12 >= 0 && e6.splice(t12, 1), this._engine.dispatchEvent("containerDestroyed", { container: this });
  }
  draw(e6) {
    if (!v(this)) return;
    let t12 = e6;
    this._drawAnimationFrame = requestAnimationFrame(async (i8) => {
      t12 && (this.lastFrameTime = void 0, t12 = false), await this._nextFrame(i8);
    });
  }
  async export(e6, t12 = {}) {
    for (let [, i8] of this.plugins) {
      if (!i8.export) continue;
      let o7 = await i8.export(e6, t12);
      if (o7.supported) return o7.blob;
    }
    A().error(`${I} - Export plugin with type ${e6} not found`);
  }
  getAnimationStatus() {
    return !this._paused && !this.pageHidden && v(this);
  }
  handleClickMode(e6) {
    if (v(this)) {
      this.particles.handleClickMode(e6);
      for (let [, t12] of this.plugins) t12.handleClickMode && t12.handleClickMode(e6);
    }
  }
  async init() {
    if (!v(this)) return;
    let e6 = this._engine.plugins.getSupportedShapes();
    for (let i8 of e6) {
      let o7 = this._engine.plugins.getShapeDrawer(i8);
      o7 && this.drawers.set(i8, o7);
    }
    this._options = ie(this._engine, this, this._initialSourceOptions, this.sourceOptions), this.actualOptions = ie(this._engine, this, this._options);
    let t12 = this._engine.plugins.getAvailablePlugins(this);
    for (let [i8, o7] of t12) this.plugins.set(i8, o7);
    this.retina.init(), await this.canvas.init(), this.updateActualOptions(), this.canvas.initBackground(), this.canvas.resize(), this.zLayers = this.actualOptions.zLayers, this._duration = d(this.actualOptions.duration) * 1e3, this._delay = d(this.actualOptions.delay) * 1e3, this._lifeTime = 0, this.fpsLimit = this.actualOptions.fpsLimit > 0 ? this.actualOptions.fpsLimit : 120, this.smooth = this.actualOptions.smooth;
    for (let [, i8] of this.drawers) i8.init && await i8.init(this);
    for (let [, i8] of this.plugins) i8.init && await i8.init();
    this._engine.dispatchEvent("containerInit", { container: this }), this.particles.init(), this.particles.setDensity();
    for (let [, i8] of this.plugins) i8.particlesSetup && i8.particlesSetup();
    this._engine.dispatchEvent("particlesSetup", { container: this });
  }
  async loadTheme(e6) {
    v(this) && (this._currentTheme = e6, await this.refresh());
  }
  pause() {
    if (v(this) && (this._drawAnimationFrame !== void 0 && (cancelAnimationFrame(this._drawAnimationFrame), delete this._drawAnimationFrame), !this._paused)) {
      for (let [, e6] of this.plugins) e6.pause && e6.pause();
      this.pageHidden || (this._paused = true), this._engine.dispatchEvent("containerPaused", { container: this });
    }
  }
  play(e6) {
    if (!v(this)) return;
    let t12 = this._paused || e6;
    if (this._firstStart && !this.actualOptions.autoPlay) {
      this._firstStart = false;
      return;
    }
    if (this._paused && (this._paused = false), t12) for (let [, i8] of this.plugins) i8.play && i8.play();
    this._engine.dispatchEvent("containerPlay", { container: this }), this.draw(t12 || false);
  }
  async refresh() {
    if (v(this)) return this.stop(), this.start();
  }
  async reset() {
    if (v(this)) return this._initialSourceOptions = void 0, this._options = ie(this._engine, this), this.actualOptions = ie(this._engine, this, this._options), this.refresh();
  }
  setNoise(e6, t12, i8) {
    v(this) && this.setPath(e6, t12, i8);
  }
  setPath(e6, t12, i8) {
    if (!e6 || !v(this)) return;
    let o7 = { ...zi };
    if (ge(e6)) o7.generate = e6, t12 && (o7.init = t12), i8 && (o7.update = i8);
    else {
      let r8 = o7;
      o7.generate = e6.generate || r8.generate, o7.init = e6.init || r8.init, o7.update = e6.update || r8.update;
    }
    this.addPath(Hi, o7, true);
  }
  async start() {
    !v(this) || this.started || (await this.init(), this.started = true, await new Promise((e6) => {
      this._delayTimeout = setTimeout(async () => {
        this._eventListeners.addListeners(), this.interactivity.element instanceof HTMLElement && this._intersectionObserver && this._intersectionObserver.observe(this.interactivity.element);
        for (let [, t12] of this.plugins) t12.start && await t12.start();
        this._engine.dispatchEvent("containerStarted", { container: this }), this.play(), e6();
      }, this._delay);
    }));
  }
  stop() {
    if (!(!v(this) || !this.started)) {
      this._delayTimeout && (clearTimeout(this._delayTimeout), delete this._delayTimeout), this._firstStart = true, this.started = false, this._eventListeners.removeListeners(), this.pause(), this.particles.clear(), this.canvas.stop(), this.interactivity.element instanceof HTMLElement && this._intersectionObserver && this._intersectionObserver.unobserve(this.interactivity.element);
      for (let [, e6] of this.plugins) e6.stop && e6.stop();
      for (let e6 of this.plugins.keys()) this.plugins.delete(e6);
      this._sourceOptions = this._options, this._engine.dispatchEvent("containerStopped", { container: this });
    }
  }
  updateActualOptions() {
    this.actualOptions.responsive = [];
    let e6 = this.actualOptions.setResponsive(this.canvas.size.width, this.retina.pixelRatio, this._options);
    return this.actualOptions.setTheme(this._currentTheme), this.responsiveMaxWidth === e6 ? false : (this.responsiveMaxWidth = e6, true);
  }
};
var gt = class {
  constructor() {
    this._listeners = /* @__PURE__ */ new Map();
  }
  addEventListener(e6, t12) {
    this.removeEventListener(e6, t12);
    let i8 = this._listeners.get(e6);
    i8 || (i8 = [], this._listeners.set(e6, i8)), i8.push(t12);
  }
  dispatchEvent(e6, t12) {
    let i8 = this._listeners.get(e6);
    i8 && i8.forEach((o7) => o7(t12));
  }
  hasEventListener(e6) {
    return !!this._listeners.get(e6);
  }
  removeAllEventListeners(e6) {
    e6 ? this._listeners.delete(e6) : this._listeners = /* @__PURE__ */ new Map();
  }
  removeEventListener(e6, t12) {
    let i8 = this._listeners.get(e6);
    if (!i8) return;
    let o7 = i8.length, r8 = i8.indexOf(t12);
    r8 < 0 || (o7 === 1 ? this._listeners.delete(e6) : i8.splice(r8, 1));
  }
};
function Gt(s82, e6, t12, i8 = false) {
  let o7 = e6.get(s82);
  return (!o7 || i8) && (o7 = [...t12.values()].map((r8) => r8(s82)), e6.set(s82, o7)), o7;
}
var xt = class {
  constructor(e6) {
    this._engine = e6, this.plugins = [], this._initializers = { interactors: /* @__PURE__ */ new Map(), movers: /* @__PURE__ */ new Map(), updaters: /* @__PURE__ */ new Map() }, this.interactors = /* @__PURE__ */ new Map(), this.movers = /* @__PURE__ */ new Map(), this.updaters = /* @__PURE__ */ new Map(), this.presets = /* @__PURE__ */ new Map(), this.drawers = /* @__PURE__ */ new Map(), this.pathGenerators = /* @__PURE__ */ new Map();
  }
  addInteractor(e6, t12) {
    this._initializers.interactors.set(e6, t12);
  }
  addParticleMover(e6, t12) {
    this._initializers.movers.set(e6, t12);
  }
  addParticleUpdater(e6, t12) {
    this._initializers.updaters.set(e6, t12);
  }
  addPathGenerator(e6, t12) {
    !this.getPathGenerator(e6) && this.pathGenerators.set(e6, t12);
  }
  addPlugin(e6) {
    !this.getPlugin(e6.id) && this.plugins.push(e6);
  }
  addPreset(e6, t12, i8 = false) {
    (i8 || !this.getPreset(e6)) && this.presets.set(e6, t12);
  }
  addShapeDrawer(e6, t12) {
    M(e6, (i8) => {
      !this.getShapeDrawer(i8) && this.drawers.set(i8, t12);
    });
  }
  destroy(e6) {
    this.updaters.delete(e6), this.movers.delete(e6), this.interactors.delete(e6);
  }
  getAvailablePlugins(e6) {
    let t12 = /* @__PURE__ */ new Map();
    for (let i8 of this.plugins) i8.needsPlugin(e6.actualOptions) && t12.set(i8.id, i8.getPlugin(e6));
    return t12;
  }
  getInteractors(e6, t12 = false) {
    return Gt(e6, this.interactors, this._initializers.interactors, t12);
  }
  getMovers(e6, t12 = false) {
    return Gt(e6, this.movers, this._initializers.movers, t12);
  }
  getPathGenerator(e6) {
    return this.pathGenerators.get(e6);
  }
  getPlugin(e6) {
    return this.plugins.find((t12) => t12.id === e6);
  }
  getPreset(e6) {
    return this.presets.get(e6);
  }
  getShapeDrawer(e6) {
    return this.drawers.get(e6);
  }
  getSupportedShapes() {
    return this.drawers.keys();
  }
  getUpdaters(e6, t12 = false) {
    return Gt(e6, this.updaters, this._initializers.updaters, t12);
  }
  loadOptions(e6, t12) {
    for (let i8 of this.plugins) i8.loadOptions(e6, t12);
  }
  loadParticlesOptions(e6, t12, ...i8) {
    let o7 = this.updaters.get(e6);
    if (o7) for (let r8 of o7) r8.loadOptions && r8.loadOptions(t12, ...i8);
  }
};
async function Bi(s82) {
  let e6 = G(s82.url, s82.index);
  if (!e6) return s82.fallback;
  let t12 = await fetch(e6);
  return t12.ok ? t12.json() : (A().error(`${I} ${t12.status} while retrieving config file`), s82.fallback);
}
function Ui(s82) {
  return !s82.id && !s82.element && !s82.url && !s82.options;
}
function Wi(s82) {
  return !Ui(s82);
}
var yt = class {
  constructor() {
    this._configs = /* @__PURE__ */ new Map(), this._domArray = [], this._eventDispatcher = new gt(), this._initialized = false, this.plugins = new xt(this);
  }
  get configs() {
    let e6 = {};
    for (let [t12, i8] of this._configs) e6[t12] = i8;
    return e6;
  }
  get version() {
    return "2.12.0";
  }
  addConfig(e6, t12) {
    P(e6) ? t12 && (t12.name = e6, this._configs.set(e6, t12)) : this._configs.set(e6.name ?? "default", e6);
  }
  addEventListener(e6, t12) {
    this._eventDispatcher.addEventListener(e6, t12);
  }
  async addInteractor(e6, t12, i8 = true) {
    this.plugins.addInteractor(e6, t12), await this.refresh(i8);
  }
  async addMover(e6, t12, i8 = true) {
    this.plugins.addParticleMover(e6, t12), await this.refresh(i8);
  }
  async addParticleUpdater(e6, t12, i8 = true) {
    this.plugins.addParticleUpdater(e6, t12), await this.refresh(i8);
  }
  async addPathGenerator(e6, t12, i8 = true) {
    this.plugins.addPathGenerator(e6, t12), await this.refresh(i8);
  }
  async addPlugin(e6, t12 = true) {
    this.plugins.addPlugin(e6), await this.refresh(t12);
  }
  async addPreset(e6, t12, i8 = false, o7 = true) {
    this.plugins.addPreset(e6, t12, i8), await this.refresh(o7);
  }
  async addShape(e6, t12, i8, o7, r8, n12 = true) {
    let a7, h9 = n12, l16, c14, u11;
    O(i8) ? (h9 = i8, l16 = void 0) : l16 = i8, O(o7) ? (h9 = o7, c14 = void 0) : c14 = o7, O(r8) ? (h9 = r8, u11 = void 0) : u11 = r8, ge(t12) ? a7 = { afterEffect: c14, destroy: u11, draw: t12, init: l16 } : a7 = t12, this.plugins.addShapeDrawer(e6, a7), await this.refresh(h9);
  }
  dispatchEvent(e6, t12) {
    this._eventDispatcher.dispatchEvent(e6, t12);
  }
  dom() {
    return this._domArray;
  }
  domItem(e6) {
    let t12 = this.dom(), i8 = t12[e6];
    if (!i8 || i8.destroyed) {
      t12.splice(e6, 1);
      return;
    }
    return i8;
  }
  init() {
    this._initialized || (this._initialized = true);
  }
  async load(e6, t12) {
    return this.loadFromArray(e6, t12);
  }
  async loadFromArray(e6, t12, i8) {
    let o7;
    return Wi(e6) ? o7 = e6 : (o7 = {}, P(e6) ? o7.id = e6 : o7.options = e6, S(t12) ? o7.index = t12 : o7.options = t12 ?? o7.options, o7.index = i8 ?? o7.index), this._loadParams(o7);
  }
  async loadJSON(e6, t12, i8) {
    let o7, r8;
    return S(t12) || t12 === void 0 ? o7 = e6 : (r8 = e6, o7 = t12), this._loadParams({ id: r8, url: o7, index: i8 });
  }
  async refresh(e6 = true) {
    e6 && this.dom().forEach((t12) => t12.refresh());
  }
  removeEventListener(e6, t12) {
    this._eventDispatcher.removeEventListener(e6, t12);
  }
  async set(e6, t12, i8, o7) {
    let r8 = { index: o7 };
    return P(e6) ? r8.id = e6 : r8.element = e6, t12 instanceof HTMLElement ? r8.element = t12 : r8.options = t12, S(i8) ? r8.index = i8 : r8.options = i8 ?? r8.options, this._loadParams(r8);
  }
  async setJSON(e6, t12, i8, o7) {
    let r8 = {};
    return e6 instanceof HTMLElement ? (r8.element = e6, r8.url = t12, r8.index = i8) : (r8.id = e6, r8.element = t12, r8.url = i8, r8.index = o7), this._loadParams(r8);
  }
  setOnClickHandler(e6) {
    let t12 = this.dom();
    if (!t12.length) throw new Error(`${I} can only set click handlers after calling tsParticles.load()`);
    for (let i8 of t12) i8.addClickHandler(e6);
  }
  async _loadParams(e6) {
    let t12 = e6.id ?? `tsparticles${Math.floor(z() * 1e4)}`, { index: i8, url: o7 } = e6, r8 = o7 ? await Bi({ fallback: e6.options, url: o7, index: i8 }) : e6.options, n12 = e6.element ?? document.getElementById(t12);
    n12 || (n12 = document.createElement("div"), n12.id = t12, document.body.append(n12));
    let a7 = G(r8, i8), h9 = this.dom(), l16 = h9.findIndex((f11) => f11.id === t12);
    if (l16 >= 0) {
      let f11 = this.domItem(l16);
      f11 && !f11.destroyed && (f11.destroy(), h9.splice(l16, 1));
    }
    let c14;
    if (n12.tagName.toLowerCase() === "canvas") c14 = n12, c14.dataset[U] = "false";
    else {
      let f11 = n12.getElementsByTagName("canvas");
      f11.length ? (c14 = f11[0], c14.dataset[U] = "false") : (c14 = document.createElement("canvas"), c14.dataset[U] = "true", n12.appendChild(c14));
    }
    c14.style.width || (c14.style.width = "100%"), c14.style.height || (c14.style.height = "100%");
    let u11 = new mt(this, t12, a7);
    return l16 >= 0 ? h9.splice(l16, 0, u11) : h9.push(u11), u11.canvas.loadCanvas(c14), await u11.start(), u11;
  }
};
var vt = class {
  constructor() {
    this.key = "hsl", this.stringPrefix = "hsl";
  }
  handleColor(e6) {
    let t12 = e6.value, i8 = t12.hsl ?? e6.value;
    if (i8.h !== void 0 && i8.s !== void 0 && i8.l !== void 0) return q(i8);
  }
  handleRangeColor(e6) {
    let t12 = e6.value, i8 = t12.hsl ?? e6.value;
    if (i8.h !== void 0 && i8.l !== void 0) return q({ h: d(i8.h), l: d(i8.l), s: d(i8.s) });
  }
  parseString(e6) {
    if (!e6.startsWith("hsl")) return;
    let t12 = /hsla?\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([\d.%]+)\s*)?\)/i, i8 = t12.exec(e6);
    return i8 ? ui({ a: i8.length > 4 ? ue(i8[5]) : 1, h: parseInt(i8[1], 10), l: parseInt(i8[3], 10), s: parseInt(i8[2], 10) }) : void 0;
  }
};
var bt = class {
  constructor() {
    this.key = "rgb", this.stringPrefix = "rgb";
  }
  handleColor(e6) {
    let t12 = e6.value, i8 = t12.rgb ?? e6.value;
    if (i8.r !== void 0) return i8;
  }
  handleRangeColor(e6) {
    let t12 = e6.value, i8 = t12.rgb ?? e6.value;
    if (i8.r !== void 0) return { r: d(i8.r), g: d(i8.g), b: d(i8.b) };
  }
  parseString(e6) {
    if (!e6.startsWith(this.stringPrefix)) return;
    let t12 = /rgba?\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([\d.%]+)\s*)?\)/i, i8 = t12.exec(e6);
    return i8 ? { a: i8.length > 4 ? ue(i8[5]) : 1, b: parseInt(i8[3], 10), g: parseInt(i8[2], 10), r: parseInt(i8[1], 10) } : void 0;
  }
};
function Mi() {
  let s82 = new bt(), e6 = new vt();
  Tt(s82), Tt(e6);
  let t12 = new yt();
  return t12.init(), t12;
}
var $i = Mi();
Z() || (window.tsParticles = $i);

// /:https://esm.sh/*react-tsparticles@2.12.2/es2022/react-tsparticles.mjs
var p2 = (e22) => typeof e22 == "object" && e22 !== null;
function l(e22, t12, s17 = () => false) {
  if (!p2(e22) || !p2(t12)) return e22 === t12;
  let r8 = Object.keys(e22).filter((i8) => !s17(i8)), a7 = Object.keys(t12).filter((i8) => !s17(i8));
  if (r8.length !== a7.length) return false;
  for (let i8 of r8) {
    let o7 = e22[i8], n12 = t12[i8];
    if (p2(o7) && p2(n12)) {
      if (o7 === t12 && n12 === e22) continue;
      if (!l(o7, n12, s17)) return false;
    } else if (Array.isArray(o7) && Array.isArray(n12)) {
      if (!f(o7, n12, s17)) return false;
    } else if (o7 !== n12) return false;
  }
  return true;
}
function f(e22, t12, s17) {
  if (e22.length !== t12.length) return false;
  for (let r8 = 0; r8 < e22.length; r8++) {
    let a7 = e22[r8], i8 = t12[r8];
    if (Array.isArray(a7) && Array.isArray(i8)) {
      if (!f(a7, i8, s17)) return false;
    } else if (p2(a7) && p2(i8)) {
      if (!l(a7, i8, s17)) return false;
    } else if (a7 !== i8) return false;
  }
  return true;
}
var u = "tsparticles";
var h = class e extends y {
  constructor(t12) {
    super(t12), this.state = { init: false, library: void 0 };
  }
  destroy() {
    this.state.library && (this.state.library.destroy(), this.setState({ library: void 0 }));
  }
  shouldComponentUpdate(t12) {
    let s17 = t12.options ?? t12.params, r8 = this.props.options ?? this.props.params;
    return t12.url !== this.props.url || t12.id !== this.props.id || t12.canvasClassName !== this.props.canvasClassName || t12.className !== this.props.className || t12.height !== this.props.height || t12.width !== this.props.width || !l(t12.style, this.props.style) || t12.init !== this.props.init || t12.loaded !== this.props.loaded || !l(s17, r8, (a7) => a7.startsWith("_"));
  }
  componentDidUpdate() {
    this.refresh();
  }
  forceUpdate() {
    this.refresh().then(() => {
      super.forceUpdate();
    });
  }
  componentDidMount() {
    (async () => (this.props.init && await this.props.init($i), this.setState({ init: true }, async () => {
      await this.loadParticles();
    })))();
  }
  componentWillUnmount() {
    this.destroy();
  }
  render() {
    let { width: t12, height: s17, className: r8, canvasClassName: a7, id: i8 } = this.props;
    return d2.createElement("div", { className: r8, id: i8 }, d2.createElement("canvas", { className: a7, style: { ...this.props.style, width: t12, height: s17 } }));
  }
  async refresh() {
    this.destroy(), await this.loadParticles();
  }
  async loadParticles() {
    if (!this.state.init) return;
    let t12 = this.props.id ?? e.defaultProps.id ?? u, s17 = await $i.load({ url: this.props.url, id: t12, options: this.props.options ?? this.props.params });
    this.props.container && (this.props.container.current = s17), this.setState({ library: s17 }), this.props.loaded && await this.props.loaded(s17);
  }
};
h.defaultProps = { width: "100%", height: "100%", options: {}, style: {}, url: void 0, id: u };
var m = h;
var k2 = m;

// /:https://esm.sh/*@tsparticles/engine@3.8.1/es2022/engine.mjs
var Y2 = "generated";
var Zi = "pointerdown";
var ji = "pointerup";
var gi2 = "pointerleave";
var Ji = "pointerout";
var yi2 = "pointermove";
var Ki = "touchstart";
var vi = "touchend";
var eo = "touchmove";
var to = "touchcancel";
var io = "resize";
var oo = "visibilitychange";
var V2 = "tsParticles - Error";
var D2 = 100;
var w = 0.5;
var I2 = 1e3;
var R2 = { x: 0, y: 0, z: 0 };
var Le2 = { a: 1, b: 0, c: 0, d: 1 };
var re2 = "random";
var Ae2 = "mid";
var M2 = 2;
var ro = Math.PI * M2;
var Xe2 = 60;
var _i2 = "true";
var wi2 = "false";
var Ye2 = "canvas";
var bi2 = 0;
var F2 = 2;
var Mi2 = 4;
var so = 1;
var zi2 = 1;
var Oi2 = 1;
var no = 4;
var Ze2 = 1;
var Ne2 = 255;
var se2 = 360;
var je2 = 100;
var Je2 = 100;
var Pi = 0;
var Ke2 = 0;
var ao = 60;
var lo = 0;
var Ve2 = 0.25;
var Ri = 0.5 + Ve2;
var Si = 0;
var co = 1;
var ho = 0;
var fo = 0;
var uo = 1;
var He2 = 1;
var po = 1;
var ki = 1;
var be2 = 0;
var et2 = 1;
var mo = 0;
var xo = 120;
var go = 0;
var yo = 0;
var vo = 1e4;
var _o = 0;
var wo = 1;
var ue2 = 0;
var tt2 = 1;
var bo = 1;
var Mo = 0;
var Di = 1;
var zo = 0;
var Oo = 0;
var Ci2 = -Ve2;
var Ii2 = 1.5;
var Ti = 0;
var Po = 1;
var Ro = 0;
var qe2 = 0;
var So = 0;
var it2 = 1;
var ko = 1;
var Me2 = 1;
var Do = 500;
var Fi2 = 50;
var Co = 0;
var Be2 = 1;
var Ei = 0;
var Li2 = 1;
var Io = 0;
var ne2 = 255;
var ot2 = 3;
var rt2 = 6;
var To = 1;
var Fo = 1;
var Eo = 0;
var Lo = 0;
var Ao = 0;
var No = 0;
var z2;
(function(t82) {
  t82.bottom = "bottom", t82.bottomLeft = "bottom-left", t82.bottomRight = "bottom-right", t82.left = "left", t82.none = "none", t82.right = "right", t82.top = "top", t82.topLeft = "top-left", t82.topRight = "top-right", t82.outside = "outside", t82.inside = "inside";
})(z2 || (z2 = {}));
function st2(t82) {
  return typeof t82 == "boolean";
}
function H2(t82) {
  return typeof t82 == "string";
}
function W2(t82) {
  return typeof t82 == "number";
}
function pe2(t82) {
  return typeof t82 == "object" && t82 !== null;
}
function E2(t82) {
  return Array.isArray(t82);
}
function h2(t82) {
  return t82 == null;
}
var ze2 = class t {
  constructor(e6, i8, o7) {
    if (this._updateFromAngle = (r8, s17) => {
      this.x = Math.cos(r8) * s17, this.y = Math.sin(r8) * s17;
    }, !W2(e6) && e6) {
      this.x = e6.x, this.y = e6.y;
      let r8 = e6;
      this.z = r8.z ? r8.z : R2.z;
    } else if (e6 !== void 0 && i8 !== void 0) this.x = e6, this.y = i8, this.z = o7 ?? R2.z;
    else throw new Error(`${V2} Vector3d not initialized correctly`);
  }
  static get origin() {
    return t.create(R2.x, R2.y, R2.z);
  }
  get angle() {
    return Math.atan2(this.y, this.x);
  }
  set angle(e6) {
    this._updateFromAngle(e6, this.length);
  }
  get length() {
    return Math.sqrt(this.getLengthSq());
  }
  set length(e6) {
    this._updateFromAngle(this.angle, e6);
  }
  static clone(e6) {
    return t.create(e6.x, e6.y, e6.z);
  }
  static create(e6, i8, o7) {
    return new t(e6, i8, o7);
  }
  add(e6) {
    return t.create(this.x + e6.x, this.y + e6.y, this.z + e6.z);
  }
  addTo(e6) {
    this.x += e6.x, this.y += e6.y, this.z += e6.z;
  }
  copy() {
    return t.clone(this);
  }
  distanceTo(e6) {
    return this.sub(e6).length;
  }
  distanceToSq(e6) {
    return this.sub(e6).getLengthSq();
  }
  div(e6) {
    return t.create(this.x / e6, this.y / e6, this.z / e6);
  }
  divTo(e6) {
    this.x /= e6, this.y /= e6, this.z /= e6;
  }
  getLengthSq() {
    return this.x ** F2 + this.y ** F2;
  }
  mult(e6) {
    return t.create(this.x * e6, this.y * e6, this.z * e6);
  }
  multTo(e6) {
    this.x *= e6, this.y *= e6, this.z *= e6;
  }
  normalize() {
    let e6 = this.length;
    e6 != ue2 && this.multTo(Ze2 / e6);
  }
  rotate(e6) {
    return t.create(this.x * Math.cos(e6) - this.y * Math.sin(e6), this.x * Math.sin(e6) + this.y * Math.cos(e6), R2.z);
  }
  setTo(e6) {
    this.x = e6.x, this.y = e6.y;
    let i8 = e6;
    this.z = i8.z ? i8.z : R2.z;
  }
  sub(e6) {
    return t.create(this.x - e6.x, this.y - e6.y, this.z - e6.z);
  }
  subFrom(e6) {
    this.x -= e6.x, this.y -= e6.y, this.z -= e6.z;
  }
};
var Z2 = class t2 extends ze2 {
  constructor(e6, i8) {
    super(e6, i8, R2.z);
  }
  static get origin() {
    return t2.create(R2.x, R2.y);
  }
  static clone(e6) {
    return t2.create(e6.x, e6.y);
  }
  static create(e6, i8) {
    return new t2(e6, i8);
  }
};
var Vo = Math.random;
var nt2 = { nextFrame: (t82) => requestAnimationFrame(t82), cancel: (t82) => cancelAnimationFrame(t82) };
function S2() {
  return me2(Vo(), 0, 1 - Number.EPSILON);
}
function Ho(t82) {
  return nt2.nextFrame(t82);
}
function qo(t82) {
  nt2.cancel(t82);
}
function me2(t82, e6, i8) {
  return Math.min(Math.max(t82, e6), i8);
}
function at2(t82, e6, i8, o7) {
  return Math.floor((t82 * i8 + e6 * o7) / (i8 + o7));
}
function U2(t82) {
  let e6 = Pe2(t82), i8 = 0, o7 = Oe2(t82);
  return e6 === o7 && (o7 = i8), S2() * (e6 - o7) + o7;
}
function g(t82) {
  return W2(t82) ? t82 : U2(t82);
}
function Oe2(t82) {
  return W2(t82) ? t82 : t82.min;
}
function Pe2(t82) {
  return W2(t82) ? t82 : t82.max;
}
function x2(t82, e6) {
  if (t82 === e6 || e6 === void 0 && W2(t82)) return t82;
  let i8 = Oe2(t82), o7 = Pe2(t82);
  return e6 !== void 0 ? { min: Math.min(i8, e6), max: Math.max(o7, e6) } : x2(i8, o7);
}
function Ai2(t82, e6) {
  let i8 = t82.x - e6.x, o7 = t82.y - e6.y, r8 = 2;
  return { dx: i8, dy: o7, distance: Math.sqrt(i8 ** r8 + o7 ** r8) };
}
function Re2(t82, e6) {
  return Ai2(t82, e6).distance;
}
function lt2(t82) {
  return t82 * Math.PI / 180;
}
function Bo(t82, e6, i8) {
  if (W2(t82)) return lt2(t82);
  switch (t82) {
    case z2.top:
      return -Math.PI * 0.5;
    case z2.topRight:
      return -Math.PI * Ve2;
    case z2.right:
      return lo;
    case z2.bottomRight:
      return Math.PI * Ve2;
    case z2.bottom:
      return Math.PI * 0.5;
    case z2.bottomLeft:
      return Math.PI * Ri;
    case z2.left:
      return Math.PI;
    case z2.topLeft:
      return -Math.PI * Ri;
    case z2.inside:
      return Math.atan2(i8.y - e6.y, i8.x - e6.x);
    case z2.outside:
      return Math.atan2(e6.y - i8.y, e6.x - i8.x);
    default:
      return S2() * ro;
  }
}
function Wo(t82) {
  let e6 = Z2.origin;
  return e6.length = 1, e6.angle = t82, e6;
}
function Ni(t82, e6, i8, o7) {
  return Z2.create(t82.x * (i8 - o7) / (i8 + o7) + e6.x * M2 * o7 / (i8 + o7), t82.y);
}
function gr(t82) {
  return { x: (t82.position?.x ?? S2() * 100) * t82.size.width / 100, y: (t82.position?.y ?? S2() * 100) * t82.size.height / 100 };
}
function es(t82) {
  let e6 = { x: t82.position?.x !== void 0 ? g(t82.position.x) : void 0, y: t82.position?.y !== void 0 ? g(t82.position.y) : void 0 };
  return gr({ size: t82.size, position: e6 });
}
function Vi2(t82) {
  return { x: t82.position?.x ?? S2() * t82.size.width, y: t82.position?.y ?? S2() * t82.size.height };
}
function is(t82) {
  return t82 ? t82.endsWith("%") ? parseFloat(t82) / 100 : parseFloat(t82) : 1;
}
var j2;
(function(t82) {
  t82.auto = "auto", t82.increase = "increase", t82.decrease = "decrease", t82.random = "random";
})(j2 || (j2 = {}));
var O2;
(function(t82) {
  t82.increasing = "increasing", t82.decreasing = "decreasing";
})(O2 || (O2 = {}));
var J2;
(function(t82) {
  t82.none = "none", t82.max = "max", t82.min = "min";
})(J2 || (J2 = {}));
var de2;
(function(t82) {
  t82.bottom = "bottom", t82.left = "left", t82.right = "right", t82.top = "top";
})(de2 || (de2 = {}));
var $2;
(function(t82) {
  t82.precise = "precise", t82.percent = "percent";
})($2 || ($2 = {}));
var ae2;
(function(t82) {
  t82.max = "max", t82.min = "min", t82.random = "random";
})(ae2 || (ae2 = {}));
var L2 = { debug: console.debug, error: console.error, info: console.info, log: console.log, verbose: console.log, warning: console.warn };
function K2() {
  return L2;
}
function yr(t82) {
  let e6 = /* @__PURE__ */ new Map();
  return (...i8) => {
    let o7 = JSON.stringify(i8);
    if (e6.has(o7)) return e6.get(o7);
    let r8 = t82(...i8);
    return e6.set(o7, r8), r8;
  };
}
function Uo(t82) {
  let e6 = { bounced: false }, { pSide: i8, pOtherSide: o7, rectSide: r8, rectOtherSide: s17, velocity: n12, factor: a7 } = t82;
  return o7.min < s17.min || o7.min > s17.max || o7.max < s17.min || o7.max > s17.max || (i8.max >= r8.min && i8.max <= (r8.max + r8.min) * 0.5 && n12 > Si || i8.min <= r8.max && i8.min > (r8.max + r8.min) * 0.5 && n12 < Si) && (e6.velocity = n12 * -a7, e6.bounced = true), e6;
}
function vr(t82, e6) {
  let i8 = A2(e6, (o7) => t82.matches(o7));
  return E2(i8) ? i8.some((o7) => o7) : i8;
}
function xe() {
  return typeof window > "u" || !window || typeof window.document > "u" || !window.document;
}
function _r() {
  return !xe() && typeof matchMedia < "u";
}
function ct2(t82) {
  if (_r()) return matchMedia(t82);
}
function $o(t82) {
  if (!(xe() || typeof IntersectionObserver > "u")) return new IntersectionObserver(t82);
}
function Go(t82) {
  if (!(xe() || typeof MutationObserver > "u")) return new MutationObserver(t82);
}
function ht2(t82, e6) {
  return t82 === e6 || E2(e6) && e6.indexOf(t82) > -1;
}
async function ws(t82, e6) {
  try {
    await document.fonts.load(`${e6 ?? "400"} 36px '${t82 ?? "Verdana"}'`);
  } catch {
  }
}
function wr(t82) {
  return Math.floor(S2() * t82.length);
}
function ft2(t82, e6, i8 = true) {
  return t82[e6 !== void 0 && i8 ? e6 % t82.length : wr(t82)];
}
function bs(t82, e6, i8, o7, r8) {
  return br(Qo(t82, o7 ?? 0), e6, i8, r8);
}
function br(t82, e6, i8, o7) {
  let r8 = true;
  return (!o7 || o7 === de2.bottom) && (r8 = t82.top < e6.height + i8.x), r8 && (!o7 || o7 === de2.left) && (r8 = t82.right > i8.x), r8 && (!o7 || o7 === de2.right) && (r8 = t82.left < e6.width + i8.y), r8 && (!o7 || o7 === de2.top) && (r8 = t82.bottom > i8.y), r8;
}
function Qo(t82, e6) {
  return { bottom: t82.y + e6, left: t82.x - e6, right: t82.x + e6, top: t82.y - e6 };
}
function _(t82, ...e6) {
  for (let i8 of e6) {
    if (i8 == null) continue;
    if (!pe2(i8)) {
      t82 = i8;
      continue;
    }
    let o7 = Array.isArray(i8);
    o7 && (pe2(t82) || !t82 || !Array.isArray(t82)) ? t82 = [] : !o7 && (pe2(t82) || !t82 || Array.isArray(t82)) && (t82 = {});
    for (let r8 in i8) {
      if (r8 === "__proto__") continue;
      let s17 = i8, n12 = s17[r8], a7 = t82;
      a7[r8] = pe2(n12) && Array.isArray(n12) ? n12.map((c14) => _(a7[r8], c14)) : _(a7[r8], n12);
    }
  }
  return t82;
}
function Ms(t82, e6) {
  return !!Xo(e6, (i8) => i8.enable && ht2(t82, i8.mode));
}
function zs(t82, e6, i8) {
  A2(e6, (o7) => {
    let r8 = o7.mode;
    o7.enable && ht2(t82, r8) && Mr(o7, i8);
  });
}
function Mr(t82, e6) {
  let i8 = t82.selectors;
  A2(i8, (o7) => {
    e6(o7, t82);
  });
}
function Os(t82, e6) {
  if (!(!e6 || !t82)) return Xo(t82, (i8) => vr(e6, i8.selectors));
}
function Ps(t82) {
  return { position: t82.getPosition(), radius: t82.getRadius(), mass: t82.getMass(), velocity: t82.velocity, factor: Z2.create(g(t82.options.bounce.horizontal.value), g(t82.options.bounce.vertical.value)) };
}
function Rs(t82, e6) {
  let { x: i8, y: o7 } = t82.velocity.sub(e6.velocity), [r8, s17] = [t82.position, e6.position], { dx: n12, dy: a7 } = Ai2(s17, r8);
  if (i8 * n12 + o7 * a7 < 0) return;
  let l16 = -Math.atan2(a7, n12), u11 = t82.mass, f11 = e6.mass, p15 = t82.velocity.rotate(l16), m11 = e6.velocity.rotate(l16), d16 = Ni(p15, m11, u11, f11), y15 = Ni(m11, p15, u11, f11), v11 = d16.rotate(-l16), N4 = y15.rotate(-l16);
  t82.velocity.x = v11.x * t82.factor.x, t82.velocity.y = v11.y * t82.factor.y, e6.velocity.x = N4.x * e6.factor.x, e6.velocity.y = N4.y * e6.factor.y;
}
function Ss(t82, e6) {
  let i8 = t82.getPosition(), o7 = t82.getRadius(), r8 = Qo(i8, o7), s17 = t82.options.bounce, n12 = Uo({ pSide: { min: r8.left, max: r8.right }, pOtherSide: { min: r8.top, max: r8.bottom }, rectSide: { min: e6.left, max: e6.right }, rectOtherSide: { min: e6.top, max: e6.bottom }, velocity: t82.velocity.x, factor: g(s17.horizontal.value) });
  n12.bounced && (n12.velocity !== void 0 && (t82.velocity.x = n12.velocity), n12.position !== void 0 && (t82.position.x = n12.position));
  let a7 = Uo({ pSide: { min: r8.top, max: r8.bottom }, pOtherSide: { min: r8.left, max: r8.right }, rectSide: { min: e6.top, max: e6.bottom }, rectOtherSide: { min: e6.left, max: e6.right }, velocity: t82.velocity.y, factor: g(s17.vertical.value) });
  a7.bounced && (a7.velocity !== void 0 && (t82.velocity.y = a7.velocity), a7.position !== void 0 && (t82.position.y = a7.position));
}
function A2(t82, e6) {
  return E2(t82) ? t82.map((o7, r8) => e6(o7, r8)) : e6(t82, 0);
}
function G2(t82, e6, i8) {
  return E2(t82) ? ft2(t82, e6, i8) : t82;
}
function Xo(t82, e6) {
  return E2(t82) ? t82.find((o7, r8) => e6(o7, r8)) : e6(t82, 0) ? t82 : void 0;
}
function Yo(t82, e6) {
  let i8 = t82.value, o7 = t82.animation, r8 = { delayTime: g(o7.delay) * 1e3, enable: o7.enable, value: g(t82.value) * e6, max: Pe2(i8) * e6, min: Oe2(i8) * e6, loops: 0, maxLoops: g(o7.count), time: 0 }, s17 = 1;
  if (o7.enable) {
    switch (r8.decay = s17 - g(o7.decay), o7.mode) {
      case j2.increase:
        r8.status = O2.increasing;
        break;
      case j2.decrease:
        r8.status = O2.decreasing;
        break;
      case j2.random:
        r8.status = S2() >= 0.5 ? O2.increasing : O2.decreasing;
        break;
    }
    let n12 = o7.mode === j2.auto;
    switch (o7.startValue) {
      case ae2.min:
        r8.value = r8.min, n12 && (r8.status = O2.increasing);
        break;
      case ae2.max:
        r8.value = r8.max, n12 && (r8.status = O2.decreasing);
        break;
      case ae2.random:
      default:
        r8.value = U2(r8), n12 && (r8.status = S2() >= 0.5 ? O2.increasing : O2.decreasing);
        break;
    }
  }
  return r8.initialValue = r8.value, r8;
}
function Zo(t82, e6) {
  if (!(t82.mode === $2.percent)) {
    let { mode: r8, ...s17 } = t82;
    return s17;
  }
  return "x" in t82 ? { x: t82.x / 100 * e6.width, y: t82.y / 100 * e6.height } : { width: t82.width / 100 * e6.width, height: t82.height / 100 * e6.height };
}
function ut2(t82, e6) {
  return Zo(t82, e6);
}
function ks(t82, e6) {
  return Zo(t82, e6);
}
function zr(t82, e6, i8, o7, r8) {
  switch (e6) {
    case J2.max:
      i8 >= r8 && t82.destroy();
      break;
    case J2.min:
      i8 <= o7 && t82.destroy();
      break;
  }
}
function Ds(t82, e6, i8, o7, r8) {
  if (t82.destroyed || !e6 || !e6.enable || (e6.maxLoops ?? 0) > 0 && (e6.loops ?? 0) > (e6.maxLoops ?? 0)) return;
  let u11 = (e6.velocity ?? 0) * r8.factor, f11 = e6.min, p15 = e6.max, m11 = e6.decay ?? 1;
  if (e6.time || (e6.time = 0), (e6.delayTime ?? 0) > 0 && e6.time < (e6.delayTime ?? 0) && (e6.time += r8.value), !((e6.delayTime ?? 0) > 0 && e6.time < (e6.delayTime ?? 0))) {
    switch (e6.status) {
      case O2.increasing:
        e6.value >= p15 ? (i8 ? e6.status = O2.decreasing : e6.value -= p15, e6.loops || (e6.loops = 0), e6.loops++) : e6.value += u11;
        break;
      case O2.decreasing:
        e6.value <= f11 ? (i8 ? e6.status = O2.increasing : e6.value += p15, e6.loops || (e6.loops = 0), e6.loops++) : e6.value -= u11;
    }
    e6.velocity && m11 !== 1 && (e6.velocity *= m11), zr(t82, o7, e6.value, f11, p15), t82.destroyed || (e6.value = me2(e6.value, f11, p15));
  }
}
function jo(t82) {
  let e6 = document.createElement("div").style;
  if (!t82) return e6;
  for (let i8 in t82) {
    let o7 = t82[i8];
    if (!Object.prototype.hasOwnProperty.call(t82, i8) || h2(o7)) continue;
    let r8 = t82.getPropertyValue?.(o7);
    if (!r8) continue;
    let s17 = t82.getPropertyPriority?.(o7);
    s17 ? e6.setProperty?.(o7, r8, s17) : e6.setProperty?.(o7, r8);
  }
  return e6;
}
function Or(t82) {
  let e6 = document.createElement("div").style, i8 = 10, o7 = { width: "100%", height: "100%", margin: "0", padding: "0", borderWidth: "0", position: "fixed", zIndex: t82.toString(i8), "z-index": t82.toString(i8), top: "0", left: "0" };
  for (let r8 in o7) {
    let s17 = o7[r8];
    e6.setProperty(r8, s17);
  }
  return e6;
}
var Jo = yr(Or);
var pt2;
(function(t82) {
  t82.darken = "darken", t82.enlighten = "enlighten";
})(pt2 || (pt2 = {}));
function Ko(t82, e6) {
  if (e6) {
    for (let i8 of t82.colorManagers.values()) if (e6.startsWith(i8.stringPrefix)) return i8.parseString(e6);
  }
}
function Q2(t82, e6, i8, o7 = true) {
  if (!e6) return;
  let r8 = H2(e6) ? { value: e6 } : e6;
  if (H2(r8.value)) return Bi2(t82, r8.value, i8, o7);
  if (E2(r8.value)) return Q2(t82, { value: ft2(r8.value, i8, o7) });
  for (let s17 of t82.colorManagers.values()) {
    let n12 = s17.handleRangeColor(r8);
    if (n12) return n12;
  }
}
function Bi2(t82, e6, i8, o7 = true) {
  if (!e6) return;
  let r8 = H2(e6) ? { value: e6 } : e6;
  if (H2(r8.value)) return r8.value === re2 ? tr() : Pr(t82, r8.value);
  if (E2(r8.value)) return Bi2(t82, { value: ft2(r8.value, i8, o7) });
  for (let s17 of t82.colorManagers.values()) {
    let n12 = s17.handleColor(r8);
    if (n12) return n12;
  }
}
function Wi2(t82, e6, i8, o7 = true) {
  let r8 = Q2(t82, e6, i8, o7);
  return r8 ? er(r8) : void 0;
}
function er(t82) {
  let e6 = t82.r / Ne2, i8 = t82.g / Ne2, o7 = t82.b / Ne2, r8 = Math.max(e6, i8, o7), s17 = Math.min(e6, i8, o7), n12 = { h: Pi, l: (r8 + s17) * 0.5, s: Ke2 };
  return r8 !== s17 && (n12.s = n12.l < 0.5 ? (r8 - s17) / (r8 + s17) : (r8 - s17) / (M2 - r8 - s17), n12.h = e6 === r8 ? (i8 - o7) / (r8 - s17) : n12.h = i8 === r8 ? M2 + (o7 - e6) / (r8 - s17) : M2 * M2 + (e6 - i8) / (r8 - s17)), n12.l *= Je2, n12.s *= je2, n12.h *= ao, n12.h < Pi && (n12.h += se2), n12.h >= se2 && (n12.h -= se2), n12;
}
function Pr(t82, e6) {
  return Ko(t82, e6);
}
function mt2(t82) {
  let e6 = (t82.h % se2 + se2) % se2, i8 = Math.max(Ke2, Math.min(je2, t82.s)), o7 = Math.max(Io, Math.min(Je2, t82.l)), r8 = e6 / se2, s17 = i8 / je2, n12 = o7 / Je2;
  if (i8 === Ke2) {
    let d16 = Math.round(n12 * ne2);
    return { r: d16, g: d16, b: d16 };
  }
  let a7 = (d16, y15, v11) => {
    if (v11 < 0 && v11++, v11 > 1 && v11--, v11 * rt2 < 1) return d16 + (y15 - d16) * rt2 * v11;
    if (v11 * M2 < 1) return y15;
    if (v11 * ot2 < 1 * M2) {
      let C13 = M2 / ot2;
      return d16 + (y15 - d16) * (C13 - v11) * rt2;
    }
    return d16;
  }, c14 = n12 < 0.5 ? n12 * (To + s17) : n12 + s17 - n12 * s17, l16 = M2 * n12 - c14, u11 = Fo / ot2, f11 = Math.min(ne2, ne2 * a7(l16, c14, r8 + u11)), p15 = Math.min(ne2, ne2 * a7(l16, c14, r8)), m11 = Math.min(ne2, ne2 * a7(l16, c14, r8 - u11));
  return { r: Math.round(f11), g: Math.round(p15), b: Math.round(m11) };
}
function Hs(t82) {
  let e6 = mt2(t82);
  return { a: t82.a, b: e6.b, g: e6.g, r: e6.r };
}
function tr(t82) {
  let e6 = t82 ?? Eo, i8 = Ne2 + Be2;
  return { b: Math.floor(U2(x2(e6, i8))), g: Math.floor(U2(x2(e6, i8))), r: Math.floor(U2(x2(e6, i8))) };
}
function Se2(t82, e6) {
  return `rgba(${t82.r}, ${t82.g}, ${t82.b}, ${e6 ?? He2})`;
}
function Ui2(t82, e6) {
  return `hsla(${t82.h}, ${t82.s}%, ${t82.l}%, ${e6 ?? He2})`;
}
function Rr(t82, e6, i8, o7) {
  let r8 = t82, s17 = e6;
  return r8.r === void 0 && (r8 = mt2(t82)), s17.r === void 0 && (s17 = mt2(e6)), { b: at2(r8.b, s17.b, i8, o7), g: at2(r8.g, s17.g, i8, o7), r: at2(r8.r, s17.r, i8, o7) };
}
function qs(t82, e6, i8) {
  if (i8 === re2) return tr();
  if (i8 === Ae2) {
    let o7 = t82.getFillColor() ?? t82.getStrokeColor(), r8 = e6?.getFillColor() ?? e6?.getStrokeColor();
    if (o7 && r8 && e6) return Rr(o7, r8, t82.getRadius(), e6.getRadius());
    {
      let s17 = o7 ?? r8;
      if (s17) return mt2(s17);
    }
  } else return i8;
}
function Bs(t82, e6, i8, o7) {
  let r8 = H2(e6) ? e6 : e6.value;
  return r8 === re2 ? o7 ? Q2(t82, { value: r8 }) : i8 ? re2 : Ae2 : r8 === Ae2 ? Ae2 : Q2(t82, { value: r8 });
}
function $i2(t82) {
  return t82 !== void 0 ? { h: t82.h.value, s: t82.s.value, l: t82.l.value } : void 0;
}
function Ws(t82, e6, i8) {
  let o7 = { h: { enable: false, value: t82.h }, s: { enable: false, value: t82.s }, l: { enable: false, value: t82.l } };
  return e6 && (Hi2(o7.h, e6.h, i8), Hi2(o7.s, e6.s, i8), Hi2(o7.l, e6.l, i8)), o7;
}
function Hi2(t82, e6, i8) {
  t82.enable = e6.enable, t82.enable ? (t82.velocity = g(e6.speed) / 100 * i8, t82.decay = tt2 - g(e6.decay), t82.status = O2.increasing, t82.loops = Ao, t82.maxLoops = g(e6.count), t82.time = No, t82.delayTime = g(e6.delay) * 1e3, e6.sync || (t82.velocity *= S2(), t82.value *= S2()), t82.initialValue = t82.value, t82.offset = x2(e6.offset)) : t82.velocity = Lo;
}
function qi(t82, e6, i8, o7) {
  if (!t82 || !t82.enable || (t82.maxLoops ?? 0) > 0 && (t82.loops ?? 0) > (t82.maxLoops ?? 0) || (t82.time || (t82.time = 0), (t82.delayTime ?? 0) > 0 && t82.time < (t82.delayTime ?? 0) && (t82.time += o7.value), (t82.delayTime ?? 0) > 0 && t82.time < (t82.delayTime ?? 0))) return;
  let u11 = t82.offset ? U2(t82.offset) : 0, f11 = (t82.velocity ?? 0) * o7.factor + u11 * 3.6, p15 = t82.decay ?? 1, m11 = Pe2(e6), d16 = Oe2(e6);
  !i8 || t82.status === O2.increasing ? (t82.value += f11, t82.value > m11 && (t82.loops || (t82.loops = 0), t82.loops++, i8 ? t82.status = O2.decreasing : t82.value -= m11)) : (t82.value -= f11, t82.value < 0 && (t82.loops || (t82.loops = 0), t82.loops++, t82.status = O2.increasing)), t82.velocity && p15 !== 1 && (t82.velocity *= p15), t82.value = me2(t82.value, d16, m11);
}
function Us(t82, e6) {
  if (!t82) return;
  let { h: i8, s: o7, l: r8 } = t82, s17 = { h: { min: 0, max: 360 }, s: { min: 0, max: 100 }, l: { min: 0, max: 100 } };
  i8 && qi(i8, s17.h, false, e6), o7 && qi(o7, s17.s, true, e6), r8 && qi(r8, s17.l, true, e6);
}
function Ys(t82, e6, i8) {
  t82.beginPath(), t82.moveTo(e6.x, e6.y), t82.lineTo(i8.x, i8.y), t82.closePath();
}
function ir(t82, e6, i8) {
  t82.fillStyle = i8 ?? "rgba(0,0,0,0)", t82.fillRect(R2.x, R2.y, e6.width, e6.height);
}
function or(t82, e6, i8, o7) {
  i8 && (t82.globalAlpha = o7, t82.drawImage(i8, R2.x, R2.y, e6.width, e6.height), t82.globalAlpha = 1);
}
function dt2(t82, e6) {
  t82.clearRect(R2.x, R2.y, e6.width, e6.height);
}
function rr(t82) {
  let { container: e6, context: i8, particle: o7, delta: r8, colorStyles: s17, backgroundMask: n12, composite: a7, radius: c14, opacity: l16, shadow: u11, transform: f11 } = t82, p15 = o7.getPosition(), m11 = o7.rotation + (o7.pathRotation ? o7.velocity.angle : Co), d16 = { sin: Math.sin(m11), cos: Math.cos(m11) }, y15 = !!m11, v11 = { a: d16.cos * (f11.a ?? Le2.a), b: y15 ? d16.sin * (f11.b ?? Be2) : f11.b ?? Le2.b, c: y15 ? -d16.sin * (f11.c ?? Be2) : f11.c ?? Le2.c, d: d16.cos * (f11.d ?? Le2.d) };
  i8.setTransform(v11.a, v11.b, v11.c, v11.d, p15.x, p15.y), n12 && (i8.globalCompositeOperation = a7);
  let N4 = o7.shadowColor;
  u11.enable && N4 && (i8.shadowBlur = u11.blur, i8.shadowColor = Se2(N4), i8.shadowOffsetX = u11.offset.x, i8.shadowOffsetY = u11.offset.y), s17.fill && (i8.fillStyle = s17.fill);
  let B4 = o7.strokeWidth ?? Ei;
  i8.lineWidth = B4, s17.stroke && (i8.strokeStyle = s17.stroke);
  let C13 = { container: e6, context: i8, particle: o7, radius: c14, opacity: l16, delta: r8, transformData: v11, strokeWidth: B4 };
  kr(C13), Dr(C13), Sr(C13), i8.globalCompositeOperation = "source-over", i8.resetTransform();
}
function Sr(t82) {
  let { container: e6, context: i8, particle: o7, radius: r8, opacity: s17, delta: n12, transformData: a7 } = t82;
  if (!o7.effect) return;
  let c14 = e6.effectDrawers.get(o7.effect);
  c14 && c14.draw({ context: i8, particle: o7, radius: r8, opacity: s17, delta: n12, pixelRatio: e6.retina.pixelRatio, transformData: { ...a7 } });
}
function kr(t82) {
  let { container: e6, context: i8, particle: o7, radius: r8, opacity: s17, delta: n12, strokeWidth: a7, transformData: c14 } = t82;
  if (!o7.shape) return;
  let l16 = e6.shapeDrawers.get(o7.shape);
  l16 && (i8.beginPath(), l16.draw({ context: i8, particle: o7, radius: r8, opacity: s17, delta: n12, pixelRatio: e6.retina.pixelRatio, transformData: { ...c14 } }), o7.shapeClose && i8.closePath(), a7 > Ei && i8.stroke(), o7.shapeFill && i8.fill());
}
function Dr(t82) {
  let { container: e6, context: i8, particle: o7, radius: r8, opacity: s17, delta: n12, transformData: a7 } = t82;
  if (!o7.shape) return;
  let c14 = e6.shapeDrawers.get(o7.shape);
  c14?.afterDraw && c14.afterDraw({ context: i8, particle: o7, radius: r8, opacity: s17, delta: n12, pixelRatio: e6.retina.pixelRatio, transformData: { ...a7 } });
}
function sr(t82, e6, i8) {
  e6.draw && e6.draw(t82, i8);
}
function nr(t82, e6, i8, o7) {
  e6.drawParticle && e6.drawParticle(t82, i8, o7);
}
function ar(t82, e6, i8) {
  return { h: t82.h, s: t82.s, l: t82.l + (e6 === pt2.darken ? -Li2 : Li2) * i8 };
}
function Cr(t82, e6, i8) {
  let o7 = e6[i8];
  o7 !== void 0 && (t82[i8] = (t82[i8] ?? co) * o7);
}
function lr(t82, e6, i8 = false) {
  if (!e6) return;
  let o7 = t82;
  if (!o7) return;
  let r8 = o7.style;
  if (!r8) return;
  let s17 = /* @__PURE__ */ new Set();
  for (let n12 in r8) Object.prototype.hasOwnProperty.call(r8, n12) && s17.add(r8[n12]);
  for (let n12 in e6) Object.prototype.hasOwnProperty.call(e6, n12) && s17.add(e6[n12]);
  for (let n12 of s17) {
    let a7 = e6.getPropertyValue(n12);
    a7 ? r8.setProperty(n12, a7, i8 ? "important" : "") : r8.removeProperty(n12);
  }
}
var xt2 = class {
  constructor(e6, i8) {
    this.container = e6, this._applyPostDrawUpdaters = (s17) => {
      for (let n12 of this._postDrawUpdaters) n12.afterDraw?.(s17);
    }, this._applyPreDrawUpdaters = (s17, n12, a7, c14, l16, u11) => {
      for (let f11 of this._preDrawUpdaters) {
        if (f11.getColorStyles) {
          let { fill: p15, stroke: m11 } = f11.getColorStyles(n12, s17, a7, c14);
          p15 && (l16.fill = p15), m11 && (l16.stroke = m11);
        }
        if (f11.getTransformValues) {
          let p15 = f11.getTransformValues(n12);
          for (let m11 in p15) Cr(u11, p15, m11);
        }
        f11.beforeDraw?.(n12);
      }
    }, this._applyResizePlugins = () => {
      for (let s17 of this._resizePlugins) s17.resize?.();
    }, this._getPluginParticleColors = (s17) => {
      let n12, a7;
      for (let c14 of this._colorPlugins) if (!n12 && c14.particleFillColor && (n12 = Wi2(this._engine, c14.particleFillColor(s17))), !a7 && c14.particleStrokeColor && (a7 = Wi2(this._engine, c14.particleStrokeColor(s17))), n12 && a7) break;
      return [n12, a7];
    }, this._initCover = async () => {
      let s17 = this.container.actualOptions, n12 = s17.backgroundMask.cover, a7 = n12.color;
      if (a7) {
        let c14 = Q2(this._engine, a7);
        if (c14) {
          let l16 = { ...c14, a: n12.opacity };
          this._coverColorStyle = Se2(l16, l16.a);
        }
      } else await new Promise((c14, l16) => {
        if (!n12.image) return;
        let u11 = document.createElement("img");
        u11.addEventListener("load", () => {
          this._coverImage = { image: u11, opacity: n12.opacity }, c14();
        }), u11.addEventListener("error", (f11) => {
          l16(f11.error);
        }), u11.src = n12.image;
      });
    }, this._initStyle = () => {
      let s17 = this.element, n12 = this.container.actualOptions;
      if (s17) {
        this._fullScreen ? this._setFullScreenStyle() : this._resetOriginalStyle();
        for (let a7 in n12.style) {
          if (!a7 || !n12.style || !Object.prototype.hasOwnProperty.call(n12.style, a7)) continue;
          let c14 = n12.style[a7];
          c14 && s17.style.setProperty(a7, c14, "important");
        }
      }
    }, this._initTrail = async () => {
      let s17 = this.container.actualOptions, n12 = s17.particles.move.trail, a7 = n12.fill;
      if (!n12.enable) return;
      let c14 = Ze2 / n12.length;
      if (a7.color) {
        let l16 = Q2(this._engine, a7.color);
        if (!l16) return;
        this._trailFill = { color: { ...l16 }, opacity: c14 };
      } else await new Promise((l16, u11) => {
        if (!a7.image) return;
        let f11 = document.createElement("img");
        f11.addEventListener("load", () => {
          this._trailFill = { image: f11, opacity: c14 }, l16();
        }), f11.addEventListener("error", (p15) => {
          u11(p15.error);
        }), f11.src = a7.image;
      });
    }, this._paintBase = (s17) => {
      this.draw((n12) => ir(n12, this.size, s17));
    }, this._paintImage = (s17, n12) => {
      this.draw((a7) => or(a7, this.size, s17, n12));
    }, this._repairStyle = () => {
      let s17 = this.element;
      s17 && (this._safeMutationObserver((n12) => n12.disconnect()), this._initStyle(), this.initBackground(), this._safeMutationObserver((n12) => {
        !s17 || !(s17 instanceof Node) || n12.observe(s17, { attributes: true });
      }));
    }, this._resetOriginalStyle = () => {
      let s17 = this.element, n12 = this._originalStyle;
      !s17 || !n12 || lr(s17, n12, true);
    }, this._safeMutationObserver = (s17) => {
      this._mutationObserver && s17(this._mutationObserver);
    }, this._setFullScreenStyle = () => {
      let s17 = this.element;
      s17 && lr(s17, Jo(this.container.actualOptions.fullScreen.zIndex), true);
    }, this._engine = i8, this._standardSize = { height: 0, width: 0 };
    let o7 = e6.retina.pixelRatio, r8 = this._standardSize;
    this.size = { height: r8.height * o7, width: r8.width * o7 }, this._context = null, this._generated = false, this._preDrawUpdaters = [], this._postDrawUpdaters = [], this._resizePlugins = [], this._colorPlugins = [];
  }
  get _fullScreen() {
    return this.container.actualOptions.fullScreen.enable;
  }
  clear() {
    let e6 = this.container.actualOptions, i8 = e6.particles.move.trail, o7 = this._trailFill;
    e6.backgroundMask.enable ? this.paint() : i8.enable && i8.length > fo && o7 ? o7.color ? this._paintBase(Se2(o7.color, o7.opacity)) : o7.image && this._paintImage(o7.image, o7.opacity) : e6.clear && this.draw((r8) => {
      dt2(r8, this.size);
    });
  }
  destroy() {
    this.stop(), this._generated ? (this.element?.remove(), this.element = void 0) : this._resetOriginalStyle(), this._preDrawUpdaters = [], this._postDrawUpdaters = [], this._resizePlugins = [], this._colorPlugins = [];
  }
  draw(e6) {
    let i8 = this._context;
    if (i8) return e6(i8);
  }
  drawAsync(e6) {
    let i8 = this._context;
    if (i8) return e6(i8);
  }
  drawParticle(e6, i8) {
    if (e6.spawning || e6.destroyed) return;
    let o7 = e6.getRadius();
    if (o7 <= ho) return;
    let r8 = e6.getFillColor(), s17 = e6.getStrokeColor() ?? r8, [n12, a7] = this._getPluginParticleColors(e6);
    n12 || (n12 = r8), a7 || (a7 = s17), !(!n12 && !a7) && this.draw((c14) => {
      let l16 = this.container, u11 = l16.actualOptions, f11 = e6.options.zIndex, p15 = uo - e6.zIndexFactor, m11 = p15 ** f11.opacityRate, d16 = e6.bubble.opacity ?? e6.opacity?.value ?? He2, y15 = e6.strokeOpacity ?? d16, v11 = d16 * m11, N4 = y15 * m11, B4 = {}, C13 = { fill: n12 ? Ui2(n12, v11) : void 0 };
      C13.stroke = a7 ? Ui2(a7, N4) : C13.fill, this._applyPreDrawUpdaters(c14, e6, o7, v11, C13, B4), rr({ container: l16, context: c14, particle: e6, delta: i8, colorStyles: C13, backgroundMask: u11.backgroundMask.enable, composite: u11.backgroundMask.composite, radius: o7 * p15 ** f11.sizeRate, opacity: v11, shadow: e6.options.shadow, transform: B4 }), this._applyPostDrawUpdaters(e6);
    });
  }
  drawParticlePlugin(e6, i8, o7) {
    this.draw((r8) => nr(r8, e6, i8, o7));
  }
  drawPlugin(e6, i8) {
    this.draw((o7) => sr(o7, e6, i8));
  }
  async init() {
    this._safeMutationObserver((e6) => e6.disconnect()), this._mutationObserver = Go((e6) => {
      for (let i8 of e6) i8.type === "attributes" && i8.attributeName === "style" && this._repairStyle();
    }), this.resize(), this._initStyle(), await this._initCover();
    try {
      await this._initTrail();
    } catch (e6) {
      K2().error(e6);
    }
    this.initBackground(), this._safeMutationObserver((e6) => {
      !this.element || !(this.element instanceof Node) || e6.observe(this.element, { attributes: true });
    }), this.initUpdaters(), this.initPlugins(), this.paint();
  }
  initBackground() {
    let e6 = this.container.actualOptions, i8 = e6.background, o7 = this.element;
    if (!o7) return;
    let r8 = o7.style;
    if (r8) {
      if (i8.color) {
        let s17 = Q2(this._engine, i8.color);
        r8.backgroundColor = s17 ? Se2(s17, i8.opacity) : "";
      } else r8.backgroundColor = "";
      r8.backgroundImage = i8.image || "", r8.backgroundPosition = i8.position || "", r8.backgroundRepeat = i8.repeat || "", r8.backgroundSize = i8.size || "";
    }
  }
  initPlugins() {
    this._resizePlugins = [];
    for (let e6 of this.container.plugins.values()) e6.resize && this._resizePlugins.push(e6), (e6.particleFillColor ?? e6.particleStrokeColor) && this._colorPlugins.push(e6);
  }
  initUpdaters() {
    this._preDrawUpdaters = [], this._postDrawUpdaters = [];
    for (let e6 of this.container.particles.updaters) e6.afterDraw && this._postDrawUpdaters.push(e6), (e6.getColorStyles ?? e6.getTransformValues ?? e6.beforeDraw) && this._preDrawUpdaters.push(e6);
  }
  loadCanvas(e6) {
    this._generated && this.element && this.element.remove(), this._generated = e6.dataset && Y2 in e6.dataset ? e6.dataset[Y2] === "true" : this._generated, this.element = e6, this.element.ariaHidden = "true", this._originalStyle = jo(this.element.style);
    let i8 = this._standardSize;
    i8.height = e6.offsetHeight, i8.width = e6.offsetWidth;
    let o7 = this.container.retina.pixelRatio, r8 = this.size;
    e6.height = r8.height = i8.height * o7, e6.width = r8.width = i8.width * o7, this._context = this.element.getContext("2d"), this._safeMutationObserver((s17) => s17.disconnect()), this.container.retina.init(), this.initBackground(), this._safeMutationObserver((s17) => {
      !this.element || !(this.element instanceof Node) || s17.observe(this.element, { attributes: true });
    });
  }
  paint() {
    let e6 = this.container.actualOptions;
    this.draw((i8) => {
      e6.backgroundMask.enable && e6.backgroundMask.cover ? (dt2(i8, this.size), this._coverImage ? this._paintImage(this._coverImage.image, this._coverImage.opacity) : this._coverColorStyle ? this._paintBase(this._coverColorStyle) : this._paintBase()) : this._paintBase();
    });
  }
  resize() {
    if (!this.element) return false;
    let e6 = this.container, i8 = e6.canvas._standardSize, o7 = { width: this.element.offsetWidth, height: this.element.offsetHeight }, r8 = e6.retina.pixelRatio, s17 = { width: o7.width * r8, height: o7.height * r8 };
    if (o7.height === i8.height && o7.width === i8.width && s17.height === this.element.height && s17.width === this.element.width) return false;
    let n12 = { ...i8 };
    i8.height = o7.height, i8.width = o7.width;
    let a7 = this.size;
    return this.element.width = a7.width = s17.width, this.element.height = a7.height = s17.height, this.container.started && e6.particles.setResizeFactor({ width: i8.width / n12.width, height: i8.height / n12.height }), true;
  }
  stop() {
    this._safeMutationObserver((e6) => e6.disconnect()), this._mutationObserver = void 0, this.draw((e6) => dt2(e6, this.size));
  }
  async windowResize() {
    if (!this.element || !this.resize()) return;
    let e6 = this.container, i8 = e6.updateActualOptions();
    e6.particles.setDensity(), this._applyResizePlugins(), i8 && await e6.refresh();
  }
};
var le2;
(function(t82) {
  t82.canvas = "canvas", t82.parent = "parent", t82.window = "window";
})(le2 || (le2 = {}));
function q2(t82, e6, i8, o7, r8) {
  if (o7) {
    let s17 = { passive: true };
    st2(r8) ? s17.capture = r8 : r8 !== void 0 && (s17 = r8), t82.addEventListener(e6, i8, s17);
  } else {
    let s17 = r8;
    t82.removeEventListener(e6, i8, s17);
  }
}
var gt2 = class {
  constructor(e6) {
    this.container = e6, this._doMouseTouchClick = (i8) => {
      let o7 = this.container, r8 = o7.actualOptions;
      if (this._canPush) {
        let s17 = o7.interactivity.mouse, n12 = s17.position;
        if (!n12) return;
        s17.clickPosition = { ...n12 }, s17.clickTime = (/* @__PURE__ */ new Date()).getTime();
        let a7 = r8.interactivity.events.onClick;
        A2(a7.mode, (c14) => this.container.handleClickMode(c14));
      }
      i8.type === "touchend" && setTimeout(() => this._mouseTouchFinish(), Do);
    }, this._handleThemeChange = (i8) => {
      let o7 = i8, r8 = this.container, s17 = r8.options, n12 = s17.defaultThemes, a7 = o7.matches ? n12.dark : n12.light;
      s17.themes.find((l16) => l16.name === a7)?.default.auto && r8.loadTheme(a7);
    }, this._handleVisibilityChange = () => {
      let i8 = this.container, o7 = i8.actualOptions;
      this._mouseTouchFinish(), o7.pauseOnBlur && (document?.hidden ? (i8.pageHidden = true, i8.pause()) : (i8.pageHidden = false, i8.animationStatus ? i8.play(true) : i8.draw(true)));
    }, this._handleWindowResize = () => {
      this._resizeTimeout && (clearTimeout(this._resizeTimeout), delete this._resizeTimeout);
      let i8 = async () => {
        await this.container.canvas?.windowResize();
      };
      this._resizeTimeout = setTimeout(() => void i8(), this.container.actualOptions.interactivity.events.resize.delay * 1e3);
    }, this._manageInteractivityListeners = (i8, o7) => {
      let r8 = this._handlers, s17 = this.container, n12 = s17.actualOptions, a7 = s17.interactivity.element;
      if (!a7) return;
      let c14 = a7, l16 = s17.canvas.element;
      l16 && (l16.style.pointerEvents = c14 === l16 ? "initial" : "none"), (n12.interactivity.events.onHover.enable || n12.interactivity.events.onClick.enable) && (q2(a7, yi2, r8.mouseMove, o7), q2(a7, Ki, r8.touchStart, o7), q2(a7, eo, r8.touchMove, o7), n12.interactivity.events.onClick.enable ? (q2(a7, vi, r8.touchEndClick, o7), q2(a7, ji, r8.mouseUp, o7), q2(a7, Zi, r8.mouseDown, o7)) : q2(a7, vi, r8.touchEnd, o7), q2(a7, i8, r8.mouseLeave, o7), q2(a7, to, r8.touchCancel, o7));
    }, this._manageListeners = (i8) => {
      let o7 = this._handlers, r8 = this.container, s17 = r8.actualOptions, n12 = s17.interactivity.detectsOn, a7 = r8.canvas.element, c14 = gi2;
      n12 === le2.window ? (r8.interactivity.element = window, c14 = Ji) : n12 === le2.parent && a7 ? r8.interactivity.element = a7.parentElement ?? a7.parentNode : r8.interactivity.element = a7, this._manageMediaMatch(i8), this._manageResize(i8), this._manageInteractivityListeners(c14, i8), document && q2(document, oo, o7.visibilityChange, i8, false);
    }, this._manageMediaMatch = (i8) => {
      let o7 = this._handlers, r8 = ct2("(prefers-color-scheme: dark)");
      if (r8) {
        if (r8.addEventListener !== void 0) {
          q2(r8, "change", o7.themeChange, i8);
          return;
        }
        r8.addListener !== void 0 && (i8 ? r8.addListener(o7.oldThemeChange) : r8.removeListener(o7.oldThemeChange));
      }
    }, this._manageResize = (i8) => {
      let o7 = this._handlers, r8 = this.container;
      if (!r8.actualOptions.interactivity.events.resize) return;
      if (typeof ResizeObserver > "u") {
        q2(window, io, o7.resize, i8);
        return;
      }
      let n12 = r8.canvas.element;
      this._resizeObserver && !i8 ? (n12 && this._resizeObserver.unobserve(n12), this._resizeObserver.disconnect(), delete this._resizeObserver) : !this._resizeObserver && i8 && n12 && (this._resizeObserver = new ResizeObserver((a7) => {
        a7.find((l16) => l16.target === n12) && this._handleWindowResize();
      }), this._resizeObserver.observe(n12));
    }, this._mouseDown = () => {
      let { interactivity: i8 } = this.container;
      if (!i8) return;
      let { mouse: o7 } = i8;
      o7.clicking = true, o7.downPosition = o7.position;
    }, this._mouseTouchClick = (i8) => {
      let o7 = this.container, r8 = o7.actualOptions, { mouse: s17 } = o7.interactivity;
      s17.inside = true;
      let n12 = false, a7 = s17.position;
      if (!(!a7 || !r8.interactivity.events.onClick.enable)) {
        for (let c14 of o7.plugins.values()) if (c14.clickPositionValid && (n12 = c14.clickPositionValid(a7), n12)) break;
        n12 || this._doMouseTouchClick(i8), s17.clicking = false;
      }
    }, this._mouseTouchFinish = () => {
      let i8 = this.container.interactivity;
      if (!i8) return;
      let o7 = i8.mouse;
      delete o7.position, delete o7.clickPosition, delete o7.downPosition, i8.status = gi2, o7.inside = false, o7.clicking = false;
    }, this._mouseTouchMove = (i8) => {
      let o7 = this.container, r8 = o7.actualOptions, s17 = o7.interactivity, n12 = o7.canvas.element;
      if (!s17?.element) return;
      s17.mouse.inside = true;
      let a7;
      if (i8.type.startsWith("pointer")) {
        this._canPush = true;
        let l16 = i8;
        if (s17.element === window) {
          if (n12) {
            let u11 = n12.getBoundingClientRect();
            a7 = { x: l16.clientX - u11.left, y: l16.clientY - u11.top };
          }
        } else if (r8.interactivity.detectsOn === le2.parent) {
          let u11 = l16.target, f11 = l16.currentTarget;
          if (u11 && f11 && n12) {
            let p15 = u11.getBoundingClientRect(), m11 = f11.getBoundingClientRect(), d16 = n12.getBoundingClientRect();
            a7 = { x: l16.offsetX + M2 * p15.left - (m11.left + d16.left), y: l16.offsetY + M2 * p15.top - (m11.top + d16.top) };
          } else a7 = { x: l16.offsetX ?? l16.clientX, y: l16.offsetY ?? l16.clientY };
        } else l16.target === n12 && (a7 = { x: l16.offsetX ?? l16.clientX, y: l16.offsetY ?? l16.clientY });
      } else if (this._canPush = i8.type !== "touchmove", n12) {
        let l16 = i8, u11 = l16.touches[l16.touches.length - it2], f11 = n12.getBoundingClientRect();
        a7 = { x: u11.clientX - (f11.left ?? be2), y: u11.clientY - (f11.top ?? be2) };
      }
      let c14 = o7.retina.pixelRatio;
      a7 && (a7.x *= c14, a7.y *= c14), s17.mouse.position = a7, s17.status = yi2;
    }, this._touchEnd = (i8) => {
      let o7 = i8, r8 = Array.from(o7.changedTouches);
      for (let s17 of r8) this._touches.delete(s17.identifier);
      this._mouseTouchFinish();
    }, this._touchEndClick = (i8) => {
      let o7 = i8, r8 = Array.from(o7.changedTouches);
      for (let s17 of r8) this._touches.delete(s17.identifier);
      this._mouseTouchClick(i8);
    }, this._touchStart = (i8) => {
      let o7 = i8, r8 = Array.from(o7.changedTouches);
      for (let s17 of r8) this._touches.set(s17.identifier, performance.now());
      this._mouseTouchMove(i8);
    }, this._canPush = true, this._touches = /* @__PURE__ */ new Map(), this._handlers = { mouseDown: () => this._mouseDown(), mouseLeave: () => this._mouseTouchFinish(), mouseMove: (i8) => this._mouseTouchMove(i8), mouseUp: (i8) => this._mouseTouchClick(i8), touchStart: (i8) => this._touchStart(i8), touchMove: (i8) => this._mouseTouchMove(i8), touchEnd: (i8) => this._touchEnd(i8), touchCancel: (i8) => this._touchEnd(i8), touchEndClick: (i8) => this._touchEndClick(i8), visibilityChange: () => this._handleVisibilityChange(), themeChange: (i8) => this._handleThemeChange(i8), oldThemeChange: (i8) => this._handleThemeChange(i8), resize: () => {
      this._handleWindowResize();
    } };
  }
  addListeners() {
    this._manageListeners(true);
  }
  removeListeners() {
    this._manageListeners(false);
  }
};
var P2;
(function(t82) {
  t82.configAdded = "configAdded", t82.containerInit = "containerInit", t82.particlesSetup = "particlesSetup", t82.containerStarted = "containerStarted", t82.containerStopped = "containerStopped", t82.containerDestroyed = "containerDestroyed", t82.containerPaused = "containerPaused", t82.containerPlay = "containerPlay", t82.containerBuilt = "containerBuilt", t82.particleAdded = "particleAdded", t82.particleDestroyed = "particleDestroyed", t82.particleRemoved = "particleRemoved";
})(P2 || (P2 = {}));
var T2 = class t3 {
  constructor() {
    this.value = "";
  }
  static create(e6, i8) {
    let o7 = new t3();
    return o7.load(e6), i8 !== void 0 && (H2(i8) || E2(i8) ? o7.load({ value: i8 }) : o7.load(i8)), o7;
  }
  load(e6) {
    h2(e6) || h2(e6.value) || (this.value = e6.value);
  }
};
var yt2 = class {
  constructor() {
    this.color = new T2(), this.color.value = "", this.image = "", this.position = "", this.repeat = "", this.size = "", this.opacity = 1;
  }
  load(e6) {
    h2(e6) || (e6.color !== void 0 && (this.color = T2.create(this.color, e6.color)), e6.image !== void 0 && (this.image = e6.image), e6.position !== void 0 && (this.position = e6.position), e6.repeat !== void 0 && (this.repeat = e6.repeat), e6.size !== void 0 && (this.size = e6.size), e6.opacity !== void 0 && (this.opacity = e6.opacity));
  }
};
var vt2 = class {
  constructor() {
    this.opacity = 1;
  }
  load(e6) {
    h2(e6) || (e6.color !== void 0 && (this.color = T2.create(this.color, e6.color)), e6.image !== void 0 && (this.image = e6.image), e6.opacity !== void 0 && (this.opacity = e6.opacity));
  }
};
var _t2 = class {
  constructor() {
    this.composite = "destination-out", this.cover = new vt2(), this.enable = false;
  }
  load(e6) {
    if (!h2(e6)) {
      if (e6.composite !== void 0 && (this.composite = e6.composite), e6.cover !== void 0) {
        let i8 = e6.cover, o7 = H2(e6.cover) ? { color: e6.cover } : e6.cover;
        this.cover.load(i8.color !== void 0 || i8.image !== void 0 ? i8 : { color: o7 });
      }
      e6.enable !== void 0 && (this.enable = e6.enable);
    }
  }
};
var wt2 = class {
  constructor() {
    this.enable = true, this.zIndex = 0;
  }
  load(e6) {
    h2(e6) || (e6.enable !== void 0 && (this.enable = e6.enable), e6.zIndex !== void 0 && (this.zIndex = e6.zIndex));
  }
};
var bt2 = class {
  constructor() {
    this.enable = false, this.mode = [];
  }
  load(e6) {
    h2(e6) || (e6.enable !== void 0 && (this.enable = e6.enable), e6.mode !== void 0 && (this.mode = e6.mode));
  }
};
var Mt;
(function(t82) {
  t82.circle = "circle", t82.rectangle = "rectangle";
})(Mt || (Mt = {}));
var We2 = class {
  constructor() {
    this.selectors = [], this.enable = false, this.mode = [], this.type = Mt.circle;
  }
  load(e6) {
    h2(e6) || (e6.selectors !== void 0 && (this.selectors = e6.selectors), e6.enable !== void 0 && (this.enable = e6.enable), e6.mode !== void 0 && (this.mode = e6.mode), e6.type !== void 0 && (this.type = e6.type));
  }
};
var zt2 = class {
  constructor() {
    this.enable = false, this.force = 2, this.smooth = 10;
  }
  load(e6) {
    h2(e6) || (e6.enable !== void 0 && (this.enable = e6.enable), e6.force !== void 0 && (this.force = e6.force), e6.smooth !== void 0 && (this.smooth = e6.smooth));
  }
};
var Ot = class {
  constructor() {
    this.enable = false, this.mode = [], this.parallax = new zt2();
  }
  load(e6) {
    h2(e6) || (e6.enable !== void 0 && (this.enable = e6.enable), e6.mode !== void 0 && (this.mode = e6.mode), this.parallax.load(e6.parallax));
  }
};
var Pt2 = class {
  constructor() {
    this.delay = 0.5, this.enable = true;
  }
  load(e6) {
    h2(e6) || (e6.delay !== void 0 && (this.delay = e6.delay), e6.enable !== void 0 && (this.enable = e6.enable));
  }
};
var Rt2 = class {
  constructor() {
    this.onClick = new bt2(), this.onDiv = new We2(), this.onHover = new Ot(), this.resize = new Pt2();
  }
  load(e6) {
    if (h2(e6)) return;
    this.onClick.load(e6.onClick);
    let i8 = e6.onDiv;
    i8 !== void 0 && (this.onDiv = A2(i8, (o7) => {
      let r8 = new We2();
      return r8.load(o7), r8;
    })), this.onHover.load(e6.onHover), this.resize.load(e6.resize);
  }
};
var St = class {
  constructor(e6, i8) {
    this._engine = e6, this._container = i8;
  }
  load(e6) {
    if (h2(e6) || !this._container) return;
    let i8 = this._engine.interactors.get(this._container);
    if (i8) for (let o7 of i8) o7.loadModeOptions && o7.loadModeOptions(this, e6);
  }
};
var ke2 = class {
  constructor(e6, i8) {
    this.detectsOn = le2.window, this.events = new Rt2(), this.modes = new St(e6, i8);
  }
  load(e6) {
    if (h2(e6)) return;
    let i8 = e6.detectsOn;
    i8 !== void 0 && (this.detectsOn = i8), this.events.load(e6.events), this.modes.load(e6.modes);
  }
};
var kt2 = class {
  load(e6) {
    h2(e6) || (e6.position && (this.position = { x: e6.position.x ?? Fi2, y: e6.position.y ?? Fi2, mode: e6.position.mode ?? $2.percent }), e6.options && (this.options = _({}, e6.options)));
  }
};
var ee2;
(function(t82) {
  t82.screen = "screen", t82.canvas = "canvas";
})(ee2 || (ee2 = {}));
var Dt2 = class {
  constructor() {
    this.maxWidth = 1 / 0, this.options = {}, this.mode = ee2.canvas;
  }
  load(e6) {
    h2(e6) || (h2(e6.maxWidth) || (this.maxWidth = e6.maxWidth), h2(e6.mode) || (e6.mode === ee2.screen ? this.mode = ee2.screen : this.mode = ee2.canvas), h2(e6.options) || (this.options = _({}, e6.options)));
  }
};
var X2;
(function(t82) {
  t82.any = "any", t82.dark = "dark", t82.light = "light";
})(X2 || (X2 = {}));
var Ct2 = class {
  constructor() {
    this.auto = false, this.mode = X2.any, this.value = false;
  }
  load(e6) {
    h2(e6) || (e6.auto !== void 0 && (this.auto = e6.auto), e6.mode !== void 0 && (this.mode = e6.mode), e6.value !== void 0 && (this.value = e6.value));
  }
};
var It2 = class {
  constructor() {
    this.name = "", this.default = new Ct2();
  }
  load(e6) {
    h2(e6) || (e6.name !== void 0 && (this.name = e6.name), this.default.load(e6.default), e6.options !== void 0 && (this.options = _({}, e6.options)));
  }
};
var ge2 = class {
  constructor() {
    this.count = 0, this.enable = false, this.speed = 1, this.decay = 0, this.delay = 0, this.sync = false;
  }
  load(e6) {
    h2(e6) || (e6.count !== void 0 && (this.count = x2(e6.count)), e6.enable !== void 0 && (this.enable = e6.enable), e6.speed !== void 0 && (this.speed = x2(e6.speed)), e6.decay !== void 0 && (this.decay = x2(e6.decay)), e6.delay !== void 0 && (this.delay = x2(e6.delay)), e6.sync !== void 0 && (this.sync = e6.sync));
  }
};
var ce2 = class extends ge2 {
  constructor() {
    super(), this.mode = j2.auto, this.startValue = ae2.random;
  }
  load(e6) {
    super.load(e6), !h2(e6) && (e6.mode !== void 0 && (this.mode = e6.mode), e6.startValue !== void 0 && (this.startValue = e6.startValue));
  }
};
var De2 = class extends ge2 {
  constructor() {
    super(), this.offset = 0, this.sync = true;
  }
  load(e6) {
    super.load(e6), !h2(e6) && e6.offset !== void 0 && (this.offset = x2(e6.offset));
  }
};
var Tt2 = class {
  constructor() {
    this.h = new De2(), this.s = new De2(), this.l = new De2();
  }
  load(e6) {
    h2(e6) || (this.h.load(e6.h), this.s.load(e6.s), this.l.load(e6.l));
  }
};
var ye2 = class t4 extends T2 {
  constructor() {
    super(), this.animation = new Tt2();
  }
  static create(e6, i8) {
    let o7 = new t4();
    return o7.load(e6), i8 !== void 0 && (H2(i8) || E2(i8) ? o7.load({ value: i8 }) : o7.load(i8)), o7;
  }
  load(e6) {
    if (super.load(e6), h2(e6)) return;
    let i8 = e6.animation;
    i8 !== void 0 && (i8.enable !== void 0 ? this.animation.h.load(i8) : this.animation.load(e6.animation));
  }
};
var Ft;
(function(t82) {
  t82.absorb = "absorb", t82.bounce = "bounce", t82.destroy = "destroy";
})(Ft || (Ft = {}));
var Et2 = class {
  constructor() {
    this.speed = 2;
  }
  load(e6) {
    h2(e6) || e6.speed !== void 0 && (this.speed = e6.speed);
  }
};
var Lt2 = class {
  constructor() {
    this.enable = true, this.retries = 0;
  }
  load(e6) {
    h2(e6) || (e6.enable !== void 0 && (this.enable = e6.enable), e6.retries !== void 0 && (this.retries = e6.retries));
  }
};
var te2 = class {
  constructor() {
    this.value = 0;
  }
  load(e6) {
    h2(e6) || h2(e6.value) || (this.value = x2(e6.value));
  }
};
var Gi = class extends te2 {
  constructor() {
    super(), this.animation = new ge2();
  }
  load(e6) {
    if (super.load(e6), h2(e6)) return;
    let i8 = e6.animation;
    i8 !== void 0 && this.animation.load(i8);
  }
};
var Ce2 = class extends Gi {
  constructor() {
    super(), this.animation = new ce2();
  }
  load(e6) {
    super.load(e6);
  }
};
var Ue2 = class extends te2 {
  constructor() {
    super(), this.value = 1;
  }
};
var Ie2 = class {
  constructor() {
    this.horizontal = new Ue2(), this.vertical = new Ue2();
  }
  load(e6) {
    h2(e6) || (this.horizontal.load(e6.horizontal), this.vertical.load(e6.vertical));
  }
};
var At2 = class {
  constructor() {
    this.absorb = new Et2(), this.bounce = new Ie2(), this.enable = false, this.maxSpeed = 50, this.mode = Ft.bounce, this.overlap = new Lt2();
  }
  load(e6) {
    h2(e6) || (this.absorb.load(e6.absorb), this.bounce.load(e6.bounce), e6.enable !== void 0 && (this.enable = e6.enable), e6.maxSpeed !== void 0 && (this.maxSpeed = x2(e6.maxSpeed)), e6.mode !== void 0 && (this.mode = e6.mode), this.overlap.load(e6.overlap));
  }
};
var Nt2 = class {
  constructor() {
    this.close = true, this.fill = true, this.options = {}, this.type = [];
  }
  load(e6) {
    if (h2(e6)) return;
    let i8 = e6.options;
    if (i8 !== void 0) for (let o7 in i8) {
      let r8 = i8[o7];
      r8 && (this.options[o7] = _(this.options[o7] ?? {}, r8));
    }
    e6.close !== void 0 && (this.close = e6.close), e6.fill !== void 0 && (this.fill = e6.fill), e6.type !== void 0 && (this.type = e6.type);
  }
};
var Vt2 = class {
  constructor() {
    this.offset = 0, this.value = 90;
  }
  load(e6) {
    h2(e6) || (e6.offset !== void 0 && (this.offset = x2(e6.offset)), e6.value !== void 0 && (this.value = x2(e6.value)));
  }
};
var Ht2 = class {
  constructor() {
    this.distance = 200, this.enable = false, this.rotate = { x: 3e3, y: 3e3 };
  }
  load(e6) {
    if (!h2(e6) && (e6.distance !== void 0 && (this.distance = x2(e6.distance)), e6.enable !== void 0 && (this.enable = e6.enable), e6.rotate)) {
      let i8 = e6.rotate.x;
      i8 !== void 0 && (this.rotate.x = i8);
      let o7 = e6.rotate.y;
      o7 !== void 0 && (this.rotate.y = o7);
    }
  }
};
var qt = class {
  constructor() {
    this.x = 50, this.y = 50, this.mode = $2.percent, this.radius = 0;
  }
  load(e6) {
    h2(e6) || (e6.x !== void 0 && (this.x = e6.x), e6.y !== void 0 && (this.y = e6.y), e6.mode !== void 0 && (this.mode = e6.mode), e6.radius !== void 0 && (this.radius = e6.radius));
  }
};
var Bt2 = class {
  constructor() {
    this.acceleration = 9.81, this.enable = false, this.inverse = false, this.maxSpeed = 50;
  }
  load(e6) {
    h2(e6) || (e6.acceleration !== void 0 && (this.acceleration = x2(e6.acceleration)), e6.enable !== void 0 && (this.enable = e6.enable), e6.inverse !== void 0 && (this.inverse = e6.inverse), e6.maxSpeed !== void 0 && (this.maxSpeed = x2(e6.maxSpeed)));
  }
};
var Wt2 = class {
  constructor() {
    this.clamp = true, this.delay = new te2(), this.enable = false, this.options = {};
  }
  load(e6) {
    h2(e6) || (e6.clamp !== void 0 && (this.clamp = e6.clamp), this.delay.load(e6.delay), e6.enable !== void 0 && (this.enable = e6.enable), this.generator = e6.generator, e6.options && (this.options = _(this.options, e6.options)));
  }
};
var Ut2 = class {
  load(e6) {
    h2(e6) || (e6.color !== void 0 && (this.color = T2.create(this.color, e6.color)), e6.image !== void 0 && (this.image = e6.image));
  }
};
var $t2 = class {
  constructor() {
    this.enable = false, this.length = 10, this.fill = new Ut2();
  }
  load(e6) {
    h2(e6) || (e6.enable !== void 0 && (this.enable = e6.enable), e6.fill !== void 0 && this.fill.load(e6.fill), e6.length !== void 0 && (this.length = e6.length));
  }
};
var ve2;
(function(t82) {
  t82.bounce = "bounce", t82.none = "none", t82.out = "out", t82.destroy = "destroy", t82.split = "split";
})(ve2 || (ve2 = {}));
var Gt2 = class {
  constructor() {
    this.default = ve2.out;
  }
  load(e6) {
    h2(e6) || (e6.default !== void 0 && (this.default = e6.default), this.bottom = e6.bottom ?? e6.default, this.left = e6.left ?? e6.default, this.right = e6.right ?? e6.default, this.top = e6.top ?? e6.default);
  }
};
var Qt2 = class {
  constructor() {
    this.acceleration = 0, this.enable = false;
  }
  load(e6) {
    h2(e6) || (e6.acceleration !== void 0 && (this.acceleration = x2(e6.acceleration)), e6.enable !== void 0 && (this.enable = e6.enable), e6.position && (this.position = _({}, e6.position)));
  }
};
var Xt2 = class {
  constructor() {
    this.angle = new Vt2(), this.attract = new Ht2(), this.center = new qt(), this.decay = 0, this.distance = {}, this.direction = z2.none, this.drift = 0, this.enable = false, this.gravity = new Bt2(), this.path = new Wt2(), this.outModes = new Gt2(), this.random = false, this.size = false, this.speed = 2, this.spin = new Qt2(), this.straight = false, this.trail = new $t2(), this.vibrate = false, this.warp = false;
  }
  load(e6) {
    if (h2(e6)) return;
    this.angle.load(W2(e6.angle) ? { value: e6.angle } : e6.angle), this.attract.load(e6.attract), this.center.load(e6.center), e6.decay !== void 0 && (this.decay = x2(e6.decay)), e6.direction !== void 0 && (this.direction = e6.direction), e6.distance !== void 0 && (this.distance = W2(e6.distance) ? { horizontal: e6.distance, vertical: e6.distance } : { ...e6.distance }), e6.drift !== void 0 && (this.drift = x2(e6.drift)), e6.enable !== void 0 && (this.enable = e6.enable), this.gravity.load(e6.gravity);
    let i8 = e6.outModes;
    i8 !== void 0 && (pe2(i8) ? this.outModes.load(i8) : this.outModes.load({ default: i8 })), this.path.load(e6.path), e6.random !== void 0 && (this.random = e6.random), e6.size !== void 0 && (this.size = e6.size), e6.speed !== void 0 && (this.speed = x2(e6.speed)), this.spin.load(e6.spin), e6.straight !== void 0 && (this.straight = e6.straight), this.trail.load(e6.trail), e6.vibrate !== void 0 && (this.vibrate = e6.vibrate), e6.warp !== void 0 && (this.warp = e6.warp);
  }
};
var Yt2 = class extends ce2 {
  constructor() {
    super(), this.destroy = J2.none, this.speed = 2;
  }
  load(e6) {
    super.load(e6), !h2(e6) && e6.destroy !== void 0 && (this.destroy = e6.destroy);
  }
};
var Zt2 = class extends Ce2 {
  constructor() {
    super(), this.animation = new Yt2(), this.value = 1;
  }
  load(e6) {
    if (h2(e6)) return;
    super.load(e6);
    let i8 = e6.animation;
    i8 !== void 0 && this.animation.load(i8);
  }
};
var jt2 = class {
  constructor() {
    this.enable = false, this.width = 1920, this.height = 1080;
  }
  load(e6) {
    if (h2(e6)) return;
    e6.enable !== void 0 && (this.enable = e6.enable);
    let i8 = e6.width;
    i8 !== void 0 && (this.width = i8);
    let o7 = e6.height;
    o7 !== void 0 && (this.height = o7);
  }
};
var _e2;
(function(t82) {
  t82.delete = "delete", t82.wait = "wait";
})(_e2 || (_e2 = {}));
var Jt2 = class {
  constructor() {
    this.mode = _e2.delete, this.value = 0;
  }
  load(e6) {
    h2(e6) || (e6.mode !== void 0 && (this.mode = e6.mode), e6.value !== void 0 && (this.value = e6.value));
  }
};
var Kt2 = class {
  constructor() {
    this.density = new jt2(), this.limit = new Jt2(), this.value = 0;
  }
  load(e6) {
    h2(e6) || (this.density.load(e6.density), this.limit.load(e6.limit), e6.value !== void 0 && (this.value = e6.value));
  }
};
var ei2 = class {
  constructor() {
    this.blur = 0, this.color = new T2(), this.enable = false, this.offset = { x: 0, y: 0 }, this.color.value = "#000";
  }
  load(e6) {
    h2(e6) || (e6.blur !== void 0 && (this.blur = e6.blur), this.color = T2.create(this.color, e6.color), e6.enable !== void 0 && (this.enable = e6.enable), e6.offset !== void 0 && (e6.offset.x !== void 0 && (this.offset.x = e6.offset.x), e6.offset.y !== void 0 && (this.offset.y = e6.offset.y)));
  }
};
var ti2 = class {
  constructor() {
    this.close = true, this.fill = true, this.options = {}, this.type = "circle";
  }
  load(e6) {
    if (h2(e6)) return;
    let i8 = e6.options;
    if (i8 !== void 0) for (let o7 in i8) {
      let r8 = i8[o7];
      r8 && (this.options[o7] = _(this.options[o7] ?? {}, r8));
    }
    e6.close !== void 0 && (this.close = e6.close), e6.fill !== void 0 && (this.fill = e6.fill), e6.type !== void 0 && (this.type = e6.type);
  }
};
var ii2 = class extends ce2 {
  constructor() {
    super(), this.destroy = J2.none, this.speed = 5;
  }
  load(e6) {
    super.load(e6), !h2(e6) && e6.destroy !== void 0 && (this.destroy = e6.destroy);
  }
};
var oi2 = class extends Ce2 {
  constructor() {
    super(), this.animation = new ii2(), this.value = 3;
  }
  load(e6) {
    if (super.load(e6), h2(e6)) return;
    let i8 = e6.animation;
    i8 !== void 0 && this.animation.load(i8);
  }
};
var $e2 = class {
  constructor() {
    this.width = 0;
  }
  load(e6) {
    h2(e6) || (e6.color !== void 0 && (this.color = ye2.create(this.color, e6.color)), e6.width !== void 0 && (this.width = x2(e6.width)), e6.opacity !== void 0 && (this.opacity = x2(e6.opacity)));
  }
};
var ri = class extends te2 {
  constructor() {
    super(), this.opacityRate = 1, this.sizeRate = 1, this.velocityRate = 1;
  }
  load(e6) {
    super.load(e6), !h2(e6) && (e6.opacityRate !== void 0 && (this.opacityRate = e6.opacityRate), e6.sizeRate !== void 0 && (this.sizeRate = e6.sizeRate), e6.velocityRate !== void 0 && (this.velocityRate = e6.velocityRate));
  }
};
var si = class {
  constructor(e6, i8) {
    this._engine = e6, this._container = i8, this.bounce = new Ie2(), this.collisions = new At2(), this.color = new ye2(), this.color.value = "#fff", this.effect = new Nt2(), this.groups = {}, this.move = new Xt2(), this.number = new Kt2(), this.opacity = new Zt2(), this.reduceDuplicates = false, this.shadow = new ei2(), this.shape = new ti2(), this.size = new oi2(), this.stroke = new $e2(), this.zIndex = new ri();
  }
  load(e6) {
    if (h2(e6)) return;
    if (e6.groups !== void 0) for (let o7 of Object.keys(e6.groups)) {
      if (!Object.hasOwn(e6.groups, o7)) continue;
      let r8 = e6.groups[o7];
      r8 !== void 0 && (this.groups[o7] = _(this.groups[o7] ?? {}, r8));
    }
    e6.reduceDuplicates !== void 0 && (this.reduceDuplicates = e6.reduceDuplicates), this.bounce.load(e6.bounce), this.color.load(ye2.create(this.color, e6.color)), this.effect.load(e6.effect), this.move.load(e6.move), this.number.load(e6.number), this.opacity.load(e6.opacity), this.shape.load(e6.shape), this.size.load(e6.size), this.shadow.load(e6.shadow), this.zIndex.load(e6.zIndex), this.collisions.load(e6.collisions), e6.interactivity !== void 0 && (this.interactivity = _({}, e6.interactivity));
    let i8 = e6.stroke;
    if (i8 && (this.stroke = A2(i8, (o7) => {
      let r8 = new $e2();
      return r8.load(o7), r8;
    })), this._container) {
      let o7 = this._engine.updaters.get(this._container);
      if (o7) for (let s17 of o7) s17.loadOptions && s17.loadOptions(this, e6);
      let r8 = this._engine.interactors.get(this._container);
      if (r8) for (let s17 of r8) s17.loadParticlesOptions && s17.loadParticlesOptions(this, e6);
    }
  }
};
function Qi(t82, ...e6) {
  for (let i8 of e6) t82.load(i8);
}
function ni(t82, e6, ...i8) {
  let o7 = new si(t82, e6);
  return Qi(o7, ...i8), o7;
}
var ai2 = class {
  constructor(e6, i8) {
    this._findDefaultTheme = (o7) => this.themes.find((r8) => r8.default.value && r8.default.mode === o7) ?? this.themes.find((r8) => r8.default.value && r8.default.mode === X2.any), this._importPreset = (o7) => {
      this.load(this._engine.getPreset(o7));
    }, this._engine = e6, this._container = i8, this.autoPlay = true, this.background = new yt2(), this.backgroundMask = new _t2(), this.clear = true, this.defaultThemes = {}, this.delay = 0, this.fullScreen = new wt2(), this.detectRetina = true, this.duration = 0, this.fpsLimit = 120, this.interactivity = new ke2(e6, i8), this.manualParticles = [], this.particles = ni(this._engine, this._container), this.pauseOnBlur = true, this.pauseOnOutsideViewport = true, this.responsive = [], this.smooth = false, this.style = {}, this.themes = [], this.zLayers = 100;
  }
  load(e6) {
    if (h2(e6)) return;
    e6.preset !== void 0 && A2(e6.preset, (n12) => this._importPreset(n12)), e6.autoPlay !== void 0 && (this.autoPlay = e6.autoPlay), e6.clear !== void 0 && (this.clear = e6.clear), e6.key !== void 0 && (this.key = e6.key), e6.name !== void 0 && (this.name = e6.name), e6.delay !== void 0 && (this.delay = x2(e6.delay));
    let i8 = e6.detectRetina;
    i8 !== void 0 && (this.detectRetina = i8), e6.duration !== void 0 && (this.duration = x2(e6.duration));
    let o7 = e6.fpsLimit;
    o7 !== void 0 && (this.fpsLimit = o7), e6.pauseOnBlur !== void 0 && (this.pauseOnBlur = e6.pauseOnBlur), e6.pauseOnOutsideViewport !== void 0 && (this.pauseOnOutsideViewport = e6.pauseOnOutsideViewport), e6.zLayers !== void 0 && (this.zLayers = e6.zLayers), this.background.load(e6.background);
    let r8 = e6.fullScreen;
    st2(r8) ? this.fullScreen.enable = r8 : this.fullScreen.load(r8), this.backgroundMask.load(e6.backgroundMask), this.interactivity.load(e6.interactivity), e6.manualParticles && (this.manualParticles = e6.manualParticles.map((n12) => {
      let a7 = new kt2();
      return a7.load(n12), a7;
    })), this.particles.load(e6.particles), this.style = _(this.style, e6.style), this._engine.loadOptions(this, e6), e6.smooth !== void 0 && (this.smooth = e6.smooth);
    let s17 = this._engine.interactors.get(this._container);
    if (s17) for (let n12 of s17) n12.loadOptions && n12.loadOptions(this, e6);
    if (e6.responsive !== void 0) for (let n12 of e6.responsive) {
      let a7 = new Dt2();
      a7.load(n12), this.responsive.push(a7);
    }
    if (this.responsive.sort((n12, a7) => n12.maxWidth - a7.maxWidth), e6.themes !== void 0) for (let n12 of e6.themes) {
      let a7 = this.themes.find((c14) => c14.name === n12.name);
      if (a7) a7.load(n12);
      else {
        let c14 = new It2();
        c14.load(n12), this.themes.push(c14);
      }
    }
    this.defaultThemes.dark = this._findDefaultTheme(X2.dark)?.name, this.defaultThemes.light = this._findDefaultTheme(X2.light)?.name;
  }
  setResponsive(e6, i8, o7) {
    this.load(o7);
    let r8 = this.responsive.find((s17) => s17.mode === ee2.screen && screen ? s17.maxWidth > screen.availWidth : s17.maxWidth * i8 > e6);
    return this.load(r8?.options), r8?.maxWidth;
  }
  setTheme(e6) {
    if (e6) {
      let i8 = this.themes.find((o7) => o7.name === e6);
      i8 && this.load(i8.options);
    } else {
      let i8 = ct2("(prefers-color-scheme: dark)"), o7 = i8?.matches, r8 = this._findDefaultTheme(o7 ? X2.dark : X2.light);
      r8 && this.load(r8.options);
    }
  }
};
var ie2;
(function(t82) {
  t82.external = "external", t82.particles = "particles";
})(ie2 || (ie2 = {}));
var li2 = class {
  constructor(e6, i8) {
    this.container = i8, this._engine = e6, this._interactors = [], this._externalInteractors = [], this._particleInteractors = [];
  }
  externalInteract(e6) {
    for (let i8 of this._externalInteractors) i8.isEnabled() && i8.interact(e6);
  }
  handleClickMode(e6) {
    for (let i8 of this._externalInteractors) i8.handleClickMode?.(e6);
  }
  async init() {
    this._interactors = await this._engine.getInteractors(this.container, true), this._externalInteractors = [], this._particleInteractors = [];
    for (let e6 of this._interactors) {
      switch (e6.type) {
        case ie2.external:
          this._externalInteractors.push(e6);
          break;
        case ie2.particles:
          this._particleInteractors.push(e6);
          break;
      }
      e6.init();
    }
  }
  particlesInteract(e6, i8) {
    for (let o7 of this._externalInteractors) o7.clear(e6, i8);
    for (let o7 of this._particleInteractors) o7.isEnabled(e6) && o7.interact(e6, i8);
  }
  reset(e6) {
    for (let i8 of this._externalInteractors) i8.isEnabled() && i8.reset(e6);
    for (let i8 of this._particleInteractors) i8.isEnabled(e6) && i8.reset(e6);
  }
};
var Te2;
(function(t82) {
  t82.normal = "normal", t82.inside = "inside", t82.outside = "outside";
})(Te2 || (Te2 = {}));
function Ir(t82, e6, i8, o7) {
  let r8 = e6.options[t82];
  if (r8) return _({ close: e6.close, fill: e6.fill }, G2(r8, i8, o7));
}
function Tr(t82, e6, i8, o7) {
  let r8 = e6.options[t82];
  if (r8) return _({ close: e6.close, fill: e6.fill }, G2(r8, i8, o7));
}
function cr(t82) {
  if (!ht2(t82.outMode, t82.checkModes)) return;
  let e6 = t82.radius * M2;
  t82.coord > t82.maxCoord - e6 ? t82.setCb(-t82.radius) : t82.coord < e6 && t82.setCb(t82.radius);
}
var ci2 = class {
  constructor(e6, i8) {
    this.container = i8, this._calcPosition = (o7, r8, s17, n12 = bi2) => {
      for (let d16 of o7.plugins.values()) {
        let y15 = d16.particlePosition !== void 0 ? d16.particlePosition(r8, this) : void 0;
        if (y15) return ze2.create(y15.x, y15.y, s17);
      }
      let a7 = o7.canvas.size, c14 = Vi2({ size: a7, position: r8 }), l16 = ze2.create(c14.x, c14.y, s17), u11 = this.getRadius(), f11 = this.options.move.outModes, p15 = (d16) => {
        cr({ outMode: d16, checkModes: [ve2.bounce], coord: l16.x, maxCoord: o7.canvas.size.width, setCb: (y15) => l16.x += y15, radius: u11 });
      }, m11 = (d16) => {
        cr({ outMode: d16, checkModes: [ve2.bounce], coord: l16.y, maxCoord: o7.canvas.size.height, setCb: (y15) => l16.y += y15, radius: u11 });
      };
      return p15(f11.left ?? f11.default), p15(f11.right ?? f11.default), m11(f11.top ?? f11.default), m11(f11.bottom ?? f11.default), this._checkOverlap(l16, n12) ? this._calcPosition(o7, void 0, s17, n12 + bo) : l16;
    }, this._calculateVelocity = () => {
      let o7 = Wo(this.direction), r8 = o7.copy(), s17 = this.options.move;
      if (s17.direction === z2.inside || s17.direction === z2.outside) return r8;
      let n12 = lt2(g(s17.angle.value)), a7 = lt2(g(s17.angle.offset)), c14 = { left: a7 - n12 * 0.5, right: a7 + n12 * 0.5 };
      return s17.straight || (r8.angle += U2(x2(c14.left, c14.right))), s17.random && typeof s17.speed == "number" && (r8.length *= S2()), r8;
    }, this._checkOverlap = (o7, r8 = bi2) => {
      let s17 = this.options.collisions, n12 = this.getRadius();
      if (!s17.enable) return false;
      let a7 = s17.overlap;
      if (a7.enable) return false;
      let c14 = a7.retries;
      if (c14 >= Mo && r8 > c14) throw new Error(`${V2} particle is overlapping and can't be placed`);
      return !!this.container.particles.find((l16) => Re2(o7, l16.position) < n12 + l16.getRadius());
    }, this._getRollColor = (o7) => {
      if (!o7 || !this.roll || !this.backColor && !this.roll.alter) return o7;
      let r8 = this.roll.horizontal && this.roll.vertical ? M2 * Di : Di, s17 = this.roll.horizontal ? Math.PI * 0.5 : ue2;
      return Math.floor(((this.roll.angle ?? ue2) + s17) / (Math.PI / r8)) % M2 ? this.backColor ? this.backColor : this.roll.alter ? ar(o7, this.roll.alter.type, this.roll.alter.value) : o7 : o7;
    }, this._initPosition = (o7) => {
      let r8 = this.container, s17 = g(this.options.zIndex.value);
      this.position = this._calcPosition(r8, o7, me2(s17, zo, r8.zLayers)), this.initialPosition = this.position.copy();
      let n12 = r8.canvas.size;
      switch (this.moveCenter = { ...ut2(this.options.move.center, n12), radius: this.options.move.center.radius ?? Oo, mode: this.options.move.center.mode ?? $2.percent }, this.direction = Bo(this.options.move.direction, this.position, this.moveCenter), this.options.move.direction) {
        case z2.inside:
          this.outType = Te2.inside;
          break;
        case z2.outside:
          this.outType = Te2.outside;
          break;
      }
      this.offset = Z2.origin;
    }, this._engine = e6;
  }
  destroy(e6) {
    if (this.unbreakable || this.destroyed) return;
    this.destroyed = true, this.bubble.inRange = false, this.slow.inRange = false;
    let i8 = this.container, o7 = this.pathGenerator;
    i8.shapeDrawers.get(this.shape)?.particleDestroy?.(this);
    for (let s17 of i8.plugins.values()) s17.particleDestroyed?.(this, e6);
    for (let s17 of i8.particles.updaters) s17.particleDestroyed?.(this, e6);
    o7?.reset(this), this._engine.dispatchEvent(P2.particleDestroyed, { container: this.container, data: { particle: this } });
  }
  draw(e6) {
    let i8 = this.container, o7 = i8.canvas;
    for (let r8 of i8.plugins.values()) o7.drawParticlePlugin(r8, this, e6);
    o7.drawParticle(this, e6);
  }
  getFillColor() {
    return this._getRollColor(this.bubble.color ?? $i2(this.color));
  }
  getMass() {
    return this.getRadius() ** F2 * Math.PI * 0.5;
  }
  getPosition() {
    return { x: this.position.x + this.offset.x, y: this.position.y + this.offset.y, z: this.position.z };
  }
  getRadius() {
    return this.bubble.radius ?? this.size.value;
  }
  getStrokeColor() {
    return this._getRollColor(this.bubble.color ?? $i2(this.strokeColor));
  }
  init(e6, i8, o7, r8) {
    let s17 = this.container, n12 = this._engine;
    this.id = e6, this.group = r8, this.effectClose = true, this.effectFill = true, this.shapeClose = true, this.shapeFill = true, this.pathRotation = false, this.lastPathTime = 0, this.destroyed = false, this.unbreakable = false, this.isRotating = false, this.rotation = 0, this.misplaced = false, this.retina = { maxDistance: {} }, this.outType = Te2.normal, this.ignoresResizeRatio = true;
    let a7 = s17.retina.pixelRatio, c14 = s17.actualOptions, l16 = ni(this._engine, s17, c14.particles), { reduceDuplicates: u11 } = l16, f11 = l16.effect.type, p15 = l16.shape.type;
    this.effect = G2(f11, this.id, u11), this.shape = G2(p15, this.id, u11);
    let m11 = l16.effect, d16 = l16.shape;
    if (o7) {
      if (o7.effect?.type) {
        let k14 = o7.effect.type, Ee2 = G2(k14, this.id, u11);
        Ee2 && (this.effect = Ee2, m11.load(o7.effect));
      }
      if (o7.shape?.type) {
        let k14 = o7.shape.type, Ee2 = G2(k14, this.id, u11);
        Ee2 && (this.shape = Ee2, d16.load(o7.shape));
      }
    }
    if (this.effect === re2) {
      let k14 = [...this.container.effectDrawers.keys()];
      this.effect = k14[Math.floor(Math.random() * k14.length)];
    }
    if (this.shape === re2) {
      let k14 = [...this.container.shapeDrawers.keys()];
      this.shape = k14[Math.floor(Math.random() * k14.length)];
    }
    this.effectData = Ir(this.effect, m11, this.id, u11), this.shapeData = Tr(this.shape, d16, this.id, u11), l16.load(o7);
    let y15 = this.effectData;
    y15 && l16.load(y15.particles);
    let v11 = this.shapeData;
    v11 && l16.load(v11.particles);
    let N4 = new ke2(n12, s17);
    N4.load(s17.actualOptions.interactivity), N4.load(l16.interactivity), this.interactivity = N4, this.effectFill = y15?.fill ?? l16.effect.fill, this.effectClose = y15?.close ?? l16.effect.close, this.shapeFill = v11?.fill ?? l16.shape.fill, this.shapeClose = v11?.close ?? l16.shape.close, this.options = l16;
    let B4 = this.options.move.path;
    this.pathDelay = g(B4.delay.value) * 1e3, B4.generator && (this.pathGenerator = this._engine.getPathGenerator(B4.generator), this.pathGenerator && s17.addPath(B4.generator, this.pathGenerator) && this.pathGenerator.init(s17)), s17.retina.initParticle(this), this.size = Yo(this.options.size, a7), this.bubble = { inRange: false }, this.slow = { inRange: false, factor: 1 }, this._initPosition(i8), this.initialVelocity = this._calculateVelocity(), this.velocity = this.initialVelocity.copy(), this.moveDecay = tt2 - g(this.options.move.decay);
    let C13 = s17.particles;
    C13.setLastZIndex(this.position.z), this.zIndexFactor = this.position.z / s17.zLayers, this.sides = 24;
    let fe3 = s17.effectDrawers.get(this.effect);
    fe3 || (fe3 = this._engine.getEffectDrawer(this.effect), fe3 && s17.effectDrawers.set(this.effect, fe3)), fe3?.loadEffect && fe3.loadEffect(this);
    let oe4 = s17.shapeDrawers.get(this.shape);
    oe4 || (oe4 = this._engine.getShapeDrawer(this.shape), oe4 && s17.shapeDrawers.set(this.shape, oe4)), oe4?.loadShape && oe4.loadShape(this);
    let Yi = oe4?.getSidesCount;
    Yi && (this.sides = Yi(this)), this.spawning = false, this.shadowColor = Q2(this._engine, this.options.shadow.color);
    for (let k14 of C13.updaters) k14.init(this);
    for (let k14 of C13.movers) k14.init?.(this);
    fe3?.particleInit?.(s17, this), oe4?.particleInit?.(s17, this);
    for (let k14 of s17.plugins.values()) k14.particleCreated?.(this);
  }
  isInsideCanvas() {
    let e6 = this.getRadius(), i8 = this.container.canvas.size, o7 = this.position;
    return o7.x >= -e6 && o7.y >= -e6 && o7.y <= i8.height + e6 && o7.x <= i8.width + e6;
  }
  isVisible() {
    return !this.destroyed && !this.spawning && this.isInsideCanvas();
  }
  reset() {
    for (let e6 of this.container.particles.updaters) e6.reset?.(this);
  }
};
var hi2 = class {
  constructor(e6, i8) {
    this.position = e6, this.particle = i8;
  }
};
var we2;
(function(t82) {
  t82.circle = "circle", t82.rectangle = "rectangle";
})(we2 || (we2 = {}));
var fi2 = class {
  constructor(e6, i8, o7) {
    this.position = { x: e6, y: i8 }, this.type = o7;
  }
};
var Ge2 = class t5 extends fi2 {
  constructor(e6, i8, o7) {
    super(e6, i8, we2.circle), this.radius = o7;
  }
  contains(e6) {
    return Re2(e6, this.position) <= this.radius;
  }
  intersects(e6) {
    let i8 = this.position, o7 = e6.position, r8 = { x: Math.abs(o7.x - i8.x), y: Math.abs(o7.y - i8.y) }, s17 = this.radius;
    if (e6 instanceof t5 || e6.type === we2.circle) {
      let n12 = e6, a7 = s17 + n12.radius, c14 = Math.sqrt(r8.x ** F2 + r8.y ** F2);
      return a7 > c14;
    } else if (e6 instanceof he || e6.type === we2.rectangle) {
      let n12 = e6, { width: a7, height: c14 } = n12.size;
      return Math.pow(r8.x - a7, F2) + Math.pow(r8.y - c14, F2) <= s17 ** F2 || r8.x <= s17 + a7 && r8.y <= s17 + c14 || r8.x <= a7 || r8.y <= c14;
    }
    return false;
  }
};
var he = class t6 extends fi2 {
  constructor(e6, i8, o7, r8) {
    super(e6, i8, we2.rectangle), this.size = { height: r8, width: o7 };
  }
  contains(e6) {
    let i8 = this.size.width, o7 = this.size.height, r8 = this.position;
    return e6.x >= r8.x && e6.x <= r8.x + i8 && e6.y >= r8.y && e6.y <= r8.y + o7;
  }
  intersects(e6) {
    if (e6 instanceof Ge2) return e6.intersects(this);
    let i8 = this.size.width, o7 = this.size.height, r8 = this.position, s17 = e6.position, n12 = e6 instanceof t6 ? e6.size : { width: 0, height: 0 }, a7 = n12.width, c14 = n12.height;
    return s17.x < r8.x + i8 && s17.x + a7 > r8.x && s17.y < r8.y + o7 && s17.y + c14 > r8.y;
  }
};
var Qe2 = class t7 {
  constructor(e6, i8) {
    this.rectangle = e6, this.capacity = i8, this._subdivide = () => {
      let { x: o7, y: r8 } = this.rectangle.position, { width: s17, height: n12 } = this.rectangle.size, { capacity: a7 } = this;
      for (let c14 = 0; c14 < no; c14++) {
        let l16 = c14 % M2;
        this._subs.push(new t7(new he(o7 + s17 * 0.5 * l16, r8 + n12 * 0.5 * (Math.round(c14 * 0.5) - l16), s17 * 0.5, n12 * 0.5), a7));
      }
      this._divided = true;
    }, this._points = [], this._divided = false, this._subs = [];
  }
  insert(e6) {
    return this.rectangle.contains(e6.position) ? this._points.length < this.capacity ? (this._points.push(e6), true) : (this._divided || this._subdivide(), this._subs.some((i8) => i8.insert(e6))) : false;
  }
  query(e6, i8) {
    let o7 = [];
    if (!e6.intersects(this.rectangle)) return [];
    for (let r8 of this._points) !e6.contains(r8.position) && Re2(e6.position, r8.position) > r8.particle.getRadius() && (!i8 || i8(r8.particle)) || o7.push(r8.particle);
    if (this._divided) for (let r8 of this._subs) o7.push(...r8.query(e6, i8));
    return o7;
  }
  queryCircle(e6, i8, o7) {
    return this.query(new Ge2(e6.x, e6.y, i8), o7);
  }
  queryRectangle(e6, i8, o7) {
    return this.query(new he(e6.x, e6.y, i8.width, i8.height), o7);
  }
};
var hr = (t82) => {
  let { height: e6, width: i8 } = t82;
  return new he(Ci2 * i8, Ci2 * e6, Ii2 * i8, Ii2 * e6);
};
var ui2 = class {
  constructor(e6, i8) {
    this._addToPool = (...r8) => {
      this._pool.push(...r8);
    }, this._applyDensity = (r8, s17, n12) => {
      let a7 = r8.number;
      if (!r8.number.density?.enable) {
        n12 === void 0 ? this._limit = a7.limit.value : a7.limit && this._groupLimits.set(n12, a7.limit.value);
        return;
      }
      let c14 = this._initDensityFactor(a7.density), l16 = a7.value, u11 = a7.limit.value > Ti ? a7.limit.value : l16, f11 = Math.min(l16, u11) * c14 + s17, p15 = Math.min(this.count, this.filter((m11) => m11.group === n12).length);
      n12 === void 0 ? this._limit = a7.limit.value * c14 : this._groupLimits.set(n12, a7.limit.value * c14), p15 < f11 ? this.push(Math.abs(f11 - p15), void 0, r8, n12) : p15 > f11 && this.removeQuantity(p15 - f11, n12);
    }, this._initDensityFactor = (r8) => {
      let s17 = this._container;
      if (!s17.canvas.element || !r8.enable) return ko;
      let n12 = s17.canvas.element, a7 = s17.retina.pixelRatio;
      return n12.width * n12.height / (r8.height * r8.width * a7 ** F2);
    }, this._pushParticle = (r8, s17, n12, a7) => {
      try {
        let c14 = this._pool.pop();
        c14 || (c14 = new ci2(this._engine, this._container)), c14.init(this._nextId, r8, s17, n12);
        let l16 = true;
        return a7 && (l16 = a7(c14)), l16 ? (this._array.push(c14), this._zArray.push(c14), this._nextId++, this._engine.dispatchEvent(P2.particleAdded, { container: this._container, data: { particle: c14 } }), c14) : void 0;
      } catch (c14) {
        K2().warning(`${V2} adding particle: ${c14}`);
      }
    }, this._removeParticle = (r8, s17, n12) => {
      let a7 = this._array[r8];
      if (!a7 || a7.group !== s17) return false;
      let c14 = this._zArray.indexOf(a7);
      return this._array.splice(r8, Me2), this._zArray.splice(c14, Me2), a7.destroy(n12), this._engine.dispatchEvent(P2.particleRemoved, { container: this._container, data: { particle: a7 } }), this._addToPool(a7), true;
    }, this._engine = e6, this._container = i8, this._nextId = 0, this._array = [], this._zArray = [], this._pool = [], this._limit = 0, this._groupLimits = /* @__PURE__ */ new Map(), this._needsSort = false, this._lastZIndex = 0, this._interactionManager = new li2(e6, i8), this._pluginsInitialized = false;
    let o7 = i8.canvas.size;
    this.quadTree = new Qe2(hr(o7), Mi2), this.movers = [], this.updaters = [];
  }
  get count() {
    return this._array.length;
  }
  addManualParticles() {
    let e6 = this._container;
    e6.actualOptions.manualParticles.forEach((o7) => this.addParticle(o7.position ? ut2(o7.position, e6.canvas.size) : void 0, o7.options));
  }
  addParticle(e6, i8, o7, r8) {
    let s17 = this._container.actualOptions.particles.number.limit.mode, n12 = o7 === void 0 ? this._limit : this._groupLimits.get(o7) ?? this._limit, a7 = this.count;
    if (n12 > Ti) switch (s17) {
      case _e2.delete: {
        let c14 = a7 + Po - n12;
        c14 > Ro && this.removeQuantity(c14);
        break;
      }
      case _e2.wait:
        if (a7 >= n12) return;
        break;
    }
    return this._pushParticle(e6, i8, o7, r8);
  }
  clear() {
    this._array = [], this._zArray = [], this._pluginsInitialized = false;
  }
  destroy() {
    this._array = [], this._zArray = [], this.movers = [], this.updaters = [];
  }
  draw(e6) {
    let i8 = this._container, o7 = i8.canvas;
    o7.clear(), this.update(e6);
    for (let r8 of i8.plugins.values()) o7.drawPlugin(r8, e6);
    for (let r8 of this._zArray) r8.draw(e6);
  }
  filter(e6) {
    return this._array.filter(e6);
  }
  find(e6) {
    return this._array.find(e6);
  }
  get(e6) {
    return this._array[e6];
  }
  handleClickMode(e6) {
    this._interactionManager.handleClickMode(e6);
  }
  async init() {
    let e6 = this._container, i8 = e6.actualOptions;
    this._lastZIndex = 0, this._needsSort = false, await this.initPlugins();
    let o7 = false;
    for (let r8 of e6.plugins.values()) if (o7 = r8.particlesInitialization?.() ?? o7, o7) break;
    if (this.addManualParticles(), !o7) {
      let r8 = i8.particles, s17 = r8.groups;
      for (let n12 in s17) {
        let a7 = s17[n12];
        for (let c14 = this.count, l16 = 0; l16 < a7.number?.value && c14 < r8.number.value; c14++, l16++) this.addParticle(void 0, a7, n12);
      }
      for (let n12 = this.count; n12 < r8.number.value; n12++) this.addParticle();
    }
  }
  async initPlugins() {
    if (this._pluginsInitialized) return;
    let e6 = this._container;
    this.movers = await this._engine.getMovers(e6, true), this.updaters = await this._engine.getUpdaters(e6, true), await this._interactionManager.init();
    for (let i8 of e6.pathGenerators.values()) i8.init(e6);
  }
  push(e6, i8, o7, r8) {
    for (let s17 = 0; s17 < e6; s17++) this.addParticle(i8?.position, o7, r8);
  }
  async redraw() {
    this.clear(), await this.init(), this.draw({ value: 0, factor: 0 });
  }
  remove(e6, i8, o7) {
    this.removeAt(this._array.indexOf(e6), void 0, i8, o7);
  }
  removeAt(e6, i8 = so, o7, r8) {
    if (e6 < qe2 || e6 > this.count) return;
    let s17 = 0;
    for (let n12 = e6; s17 < i8 && n12 < this.count; n12++) this._removeParticle(n12, o7, r8) && (n12--, s17++);
  }
  removeQuantity(e6, i8) {
    this.removeAt(qe2, e6, i8);
  }
  setDensity() {
    let e6 = this._container.actualOptions, i8 = e6.particles.groups;
    for (let o7 in i8) this._applyDensity(i8[o7], So, o7);
    this._applyDensity(e6.particles, e6.manualParticles.length);
  }
  setLastZIndex(e6) {
    this._lastZIndex = e6, this._needsSort = this._needsSort || this._lastZIndex < e6;
  }
  setResizeFactor(e6) {
    this._resizeFactor = e6;
  }
  update(e6) {
    let i8 = this._container, o7 = /* @__PURE__ */ new Set();
    this.quadTree = new Qe2(hr(i8.canvas.size), Mi2);
    for (let s17 of i8.pathGenerators.values()) s17.update();
    for (let s17 of i8.plugins.values()) s17.update?.(e6);
    let r8 = this._resizeFactor;
    for (let s17 of this._array) {
      r8 && !s17.ignoresResizeRatio && (s17.position.x *= r8.width, s17.position.y *= r8.height, s17.initialPosition.x *= r8.width, s17.initialPosition.y *= r8.height), s17.ignoresResizeRatio = false, this._interactionManager.reset(s17);
      for (let n12 of this._container.plugins.values()) {
        if (s17.destroyed) break;
        n12.particleUpdate?.(s17, e6);
      }
      for (let n12 of this.movers) n12.isEnabled(s17) && n12.move(s17, e6);
      if (s17.destroyed) {
        o7.add(s17);
        continue;
      }
      this.quadTree.insert(new hi2(s17.getPosition(), s17));
    }
    if (o7.size) {
      let s17 = (n12) => !o7.has(n12);
      this._array = this.filter(s17), this._zArray = this._zArray.filter(s17);
      for (let n12 of o7) this._engine.dispatchEvent(P2.particleRemoved, { container: this._container, data: { particle: n12 } });
      this._addToPool(...o7);
    }
    this._interactionManager.externalInteract(e6);
    for (let s17 of this._array) {
      for (let n12 of this.updaters) n12.update(s17, e6);
      !s17.destroyed && !s17.spawning && this._interactionManager.particlesInteract(s17, e6);
    }
    if (delete this._resizeFactor, this._needsSort) {
      let s17 = this._zArray;
      s17.sort((n12, a7) => a7.position.z - n12.position.z || n12.id - a7.id), this._lastZIndex = s17[s17.length - it2].position.z, this._needsSort = false;
    }
  }
};
var pi2 = class {
  constructor(e6) {
    this.container = e6, this.pixelRatio = zi2, this.reduceFactor = Oi2;
  }
  init() {
    let e6 = this.container, i8 = e6.actualOptions;
    this.pixelRatio = !i8.detectRetina || xe() ? zi2 : window.devicePixelRatio, this.reduceFactor = Oi2;
    let o7 = this.pixelRatio, r8 = e6.canvas;
    if (r8.element) {
      let a7 = r8.element;
      r8.size.width = a7.offsetWidth * o7, r8.size.height = a7.offsetHeight * o7;
    }
    let s17 = i8.particles, n12 = s17.move;
    this.maxSpeed = g(n12.gravity.maxSpeed) * o7, this.sizeAnimationSpeed = g(s17.size.animation.speed) * o7;
  }
  initParticle(e6) {
    let i8 = e6.options, o7 = this.pixelRatio, r8 = i8.move, s17 = r8.distance, n12 = e6.retina;
    n12.moveDrift = g(r8.drift) * o7, n12.moveSpeed = g(r8.speed) * o7, n12.sizeAnimationSpeed = g(i8.size.animation.speed) * o7;
    let a7 = n12.maxDistance;
    a7.horizontal = s17.horizontal !== void 0 ? s17.horizontal * o7 : void 0, a7.vertical = s17.vertical !== void 0 ? s17.vertical * o7 : void 0, n12.maxSpeed = g(r8.gravity.maxSpeed) * o7;
  }
};
function b(t82) {
  return t82 && !t82.destroyed;
}
function Fr(t82, e6 = Xe2, i8 = false) {
  return { value: t82, factor: i8 ? Xe2 / e6 : Xe2 * t82 / 1e3 };
}
function Fe2(t82, e6, ...i8) {
  let o7 = new ai2(t82, e6);
  return Qi(o7, ...i8), o7;
}
var mi2 = class {
  constructor(e6, i8, o7) {
    this._intersectionManager = (r8) => {
      if (!(!b(this) || !this.actualOptions.pauseOnOutsideViewport)) for (let s17 of r8) s17.target === this.interactivity.element && (s17.isIntersecting ? this.play() : this.pause());
    }, this._nextFrame = (r8) => {
      try {
        if (!this._smooth && this._lastFrameTime !== void 0 && r8 < this._lastFrameTime + 1e3 / this.fpsLimit) {
          this.draw(false);
          return;
        }
        this._lastFrameTime ??= r8;
        let s17 = Fr(r8 - this._lastFrameTime, this.fpsLimit, this._smooth);
        if (this.addLifeTime(s17.value), this._lastFrameTime = r8, s17.value > 1e3) {
          this.draw(false);
          return;
        }
        if (this.particles.draw(s17), !this.alive()) {
          this.destroy();
          return;
        }
        this.animationStatus && this.draw(false);
      } catch (s17) {
        K2().error(`${V2} in animation loop`, s17);
      }
    }, this._engine = e6, this.id = Symbol(i8), this.fpsLimit = 120, this._smooth = false, this._delay = 0, this._duration = 0, this._lifeTime = 0, this._firstStart = true, this.started = false, this.destroyed = false, this._paused = true, this._lastFrameTime = 0, this.zLayers = 100, this.pageHidden = false, this._clickHandlers = /* @__PURE__ */ new Map(), this._sourceOptions = o7, this._initialSourceOptions = o7, this.retina = new pi2(this), this.canvas = new xt2(this, this._engine), this.particles = new ui2(this._engine, this), this.pathGenerators = /* @__PURE__ */ new Map(), this.interactivity = { mouse: { clicking: false, inside: false } }, this.plugins = /* @__PURE__ */ new Map(), this.effectDrawers = /* @__PURE__ */ new Map(), this.shapeDrawers = /* @__PURE__ */ new Map(), this._options = Fe2(this._engine, this), this.actualOptions = Fe2(this._engine, this), this._eventListeners = new gt2(this), this._intersectionObserver = $o((r8) => this._intersectionManager(r8)), this._engine.dispatchEvent(P2.containerBuilt, { container: this });
  }
  get animationStatus() {
    return !this._paused && !this.pageHidden && b(this);
  }
  get options() {
    return this._options;
  }
  get sourceOptions() {
    return this._sourceOptions;
  }
  addClickHandler(e6) {
    if (!b(this)) return;
    let i8 = this.interactivity.element;
    if (!i8) return;
    let o7 = (f11, p15, m11) => {
      if (!b(this)) return;
      let d16 = this.retina.pixelRatio, y15 = { x: p15.x * d16, y: p15.y * d16 }, v11 = this.particles.quadTree.queryCircle(y15, m11 * d16);
      e6(f11, v11);
    }, r8 = (f11) => {
      if (!b(this)) return;
      let p15 = f11, m11 = { x: p15.offsetX || p15.clientX, y: p15.offsetY || p15.clientY };
      o7(f11, m11, po);
    }, s17 = () => {
      b(this) && (l16 = true, u11 = false);
    }, n12 = () => {
      b(this) && (u11 = true);
    }, a7 = (f11) => {
      if (b(this)) {
        if (l16 && !u11) {
          let p15 = f11, m11 = p15.touches[p15.touches.length - ki];
          if (!m11 && (m11 = p15.changedTouches[p15.changedTouches.length - ki], !m11)) return;
          let d16 = this.canvas.element, y15 = d16 ? d16.getBoundingClientRect() : void 0, v11 = { x: m11.clientX - (y15 ? y15.left : be2), y: m11.clientY - (y15 ? y15.top : be2) };
          o7(f11, v11, Math.max(m11.radiusX, m11.radiusY));
        }
        l16 = false, u11 = false;
      }
    }, c14 = () => {
      b(this) && (l16 = false, u11 = false);
    }, l16 = false, u11 = false;
    this._clickHandlers.set("click", r8), this._clickHandlers.set("touchstart", s17), this._clickHandlers.set("touchmove", n12), this._clickHandlers.set("touchend", a7), this._clickHandlers.set("touchcancel", c14);
    for (let [f11, p15] of this._clickHandlers) i8.addEventListener(f11, p15);
  }
  addLifeTime(e6) {
    this._lifeTime += e6;
  }
  addPath(e6, i8, o7 = false) {
    return !b(this) || !o7 && this.pathGenerators.has(e6) ? false : (this.pathGenerators.set(e6, i8), true);
  }
  alive() {
    return !this._duration || this._lifeTime <= this._duration;
  }
  clearClickHandlers() {
    if (b(this)) {
      for (let [e6, i8] of this._clickHandlers) this.interactivity.element?.removeEventListener(e6, i8);
      this._clickHandlers.clear();
    }
  }
  destroy(e6 = true) {
    if (b(this)) {
      this.stop(), this.clearClickHandlers(), this.particles.destroy(), this.canvas.destroy();
      for (let i8 of this.effectDrawers.values()) i8.destroy?.(this);
      for (let i8 of this.shapeDrawers.values()) i8.destroy?.(this);
      for (let i8 of this.effectDrawers.keys()) this.effectDrawers.delete(i8);
      for (let i8 of this.shapeDrawers.keys()) this.shapeDrawers.delete(i8);
      if (this._engine.clearPlugins(this), this.destroyed = true, e6) {
        let i8 = this._engine.items, o7 = i8.findIndex((r8) => r8 === this);
        o7 >= mo && i8.splice(o7, et2);
      }
      this._engine.dispatchEvent(P2.containerDestroyed, { container: this });
    }
  }
  draw(e6) {
    if (!b(this)) return;
    let i8 = e6, o7 = (r8) => {
      i8 && (this._lastFrameTime = void 0, i8 = false), this._nextFrame(r8);
    };
    this._drawAnimationFrame = Ho((r8) => o7(r8));
  }
  async export(e6, i8 = {}) {
    for (let o7 of this.plugins.values()) {
      if (!o7.export) continue;
      let r8 = await o7.export(e6, i8);
      if (r8.supported) return r8.blob;
    }
    K2().error(`${V2} - Export plugin with type ${e6} not found`);
  }
  handleClickMode(e6) {
    if (b(this)) {
      this.particles.handleClickMode(e6);
      for (let i8 of this.plugins.values()) i8.handleClickMode?.(e6);
    }
  }
  async init() {
    if (!b(this)) return;
    let e6 = this._engine.getSupportedEffects();
    for (let l16 of e6) {
      let u11 = this._engine.getEffectDrawer(l16);
      u11 && this.effectDrawers.set(l16, u11);
    }
    let i8 = this._engine.getSupportedShapes();
    for (let l16 of i8) {
      let u11 = this._engine.getShapeDrawer(l16);
      u11 && this.shapeDrawers.set(l16, u11);
    }
    await this.particles.initPlugins(), this._options = Fe2(this._engine, this, this._initialSourceOptions, this.sourceOptions), this.actualOptions = Fe2(this._engine, this, this._options);
    let o7 = await this._engine.getAvailablePlugins(this);
    for (let [l16, u11] of o7) this.plugins.set(l16, u11);
    this.retina.init(), await this.canvas.init(), this.updateActualOptions(), this.canvas.initBackground(), this.canvas.resize();
    let { zLayers: r8, duration: s17, delay: n12, fpsLimit: a7, smooth: c14 } = this.actualOptions;
    this.zLayers = r8, this._duration = g(s17) * 1e3, this._delay = g(n12) * 1e3, this._lifeTime = 0, this.fpsLimit = a7 > go ? a7 : xo, this._smooth = c14;
    for (let l16 of this.effectDrawers.values()) await l16.init?.(this);
    for (let l16 of this.shapeDrawers.values()) await l16.init?.(this);
    for (let l16 of this.plugins.values()) await l16.init?.();
    this._engine.dispatchEvent(P2.containerInit, { container: this }), await this.particles.init(), this.particles.setDensity();
    for (let l16 of this.plugins.values()) l16.particlesSetup?.();
    this._engine.dispatchEvent(P2.particlesSetup, { container: this });
  }
  async loadTheme(e6) {
    b(this) && (this._currentTheme = e6, await this.refresh());
  }
  pause() {
    if (b(this) && (this._drawAnimationFrame !== void 0 && (qo(this._drawAnimationFrame), delete this._drawAnimationFrame), !this._paused)) {
      for (let e6 of this.plugins.values()) e6.pause?.();
      this.pageHidden || (this._paused = true), this._engine.dispatchEvent(P2.containerPaused, { container: this });
    }
  }
  play(e6) {
    if (!b(this)) return;
    let i8 = this._paused || e6;
    if (this._firstStart && !this.actualOptions.autoPlay) {
      this._firstStart = false;
      return;
    }
    if (this._paused && (this._paused = false), i8) for (let o7 of this.plugins.values()) o7.play && o7.play();
    this._engine.dispatchEvent(P2.containerPlay, { container: this }), this.draw(i8 ?? false);
  }
  async refresh() {
    if (b(this)) return this.stop(), this.start();
  }
  async reset(e6) {
    if (b(this)) return this._initialSourceOptions = e6, this._sourceOptions = e6, this._options = Fe2(this._engine, this, this._initialSourceOptions, this.sourceOptions), this.actualOptions = Fe2(this._engine, this, this._options), this.refresh();
  }
  async start() {
    !b(this) || this.started || (await this.init(), this.started = true, await new Promise((e6) => {
      let i8 = async () => {
        this._eventListeners.addListeners(), this.interactivity.element instanceof HTMLElement && this._intersectionObserver && this._intersectionObserver.observe(this.interactivity.element);
        for (let o7 of this.plugins.values()) await o7.start?.();
        this._engine.dispatchEvent(P2.containerStarted, { container: this }), this.play(), e6();
      };
      this._delayTimeout = setTimeout(() => void i8(), this._delay);
    }));
  }
  stop() {
    if (!(!b(this) || !this.started)) {
      this._delayTimeout && (clearTimeout(this._delayTimeout), delete this._delayTimeout), this._firstStart = true, this.started = false, this._eventListeners.removeListeners(), this.pause(), this.particles.clear(), this.canvas.stop(), this.interactivity.element instanceof HTMLElement && this._intersectionObserver && this._intersectionObserver.unobserve(this.interactivity.element);
      for (let e6 of this.plugins.values()) e6.stop?.();
      for (let e6 of this.plugins.keys()) this.plugins.delete(e6);
      this._sourceOptions = this._options, this._engine.dispatchEvent(P2.containerStopped, { container: this });
    }
  }
  updateActualOptions() {
    this.actualOptions.responsive = [];
    let e6 = this.actualOptions.setResponsive(this.canvas.size.width, this.retina.pixelRatio, this._options);
    return this.actualOptions.setTheme(this._currentTheme), this._responsiveMaxWidth === e6 ? false : (this._responsiveMaxWidth = e6, true);
  }
};
var di2 = class {
  constructor() {
    this._listeners = /* @__PURE__ */ new Map();
  }
  addEventListener(e6, i8) {
    this.removeEventListener(e6, i8);
    let o7 = this._listeners.get(e6);
    o7 || (o7 = [], this._listeners.set(e6, o7)), o7.push(i8);
  }
  dispatchEvent(e6, i8) {
    this._listeners.get(e6)?.forEach((r8) => r8(i8));
  }
  hasEventListener(e6) {
    return !!this._listeners.get(e6);
  }
  removeAllEventListeners(e6) {
    e6 ? this._listeners.delete(e6) : this._listeners = /* @__PURE__ */ new Map();
  }
  removeEventListener(e6, i8) {
    let o7 = this._listeners.get(e6);
    if (!o7) return;
    let r8 = o7.length, s17 = o7.indexOf(i8);
    s17 < qe2 || (r8 === Me2 ? this._listeners.delete(e6) : o7.splice(s17, Me2));
  }
};
async function Xi(t82, e6, i8, o7 = false) {
  let r8 = e6.get(t82);
  return (!r8 || o7) && (r8 = await Promise.all([...i8.values()].map((s17) => s17(t82))), e6.set(t82, r8)), r8;
}
async function Er(t82) {
  let e6 = G2(t82.url, t82.index);
  if (!e6) return t82.fallback;
  let i8 = await fetch(e6);
  return i8.ok ? await i8.json() : (K2().error(`${V2} ${i8.status} while retrieving config file`), t82.fallback);
}
var Lr = (t82) => {
  let e6;
  if (t82 instanceof HTMLCanvasElement || t82.tagName.toLowerCase() === Ye2) e6 = t82, e6.dataset[Y2] || (e6.dataset[Y2] = wi2);
  else {
    let o7 = t82.getElementsByTagName(Ye2);
    o7.length ? (e6 = o7[yo], e6.dataset[Y2] = wi2) : (e6 = document.createElement(Ye2), e6.dataset[Y2] = _i2, t82.appendChild(e6));
  }
  let i8 = "100%";
  return e6.style.width || (e6.style.width = i8), e6.style.height || (e6.style.height = i8), e6;
};
var Ar = (t82, e6) => {
  let i8 = e6 ?? document.getElementById(t82);
  return i8 || (i8 = document.createElement("div"), i8.id = t82, i8.dataset[Y2] = _i2, document.body.append(i8), i8);
};
var xi2 = class {
  constructor() {
    this._configs = /* @__PURE__ */ new Map(), this._domArray = [], this._eventDispatcher = new di2(), this._initialized = false, this.plugins = [], this.colorManagers = /* @__PURE__ */ new Map(), this.easingFunctions = /* @__PURE__ */ new Map(), this._initializers = { interactors: /* @__PURE__ */ new Map(), movers: /* @__PURE__ */ new Map(), updaters: /* @__PURE__ */ new Map() }, this.interactors = /* @__PURE__ */ new Map(), this.movers = /* @__PURE__ */ new Map(), this.updaters = /* @__PURE__ */ new Map(), this.presets = /* @__PURE__ */ new Map(), this.effectDrawers = /* @__PURE__ */ new Map(), this.shapeDrawers = /* @__PURE__ */ new Map(), this.pathGenerators = /* @__PURE__ */ new Map();
  }
  get configs() {
    let e6 = {};
    for (let [i8, o7] of this._configs) e6[i8] = o7;
    return e6;
  }
  get items() {
    return this._domArray;
  }
  get version() {
    return "3.8.1";
  }
  async addColorManager(e6, i8 = true) {
    this.colorManagers.set(e6.key, e6), await this.refresh(i8);
  }
  addConfig(e6) {
    let i8 = e6.key ?? e6.name ?? "default";
    this._configs.set(i8, e6), this._eventDispatcher.dispatchEvent(P2.configAdded, { data: { name: i8, config: e6 } });
  }
  async addEasing(e6, i8, o7 = true) {
    this.getEasing(e6) || (this.easingFunctions.set(e6, i8), await this.refresh(o7));
  }
  async addEffect(e6, i8, o7 = true) {
    A2(e6, (r8) => {
      this.getEffectDrawer(r8) || this.effectDrawers.set(r8, i8);
    }), await this.refresh(o7);
  }
  addEventListener(e6, i8) {
    this._eventDispatcher.addEventListener(e6, i8);
  }
  async addInteractor(e6, i8, o7 = true) {
    this._initializers.interactors.set(e6, i8), await this.refresh(o7);
  }
  async addMover(e6, i8, o7 = true) {
    this._initializers.movers.set(e6, i8), await this.refresh(o7);
  }
  async addParticleUpdater(e6, i8, o7 = true) {
    this._initializers.updaters.set(e6, i8), await this.refresh(o7);
  }
  async addPathGenerator(e6, i8, o7 = true) {
    this.getPathGenerator(e6) || this.pathGenerators.set(e6, i8), await this.refresh(o7);
  }
  async addPlugin(e6, i8 = true) {
    this.getPlugin(e6.id) || this.plugins.push(e6), await this.refresh(i8);
  }
  async addPreset(e6, i8, o7 = false, r8 = true) {
    (o7 || !this.getPreset(e6)) && this.presets.set(e6, i8), await this.refresh(r8);
  }
  async addShape(e6, i8 = true) {
    for (let o7 of e6.validTypes) this.getShapeDrawer(o7) || this.shapeDrawers.set(o7, e6);
    await this.refresh(i8);
  }
  checkVersion(e6) {
    if (this.version !== e6) throw new Error(`The tsParticles version is different from the loaded plugins version. Engine version: ${this.version}. Plugin version: ${e6}`);
  }
  clearPlugins(e6) {
    this.updaters.delete(e6), this.movers.delete(e6), this.interactors.delete(e6);
  }
  dispatchEvent(e6, i8) {
    this._eventDispatcher.dispatchEvent(e6, i8);
  }
  dom() {
    return this.items;
  }
  domItem(e6) {
    return this.item(e6);
  }
  async getAvailablePlugins(e6) {
    let i8 = /* @__PURE__ */ new Map();
    for (let o7 of this.plugins) o7.needsPlugin(e6.actualOptions) && i8.set(o7.id, await o7.getPlugin(e6));
    return i8;
  }
  getEasing(e6) {
    return this.easingFunctions.get(e6) ?? ((i8) => i8);
  }
  getEffectDrawer(e6) {
    return this.effectDrawers.get(e6);
  }
  async getInteractors(e6, i8 = false) {
    return Xi(e6, this.interactors, this._initializers.interactors, i8);
  }
  async getMovers(e6, i8 = false) {
    return Xi(e6, this.movers, this._initializers.movers, i8);
  }
  getPathGenerator(e6) {
    return this.pathGenerators.get(e6);
  }
  getPlugin(e6) {
    return this.plugins.find((i8) => i8.id === e6);
  }
  getPreset(e6) {
    return this.presets.get(e6);
  }
  getShapeDrawer(e6) {
    return this.shapeDrawers.get(e6);
  }
  getSupportedEffects() {
    return this.effectDrawers.keys();
  }
  getSupportedShapes() {
    return this.shapeDrawers.keys();
  }
  async getUpdaters(e6, i8 = false) {
    return Xi(e6, this.updaters, this._initializers.updaters, i8);
  }
  init() {
    this._initialized || (this._initialized = true);
  }
  item(e6) {
    let { items: i8 } = this, o7 = i8[e6];
    if (!o7 || o7.destroyed) {
      i8.splice(e6, et2);
      return;
    }
    return o7;
  }
  async load(e6) {
    let i8 = e6.id ?? e6.element?.id ?? `tsparticles${Math.floor(S2() * vo)}`, { index: o7, url: r8 } = e6, s17 = r8 ? await Er({ fallback: e6.options, url: r8, index: o7 }) : e6.options, n12 = G2(s17, o7), { items: a7 } = this, c14 = a7.findIndex((p15) => p15.id.description === i8), l16 = new mi2(this, i8, n12);
    if (c14 >= _o) {
      let p15 = this.item(c14), m11 = p15 ? wo : ue2;
      p15 && !p15.destroyed && p15.destroy(false), a7.splice(c14, m11, l16);
    } else a7.push(l16);
    let u11 = Ar(i8, e6.element), f11 = Lr(u11);
    return l16.canvas.loadCanvas(f11), await l16.start(), l16;
  }
  loadOptions(e6, i8) {
    this.plugins.forEach((o7) => o7.loadOptions?.(e6, i8));
  }
  loadParticlesOptions(e6, i8, ...o7) {
    let r8 = this.updaters.get(e6);
    r8 && r8.forEach((s17) => s17.loadOptions?.(i8, ...o7));
  }
  async refresh(e6 = true) {
    e6 && await Promise.all(this.items.map((i8) => i8.refresh()));
  }
  removeEventListener(e6, i8) {
    this._eventDispatcher.removeEventListener(e6, i8);
  }
  setOnClickHandler(e6) {
    let { items: i8 } = this;
    if (!i8.length) throw new Error(`${V2} can only set click handlers after calling tsParticles.load()`);
    i8.forEach((o7) => o7.addClickHandler(e6));
  }
};
function fr() {
  let t82 = new xi2();
  return t82.init(), t82;
}
var ur = class {
  constructor(e6) {
    this.type = ie2.external, this.container = e6;
  }
};
var pr = class {
  constructor(e6) {
    this.type = ie2.particles, this.container = e6;
  }
};
var mr;
(function(t82) {
  t82.clockwise = "clockwise", t82.counterClockwise = "counter-clockwise", t82.random = "random";
})(mr || (mr = {}));
var dr;
(function(t82) {
  t82.linear = "linear", t82.radial = "radial", t82.random = "random";
})(dr || (dr = {}));
var xr;
(function(t82) {
  t82.easeInBack = "ease-in-back", t82.easeInCirc = "ease-in-circ", t82.easeInCubic = "ease-in-cubic", t82.easeInLinear = "ease-in-linear", t82.easeInQuad = "ease-in-quad", t82.easeInQuart = "ease-in-quart", t82.easeInQuint = "ease-in-quint", t82.easeInExpo = "ease-in-expo", t82.easeInSine = "ease-in-sine", t82.easeOutBack = "ease-out-back", t82.easeOutCirc = "ease-out-circ", t82.easeOutCubic = "ease-out-cubic", t82.easeOutLinear = "ease-out-linear", t82.easeOutQuad = "ease-out-quad", t82.easeOutQuart = "ease-out-quart", t82.easeOutQuint = "ease-out-quint", t82.easeOutExpo = "ease-out-expo", t82.easeOutSine = "ease-out-sine", t82.easeInOutBack = "ease-in-out-back", t82.easeInOutCirc = "ease-in-out-circ", t82.easeInOutCubic = "ease-in-out-cubic", t82.easeInOutLinear = "ease-in-out-linear", t82.easeInOutQuad = "ease-in-out-quad", t82.easeInOutQuart = "ease-in-out-quart", t82.easeInOutQuint = "ease-in-out-quint", t82.easeInOutExpo = "ease-in-out-expo", t82.easeInOutSine = "ease-in-out-sine";
})(xr || (xr = {}));
var Nr = fr();
xe() || (window.tsParticles = Nr);

// /:https://esm.sh/*@tsparticles/plugin-absorbers@3.8.1/es2022/plugin-absorbers.mjs
var m2 = class {
  constructor() {
    this.radius = 0, this.mass = 0;
  }
  load(i8) {
    h2(i8) || (i8.mass !== void 0 && (this.mass = i8.mass), i8.radius !== void 0 && (this.radius = i8.radius));
  }
};
var g2 = class extends te2 {
  constructor() {
    super(), this.density = 5, this.value = 50, this.limit = new m2();
  }
  load(i8) {
    h2(i8) || (super.load(i8), i8.density !== void 0 && (this.density = i8.density), W2(i8.limit) ? this.limit.radius = i8.limit : this.limit.load(i8.limit));
  }
};
var b2 = class {
  constructor() {
    this.color = new T2(), this.color.value = "#000000", this.draggable = false, this.opacity = 1, this.destroy = true, this.orbits = false, this.size = new g2();
  }
  load(i8) {
    h2(i8) || (i8.color !== void 0 && (this.color = T2.create(this.color, i8.color)), i8.draggable !== void 0 && (this.draggable = i8.draggable), this.name = i8.name, i8.opacity !== void 0 && (this.opacity = i8.opacity), i8.position !== void 0 && (this.position = {}, i8.position.x !== void 0 && (this.position.x = x2(i8.position.x)), i8.position.y !== void 0 && (this.position.y = x2(i8.position.y))), i8.size !== void 0 && this.size.load(i8.size), i8.destroy !== void 0 && (this.destroy = i8.destroy), i8.orbits !== void 0 && (this.orbits = i8.orbits));
  }
};
var u2;
(function(n12) {
  n12.absorber = "absorber";
})(u2 || (u2 = {}));
var Y3 = 2;
var Z3 = 0.033;
var $3 = 0;
var ii3 = 0;
var si2 = 0;
var ti3 = 0;
var oi3 = 2;
var k3 = Math.PI * oi3;
var F3 = 0;
var p3 = class {
  constructor(i8, s17, o7, e6, d16) {
    this._calcPosition = () => {
      let t12 = es({ size: this._container.canvas.size, position: this.options.position });
      return Z2.create(t12.x, t12.y);
    }, this._updateParticlePosition = (t12, a7) => {
      if (t12.destroyed) return;
      let r8 = this._container, f11 = r8.canvas.size;
      if (t12.needsNewPosition) {
        let h9 = gr({ size: f11 });
        t12.position.setTo(h9), t12.velocity.setTo(t12.initialVelocity), t12.absorberOrbit = void 0, t12.needsNewPosition = false;
      }
      if (this.options.orbits) {
        if (t12.absorberOrbit === void 0 && (t12.absorberOrbit = Z2.origin, t12.absorberOrbit.length = Re2(t12.getPosition(), this.position), t12.absorberOrbit.angle = S2() * k3), t12.absorberOrbit.length <= this.size && !this.options.destroy) {
          let V9 = Math.min(f11.width, f11.height), N4 = 1, T10 = 0.1, I9 = 0.2;
          t12.absorberOrbit.length = V9 * (N4 + (S2() * I9 - T10));
        }
        t12.absorberOrbitDirection === void 0 && (t12.absorberOrbitDirection = t12.velocity.x >= F3 ? mr.clockwise : mr.counterClockwise);
        let h9 = t12.absorberOrbit.length, x12 = t12.absorberOrbit.angle, O9 = t12.absorberOrbitDirection;
        t12.velocity.setTo(Z2.origin);
        let v11 = { x: O9 === mr.clockwise ? Math.cos : Math.sin, y: O9 === mr.clockwise ? Math.sin : Math.cos };
        t12.position.x = this.position.x + h9 * v11.x(x12), t12.position.y = this.position.y + h9 * v11.y(x12), t12.absorberOrbit.length -= a7.length, t12.absorberOrbit.angle += (t12.retina.moveSpeed ?? F3) * r8.retina.pixelRatio / D2 * r8.retina.reduceFactor;
      } else {
        let h9 = Z2.origin;
        h9.length = a7.length, h9.angle = a7.angle, t12.velocity.addTo(h9);
      }
    }, this._absorbers = i8, this._container = s17, this._engine = o7, this.initialPosition = d16 ? Z2.create(d16.x, d16.y) : void 0, e6 instanceof b2 ? this.options = e6 : (this.options = new b2(), this.options.load(e6)), this.dragging = false, this.name = this.options.name, this.opacity = this.options.opacity, this.size = g(this.options.size.value) * s17.retina.pixelRatio, this.mass = this.size * this.options.size.density * s17.retina.reduceFactor;
    let c14 = this.options.size.limit;
    this.limit = { radius: c14.radius * s17.retina.pixelRatio * s17.retina.reduceFactor, mass: c14.mass }, this.color = Q2(this._engine, this.options.color) ?? { b: 0, g: 0, r: 0 }, this.position = this.initialPosition?.copy() ?? this._calcPosition();
  }
  attract(i8) {
    let s17 = this._container, o7 = this.options;
    if (o7.draggable) {
      let r8 = s17.interactivity.mouse;
      r8.clicking && r8.downPosition ? Re2(this.position, r8.downPosition) <= this.size && (this.dragging = true) : this.dragging = false, this.dragging && r8.position && (this.position.x = r8.position.x, this.position.y = r8.position.y);
    }
    let e6 = i8.getPosition(), { dx: d16, dy: c14, distance: t12 } = Ai2(this.position, e6), a7 = Z2.create(d16, c14);
    if (a7.length = this.mass / Math.pow(t12, Y3) * s17.retina.reduceFactor, t12 < this.size + i8.getRadius()) {
      let r8 = i8.getRadius() * Z3 * s17.retina.pixelRatio;
      this.size > i8.getRadius() && t12 < this.size - i8.getRadius() || i8.absorberOrbit !== void 0 && i8.absorberOrbit.length < $3 ? o7.destroy ? i8.destroy() : (i8.needsNewPosition = true, this._updateParticlePosition(i8, a7)) : (o7.destroy && (i8.size.value -= r8), this._updateParticlePosition(i8, a7)), (this.limit.radius <= ii3 || this.size < this.limit.radius) && (this.size += r8), (this.limit.mass <= si2 || this.mass < this.limit.mass) && (this.mass += r8 * this.options.size.density * s17.retina.reduceFactor);
    } else this._updateParticlePosition(i8, a7);
  }
  draw(i8) {
    i8.translate(this.position.x, this.position.y), i8.beginPath(), i8.arc(R2.x, R2.y, this.size, ti3, k3, false), i8.closePath(), i8.fillStyle = Se2(this.color, this.opacity), i8.fill();
  }
  resize() {
    let i8 = this.initialPosition;
    this.position = i8 && bs(i8, this._container.canvas.size, Z2.origin) ? i8 : this._calcPosition();
  }
};
var D3 = 0;
var P3 = class {
  constructor(i8, s17) {
    this._container = i8, this._engine = s17, this.array = [], this.absorbers = [], this.interactivityAbsorbers = [], i8.getAbsorber = (o7) => o7 === void 0 || W2(o7) ? this.array[o7 ?? D3] : this.array.find((e6) => e6.name === o7), i8.addAbsorber = async (o7, e6) => this.addAbsorber(o7, e6);
  }
  async addAbsorber(i8, s17) {
    let o7 = new p3(this, this._container, this._engine, i8, s17);
    return this.array.push(o7), Promise.resolve(o7);
  }
  draw(i8) {
    for (let s17 of this.array) s17.draw(i8);
  }
  handleClickMode(i8) {
    let s17 = this.absorbers, o7 = this.interactivityAbsorbers;
    if (i8 === u2.absorber) {
      let e6 = G2(o7), d16 = e6 ?? G2(s17), c14 = this._container.interactivity.mouse.clickPosition;
      this.addAbsorber(d16, c14);
    }
  }
  async init() {
    this.absorbers = this._container.actualOptions.absorbers, this.interactivityAbsorbers = this._container.actualOptions.interactivity.modes.absorbers;
    let i8 = A2(this.absorbers, async (s17) => {
      await this.addAbsorber(s17);
    });
    i8 instanceof Array ? await Promise.all(i8) : await i8;
  }
  particleUpdate(i8) {
    for (let s17 of this.array) if (s17.attract(i8), i8.destroyed) break;
  }
  removeAbsorber(i8) {
    let s17 = this.array.indexOf(i8);
    s17 >= D3 && this.array.splice(s17, 1);
  }
  resize() {
    for (let i8 of this.array) i8.resize();
  }
  stop() {
    this.array = [];
  }
};
var z3 = class {
  constructor(i8) {
    this.id = "absorbers", this._engine = i8;
  }
  async getPlugin(i8) {
    return Promise.resolve(new P3(i8, this._engine));
  }
  loadOptions(i8, s17) {
    !this.needsPlugin(i8) && !this.needsPlugin(s17) || (s17?.absorbers && (i8.absorbers = A2(s17.absorbers, (o7) => {
      let e6 = new b2();
      return e6.load(o7), e6;
    })), i8.interactivity.modes.absorbers = A2(s17?.interactivity?.modes?.absorbers, (o7) => {
      let e6 = new b2();
      return e6.load(o7), e6;
    }));
  }
  needsPlugin(i8) {
    if (!i8) return false;
    let s17 = i8.absorbers;
    return E2(s17) ? !!s17.length : s17 ? true : !!(i8.interactivity?.events?.onClick?.mode && ht2(u2.absorber, i8.interactivity.events.onClick.mode));
  }
};
async function Fi3(n12, i8 = true) {
  n12.checkVersion("3.8.1"), await n12.addPlugin(new z3(n12), i8);
}

// /:https://esm.sh/*@tsparticles/updater-destroy@3.8.1/es2022/updater-destroy.mjs
var O3 = class {
  load(o7) {
    h2(o7) || (o7.bottom !== void 0 && (this.bottom = x2(o7.bottom)), o7.left !== void 0 && (this.left = x2(o7.left)), o7.right !== void 0 && (this.right = x2(o7.right)), o7.top !== void 0 && (this.top = x2(o7.top)));
  }
};
var d3;
(function(s17) {
  s17.none = "none", s17.split = "split";
})(d3 || (d3 = {}));
var y2 = class extends te2 {
  constructor() {
    super(), this.value = 3;
  }
};
var g3 = class extends te2 {
  constructor() {
    super(), this.value = { min: 4, max: 9 };
  }
};
var b3 = class {
  constructor() {
    this.count = 1, this.factor = new y2(), this.rate = new g3(), this.sizeOffset = true;
  }
  load(o7) {
    h2(o7) || (o7.color !== void 0 && (this.color = T2.create(this.color, o7.color)), o7.count !== void 0 && (this.count = o7.count), this.factor.load(o7.factor), this.rate.load(o7.rate), this.particles = A2(o7.particles, (t12) => _({}, t12)), o7.sizeOffset !== void 0 && (this.sizeOffset = o7.sizeOffset), o7.colorOffset && (this.colorOffset = this.colorOffset ?? {}, o7.colorOffset.h !== void 0 && (this.colorOffset.h = o7.colorOffset.h), o7.colorOffset.s !== void 0 && (this.colorOffset.s = o7.colorOffset.s), o7.colorOffset.l !== void 0 && (this.colorOffset.l = o7.colorOffset.l)));
  }
};
var x3 = class {
  constructor() {
    this.bounds = new O3(), this.mode = d3.none, this.split = new b3();
  }
  load(o7) {
    h2(o7) || (o7.mode && (this.mode = o7.mode), o7.bounds && this.bounds.load(o7.bounds), this.split.load(o7.split));
  }
};
var v2 = 0;
var I3 = 0.5;
var j3 = 0;
var q3 = 1;
var A3 = 500;
var G3 = 0;
function H3(s17, o7, t12, e6) {
  let l16 = t12.options.destroy;
  if (!l16) return;
  let r8 = l16.split, i8 = ni(s17, o7, t12.options), f11 = g(r8.factor.value), u11 = t12.getFillColor();
  r8.color ? i8.color.load(r8.color) : r8.colorOffset && u11 ? i8.color.load({ value: { hsl: { h: u11.h + g(r8.colorOffset.h ?? v2), s: u11.s + g(r8.colorOffset.s ?? v2), l: u11.l + g(r8.colorOffset.l ?? v2) } } }) : i8.color.load({ value: { hsl: t12.getFillColor() } }), i8.move.load({ center: { x: t12.position.x, y: t12.position.y, mode: $2.precise } }), W2(i8.size.value) ? i8.size.value /= f11 : (i8.size.value.min /= f11, i8.size.value.max /= f11), i8.load(e6);
  let p15 = r8.sizeOffset ? x2(-t12.size.value, t12.size.value) : v2, c14 = { x: t12.position.x + U2(p15), y: t12.position.y + U2(p15) };
  return o7.particles.addParticle(c14, i8, t12.group, (n12) => n12.size.value < I3 ? false : (n12.velocity.length = U2(x2(t12.velocity.length, n12.velocity.length)), n12.splitCount = (t12.splitCount ?? j3) + q3, n12.unbreakable = true, setTimeout(() => {
    n12.unbreakable = false;
  }, A3), true));
}
function P4(s17, o7, t12) {
  let e6 = t12.options.destroy;
  if (!e6) return;
  let l16 = e6.split;
  if (l16.count >= G3 && (t12.splitCount === void 0 || t12.splitCount++ > l16.count)) return;
  let r8 = g(l16.rate.value), i8 = G2(l16.particles);
  for (let f11 = 0; f11 < r8; f11++) H3(s17, o7, t12, i8);
}
var C = class {
  constructor(o7, t12) {
    this.container = t12, this.engine = o7;
  }
  init(o7) {
    let t12 = this.container, e6 = o7.options, l16 = e6.destroy;
    if (!l16) return;
    o7.splitCount = 0;
    let r8 = l16.bounds;
    o7.destroyBounds || (o7.destroyBounds = {});
    let { bottom: i8, left: f11, right: u11, top: p15 } = r8, { destroyBounds: c14 } = o7, n12 = t12.canvas.size;
    i8 && (c14.bottom = g(i8) * n12.height / D2), f11 && (c14.left = g(f11) * n12.width / D2), u11 && (c14.right = g(u11) * n12.width / D2), p15 && (c14.top = g(p15) * n12.height / D2);
  }
  isEnabled(o7) {
    return !o7.destroyed;
  }
  loadOptions(o7, ...t12) {
    o7.destroy || (o7.destroy = new x3());
    for (let e6 of t12) o7.destroy.load(e6?.destroy);
  }
  particleDestroyed(o7, t12) {
    if (t12) return;
    let e6 = o7.options.destroy;
    e6 && e6.mode === d3.split && P4(this.engine, this.container, o7);
  }
  update(o7) {
    if (!this.isEnabled(o7)) return;
    let t12 = o7.getPosition(), e6 = o7.destroyBounds;
    e6 && (e6.bottom !== void 0 && t12.y >= e6.bottom || e6.left !== void 0 && t12.x <= e6.left || e6.right !== void 0 && t12.x >= e6.right || e6.top !== void 0 && t12.y <= e6.top) && o7.destroy();
  }
};
async function yo2(s17, o7 = true) {
  s17.checkVersion("3.8.1"), await s17.addParticleUpdater("destroy", (t12) => Promise.resolve(new C(s17, t12)), o7);
}

// /:https://esm.sh/*@tsparticles/plugin-emitters@3.8.1/es2022/plugin-emitters.mjs
var y3 = class {
  constructor() {
    this.wait = false;
  }
  load(t12) {
    h2(t12) || (t12.count !== void 0 && (this.count = t12.count), t12.delay !== void 0 && (this.delay = x2(t12.delay)), t12.duration !== void 0 && (this.duration = x2(t12.duration)), t12.wait !== void 0 && (this.wait = t12.wait));
  }
};
var _2 = class {
  constructor() {
    this.quantity = 1, this.delay = 0.1;
  }
  load(t12) {
    h2(t12) || (t12.quantity !== void 0 && (this.quantity = x2(t12.quantity)), t12.delay !== void 0 && (this.delay = x2(t12.delay)));
  }
};
var w2 = class {
  constructor() {
    this.color = false, this.opacity = false;
  }
  load(t12) {
    h2(t12) || (t12.color !== void 0 && (this.color = t12.color), t12.opacity !== void 0 && (this.opacity = t12.opacity));
  }
};
var v3 = class {
  constructor() {
    this.options = {}, this.replace = new w2(), this.type = "square";
  }
  load(t12) {
    h2(t12) || (t12.options !== void 0 && (this.options = _({}, t12.options ?? {})), this.replace.load(t12.replace), t12.type !== void 0 && (this.type = t12.type));
  }
};
var m3 = class {
  constructor() {
    this.mode = $2.percent, this.height = 0, this.width = 0;
  }
  load(t12) {
    h2(t12) || (t12.mode !== void 0 && (this.mode = t12.mode), t12.height !== void 0 && (this.height = t12.height), t12.width !== void 0 && (this.width = t12.width));
  }
};
var u3 = class {
  constructor() {
    this.autoPlay = true, this.fill = true, this.life = new y3(), this.rate = new _2(), this.shape = new v3(), this.startCount = 0;
  }
  load(t12) {
    h2(t12) || (t12.autoPlay !== void 0 && (this.autoPlay = t12.autoPlay), t12.size !== void 0 && (this.size || (this.size = new m3()), this.size.load(t12.size)), t12.direction !== void 0 && (this.direction = t12.direction), this.domId = t12.domId, t12.fill !== void 0 && (this.fill = t12.fill), this.life.load(t12.life), this.name = t12.name, this.particles = A2(t12.particles, (i8) => _({}, i8)), this.rate.load(t12.rate), this.shape.load(t12.shape), t12.position !== void 0 && (this.position = {}, t12.position.x !== void 0 && (this.position.x = x2(t12.position.x)), t12.position.y !== void 0 && (this.position.y = x2(t12.position.y))), t12.spawnColor !== void 0 && (this.spawnColor === void 0 && (this.spawnColor = new ye2()), this.spawnColor.load(t12.spawnColor)), t12.startCount !== void 0 && (this.startCount = t12.startCount));
  }
};
var d4;
(function(n12) {
  n12.emitter = "emitter";
})(d4 || (d4 = {}));
var G4 = 0.5;
var k4 = 0;
var g4 = 0;
var L3 = 0;
var ut3 = 0;
var pt3 = -1;
var ct3 = 1;
function q4(n12, t12) {
  n12.color ? n12.color.value = t12 : n12.color = { value: t12 };
}
var C2 = class {
  constructor(t12, i8, s17, e6, o7) {
    this.emitters = i8, this.container = s17, this._destroy = () => {
      this._mutationObserver?.disconnect(), this._mutationObserver = void 0, this._resizeObserver?.disconnect(), this._resizeObserver = void 0, this.emitters.removeEmitter(this), this._engine.dispatchEvent("emitterDestroyed", { container: this.container, data: { emitter: this } });
    }, this._prepareToDie = () => {
      if (this._paused) return;
      let a7 = this.options.life?.duration !== void 0 ? g(this.options.life.duration) : void 0;
      this.container.retina.reduceFactor && (this._lifeCount > 0 || this._immortal) && a7 !== void 0 && a7 > 0 && (this._duration = a7 * I2);
    }, this._setColorAnimation = (a7, p15, S9, N4 = ct3) => {
      let O9 = this.container;
      if (!a7.enable) return p15;
      let T10 = U2(a7.offset), H8 = g(this.options.rate.delay), j8 = H8 * I2 / O9.retina.reduceFactor, J6 = 0, K6 = g(a7.speed ?? J6);
      return (p15 + K6 * O9.fpsLimit / j8 + T10 * N4) % S9;
    }, this._engine = t12, this._currentDuration = 0, this._currentEmitDelay = 0, this._currentSpawnDelay = 0, this._initialPosition = o7, e6 instanceof u3 ? this.options = e6 : (this.options = new u3(), this.options.load(e6)), this._spawnDelay = g(this.options.life.delay ?? k4) * I2 / this.container.retina.reduceFactor, this.position = this._initialPosition ?? this._calcPosition(), this.name = this.options.name, this.fill = this.options.fill, this._firstSpawn = !this.options.life.wait, this._startParticlesAdded = false;
    let h9 = _({}, this.options.particles);
    if (h9 ??= {}, h9.move ??= {}, h9.move.direction ??= this.options.direction, this.options.spawnColor && (this.spawnColor = Wi2(this._engine, this.options.spawnColor)), this._paused = !this.options.autoPlay, this._particlesOptions = h9, this._size = this._calcSize(), this.size = ks(this._size, this.container.canvas.size), this._lifeCount = this.options.life.count ?? pt3, this._immortal = this._lifeCount <= g4, this.options.domId) {
      let a7 = document.getElementById(this.options.domId);
      a7 && (this._mutationObserver = new MutationObserver(() => {
        this.resize();
      }), this._resizeObserver = new ResizeObserver(() => {
        this.resize();
      }), this._mutationObserver.observe(a7, { attributes: true, attributeFilter: ["style", "width", "height"] }), this._resizeObserver.observe(a7));
    }
    let r8 = this.options.shape, l16 = this._engine.emitterShapeManager?.getShapeGenerator(r8.type);
    l16 && (this._shape = l16.generate(this.position, this.size, this.fill, r8.options)), this._engine.dispatchEvent("emitterCreated", { container: s17, data: { emitter: this } }), this.play();
  }
  externalPause() {
    this._paused = true, this.pause();
  }
  externalPlay() {
    this._paused = false, this.play();
  }
  async init() {
    await this._shape?.init();
  }
  pause() {
    this._paused || delete this._emitDelay;
  }
  play() {
    if (!this._paused && this.container.retina.reduceFactor && (this._lifeCount > g4 || this._immortal || !this.options.life.count) && (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? L3))) {
      if (this._emitDelay === void 0) {
        let t12 = g(this.options.rate.delay);
        this._emitDelay = t12 * I2 / this.container.retina.reduceFactor;
      }
      (this._lifeCount > g4 || this._immortal) && this._prepareToDie();
    }
  }
  resize() {
    let t12 = this._initialPosition;
    this.position = t12 && bs(t12, this.container.canvas.size, Z2.origin) ? t12 : this._calcPosition(), this._size = this._calcSize(), this.size = ks(this._size, this.container.canvas.size), this._shape?.resize(this.position, this.size);
  }
  update(t12) {
    this._paused || (this._firstSpawn && (this._firstSpawn = false, this._currentSpawnDelay = this._spawnDelay ?? L3, this._currentEmitDelay = this._emitDelay ?? ut3), this._startParticlesAdded || (this._startParticlesAdded = true, this._emitParticles(this.options.startCount)), this._duration !== void 0 && (this._currentDuration += t12.value, this._currentDuration >= this._duration && (this.pause(), this._spawnDelay !== void 0 && delete this._spawnDelay, this._immortal || this._lifeCount--, this._lifeCount > g4 || this._immortal ? (this.position = this._calcPosition(), this._shape?.resize(this.position, this.size), this._spawnDelay = g(this.options.life.delay ?? k4) * I2 / this.container.retina.reduceFactor) : this._destroy(), this._currentDuration -= this._duration, delete this._duration)), this._spawnDelay !== void 0 && (this._currentSpawnDelay += t12.value, this._currentSpawnDelay >= this._spawnDelay && (this._engine.dispatchEvent("emitterPlay", { container: this.container }), this.play(), this._currentSpawnDelay -= this._currentSpawnDelay, delete this._spawnDelay)), this._emitDelay !== void 0 && (this._currentEmitDelay += t12.value, this._currentEmitDelay >= this._emitDelay && (this._emit(), this._currentEmitDelay -= this._emitDelay)));
  }
  _calcPosition() {
    if (this.options.domId) {
      let t12 = document.getElementById(this.options.domId);
      if (t12) {
        let i8 = t12.getBoundingClientRect(), s17 = this.container.retina.pixelRatio;
        return { x: (i8.x + i8.width * G4) * s17, y: (i8.y + i8.height * G4) * s17 };
      }
    }
    return es({ size: this.container.canvas.size, position: this.options.position });
  }
  _calcSize() {
    let t12 = this.container;
    if (this.options.domId) {
      let i8 = document.getElementById(this.options.domId);
      if (i8) {
        let s17 = i8.getBoundingClientRect();
        return { width: s17.width * t12.retina.pixelRatio, height: s17.height * t12.retina.pixelRatio, mode: $2.precise };
      }
    }
    return this.options.size ?? (() => {
      let i8 = new m3();
      return i8.load({ height: 0, mode: $2.percent, width: 0 }), i8;
    })();
  }
  _emit() {
    if (this._paused) return;
    let t12 = g(this.options.rate.quantity);
    this._emitParticles(t12);
  }
  _emitParticles(t12) {
    let i8 = G2(this._particlesOptions);
    for (let s17 = 0; s17 < t12; s17++) {
      let e6 = _({}, i8);
      if (this.spawnColor) {
        let r8 = this.options.spawnColor?.animation;
        if (r8) {
          let l16 = { h: 360, s: 100, l: 100 }, a7 = 3.6;
          this.spawnColor.h = this._setColorAnimation(r8.h, this.spawnColor.h, l16.h, a7), this.spawnColor.s = this._setColorAnimation(r8.s, this.spawnColor.s, l16.s), this.spawnColor.l = this._setColorAnimation(r8.l, this.spawnColor.l, l16.l);
        }
        q4(e6, this.spawnColor);
      }
      let o7 = this.options.shape, h9 = this.position;
      if (this._shape) {
        let r8 = this._shape.randomPosition();
        if (r8) {
          h9 = r8.position;
          let l16 = o7.replace;
          l16.color && r8.color && q4(e6, r8.color), l16.opacity && (e6.opacity ? e6.opacity.value = r8.opacity : e6.opacity = { value: r8.opacity });
        } else h9 = null;
      }
      h9 && this.container.particles.addParticle(h9, e6);
    }
  }
};
var x4 = class {
  constructor(t12, i8) {
    this.container = i8, this._engine = t12, this.array = [], this.emitters = [], this.interactivityEmitters = { random: { count: 1, enable: false }, value: [] };
    let s17 = 0;
    i8.getEmitter = (e6) => e6 === void 0 || W2(e6) ? this.array[e6 ?? s17] : this.array.find((o7) => o7.name === e6), i8.addEmitter = async (e6, o7) => this.addEmitter(e6, o7), i8.removeEmitter = (e6) => {
      let o7 = i8.getEmitter(e6);
      o7 && this.removeEmitter(o7);
    }, i8.playEmitter = (e6) => {
      let o7 = i8.getEmitter(e6);
      o7 && o7.externalPlay();
    }, i8.pauseEmitter = (e6) => {
      let o7 = i8.getEmitter(e6);
      o7 && o7.externalPause();
    };
  }
  async addEmitter(t12, i8) {
    let s17 = new u3();
    s17.load(t12);
    let e6 = new C2(this._engine, this, this.container, s17, i8);
    return await e6.init(), this.array.push(e6), e6;
  }
  handleClickMode(t12) {
    let i8 = this.emitters, s17 = this.interactivityEmitters;
    if (t12 !== d4.emitter) return;
    let e6;
    if (s17 && E2(s17.value)) if (s17.value.length > 0 && s17.random.enable) {
      e6 = [];
      let l16 = [];
      for (let a7 = 0; a7 < s17.random.count; a7++) {
        let p15 = wr(s17.value);
        if (l16.includes(p15) && l16.length < s17.value.length) {
          a7--;
          continue;
        }
        l16.push(p15), e6.push(ft2(s17.value, p15));
      }
    } else e6 = s17.value;
    else e6 = s17?.value;
    let o7 = e6 ?? i8, h9 = this.container.interactivity.mouse.clickPosition;
    A2(o7, async (r8) => {
      await this.addEmitter(r8, h9);
    });
  }
  async init() {
    if (this.emitters = this.container.actualOptions.emitters, this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters, !!this.emitters) if (E2(this.emitters)) for (let t12 of this.emitters) await this.addEmitter(t12);
    else await this.addEmitter(this.emitters);
  }
  pause() {
    for (let t12 of this.array) t12.pause();
  }
  play() {
    for (let t12 of this.array) t12.play();
  }
  removeEmitter(t12) {
    let i8 = this.array.indexOf(t12);
    i8 >= 0 && this.array.splice(i8, 1);
  }
  resize() {
    for (let t12 of this.array) t12.resize();
  }
  stop() {
    this.array = [];
  }
  update(t12) {
    for (let i8 of this.array) i8.update(t12);
  }
};
var E3 = class {
  constructor(t12) {
    this._engine = t12, this.id = "emitters";
  }
  getPlugin(t12) {
    return Promise.resolve(new x4(this._engine, t12));
  }
  loadOptions(t12, i8) {
    if (!this.needsPlugin(t12) && !this.needsPlugin(i8)) return;
    i8?.emitters && (t12.emitters = A2(i8.emitters, (e6) => {
      let o7 = new u3();
      return o7.load(e6), o7;
    }));
    let s17 = i8?.interactivity?.modes?.emitters;
    if (s17) if (E2(s17)) t12.interactivity.modes.emitters = { random: { count: 1, enable: true }, value: s17.map((e6) => {
      let o7 = new u3();
      return o7.load(e6), o7;
    }) };
    else {
      let e6 = s17;
      if (e6.value !== void 0) if (E2(e6.value)) t12.interactivity.modes.emitters = { random: { count: e6.random.count ?? 1, enable: e6.random.enable ?? false }, value: e6.value.map((h9) => {
        let r8 = new u3();
        return r8.load(h9), r8;
      }) };
      else {
        let h9 = new u3();
        h9.load(e6.value), t12.interactivity.modes.emitters = { random: { count: e6.random.count ?? 1, enable: e6.random.enable ?? false }, value: h9 };
      }
      else (t12.interactivity.modes.emitters = { random: { count: 1, enable: false }, value: new u3() }).value.load(s17);
    }
  }
  needsPlugin(t12) {
    if (!t12) return false;
    let i8 = t12.emitters;
    return E2(i8) && !!i8.length || i8 !== void 0 || !!t12.interactivity?.events?.onClick?.mode && ht2(d4.emitter, t12.interactivity.events.onClick.mode);
  }
};
var P5 = /* @__PURE__ */ new Map();
var z4 = class {
  constructor(t12) {
    this._engine = t12;
  }
  addShapeGenerator(t12, i8) {
    this.getShapeGenerator(t12) || P5.set(t12, i8);
  }
  getShapeGenerator(t12) {
    return P5.get(t12);
  }
  getSupportedShapeGenerators() {
    return P5.keys();
  }
};
var B2 = class {
  constructor(t12, i8, s17, e6) {
    this.position = t12, this.size = i8, this.fill = s17, this.options = e6;
  }
  resize(t12, i8) {
    this.position = t12, this.size = i8;
  }
};
async function ii4(n12, t12 = true) {
  n12.checkVersion("3.8.1"), n12.emitterShapeManager || (n12.emitterShapeManager = new z4(n12)), n12.addEmitterShapeGenerator || (n12.addEmitterShapeGenerator = (s17, e6) => {
    n12.emitterShapeManager?.addShapeGenerator(s17, e6);
  });
  let i8 = new E3(n12);
  await n12.addPlugin(i8, t12);
}

// /:https://esm.sh/*@tsparticles/plugin-emitters-shape-circle@3.8.1/es2022/plugin-emitters-shape-circle.mjs
var i = 0.25;
var f2 = 2;
var b4 = Math.PI * f2;
var P6 = 2;
var q5 = 0.5;
var c = class extends B2 {
  constructor(e6, t12, r8, a7) {
    super(e6, t12, r8, a7);
  }
  async init() {
  }
  randomPosition() {
    let e6 = this.size, t12 = this.fill, r8 = this.position, a7 = (s17, n12) => {
      let o7 = S2() * i, h9 = Math.atan(n12 / s17 * Math.tan(b4 * o7)), p15 = S2();
      return p15 < i ? h9 : p15 < f2 * i ? Math.PI - h9 : p15 < f2 * i + i ? Math.PI + h9 : -h9;
    }, w9 = (s17, n12, o7) => s17 * n12 / Math.sqrt((n12 * Math.cos(o7)) ** P6 + (s17 * Math.sin(o7)) ** P6), [M13, x12] = [e6.width * q5, e6.height * q5], l16 = a7(M13, x12), g14 = w9(M13, x12, l16), E11 = t12 ? g14 * Math.sqrt(S2()) : g14;
    return { position: { x: r8.x + E11 * Math.cos(l16), y: r8.y + E11 * Math.sin(l16) } };
  }
};
var u4 = class {
  generate(e6, t12, r8, a7) {
    return new c(e6, t12, r8, a7);
  }
};
async function v4(m11, e6 = true) {
  let t12 = m11;
  t12.checkVersion("3.8.1"), t12.addEmitterShapeGenerator?.("circle", new u4()), await t12.refresh(e6);
}

// /:https://esm.sh/*@tsparticles/plugin-emitters-shape-square@3.8.1/es2022/plugin-emitters-shape-square.mjs
var y4 = 4;
var n;
(function(o7) {
  o7[o7.TopLeft = 0] = "TopLeft", o7[o7.TopRight = 1] = "TopRight", o7[o7.BottomRight = 2] = "BottomRight", o7[o7.BottomLeft = 3] = "BottomLeft";
})(n || (n = {}));
function c2(o7, e6) {
  return o7 + e6 * (S2() - w);
}
var p4 = class extends B2 {
  constructor(e6, t12, i8, r8) {
    super(e6, t12, i8, r8);
  }
  async init() {
  }
  randomPosition() {
    let e6 = this.fill, t12 = this.position, i8 = this.size;
    if (e6) return { position: { x: c2(t12.x, i8.width), y: c2(t12.y, i8.height) } };
    {
      let r8 = i8.width * w, s17 = i8.height * w, u11 = Math.floor(S2() * y4), a7 = (S2() - w) * M2;
      switch (u11) {
        case n.TopLeft:
          return { position: { x: t12.x + a7 * r8, y: t12.y - s17 } };
        case n.TopRight:
          return { position: { x: t12.x - r8, y: t12.y + a7 * s17 } };
        case n.BottomRight:
          return { position: { x: t12.x + a7 * r8, y: t12.y + s17 } };
        case n.BottomLeft:
        default:
          return { position: { x: t12.x + r8, y: t12.y + a7 * s17 } };
      }
    }
  }
};
var f3 = class {
  generate(e6, t12, i8, r8) {
    return new p4(e6, t12, i8, r8);
  }
};
async function T3(o7, e6 = true) {
  let t12 = o7;
  t12.checkVersion("3.8.1"), t12.addEmitterShapeGenerator?.("square", new f3()), await t12.refresh(e6);
}

// /:https://esm.sh/*@tsparticles/interaction-external-trail@3.8.1/es2022/interaction-external-trail.mjs
var r = class {
  constructor() {
    this.delay = 1, this.pauseOnStop = false, this.quantity = 1;
  }
  load(t12) {
    h2(t12) || (t12.delay !== void 0 && (this.delay = t12.delay), t12.quantity !== void 0 && (this.quantity = t12.quantity), t12.particles !== void 0 && (this.particles = _({}, t12.particles)), t12.pauseOnStop !== void 0 && (this.pauseOnStop = t12.pauseOnStop));
  }
};
var p5 = "trail";
var a = class extends ur {
  constructor(t12) {
    super(t12), this._delay = 0;
  }
  clear() {
  }
  init() {
  }
  interact(t12) {
    let i8 = this.container, { interactivity: o7 } = i8;
    if (!i8.retina.reduceFactor) return;
    let s17 = i8.actualOptions, e6 = s17.interactivity.modes.trail;
    if (!e6) return;
    let l16 = e6.delay * I2 / this.container.retina.reduceFactor;
    if (this._delay < l16 && (this._delay += t12.value), this._delay < l16) return;
    let d16 = !(e6.pauseOnStop && (o7.mouse.position === this._lastPosition || o7.mouse.position?.x === this._lastPosition?.x && o7.mouse.position?.y === this._lastPosition?.y)), c14 = i8.interactivity.mouse.position;
    c14 ? this._lastPosition = { ...c14 } : delete this._lastPosition, d16 && i8.particles.push(e6.quantity, i8.interactivity.mouse, e6.particles), this._delay -= l16;
  }
  isEnabled(t12) {
    let i8 = this.container, o7 = i8.actualOptions, s17 = i8.interactivity.mouse, e6 = (t12?.interactivity ?? o7.interactivity).events;
    return s17.clicking && s17.inside && !!s17.position && ht2(p5, e6.onClick.mode) || s17.inside && !!s17.position && ht2(p5, e6.onHover.mode);
  }
  loadModeOptions(t12, ...i8) {
    t12.trail || (t12.trail = new r());
    for (let o7 of i8) t12.trail.load(o7?.trail);
  }
  reset() {
  }
};
async function q6(n12, t12 = true) {
  n12.checkVersion("3.8.1"), await n12.addInteractor("externalTrail", (i8) => Promise.resolve(new a(i8)), t12);
}

// /:https://esm.sh/*@tsparticles/updater-roll@3.8.1/es2022/updater-roll.mjs
var r2;
(function(o7) {
  o7.both = "both", o7.horizontal = "horizontal", o7.vertical = "vertical";
})(r2 || (r2 = {}));
var v5 = 2;
var c3 = Math.PI * v5;
var k5 = 360;
function b5(o7, e6) {
  let l16 = e6.options.roll;
  if (!l16?.enable) {
    e6.roll = { enable: false, horizontal: false, vertical: false, angle: 0, speed: 0 };
    return;
  }
  if (e6.roll = { enable: l16.enable, horizontal: l16.mode === r2.horizontal || l16.mode === r2.both, vertical: l16.mode === r2.vertical || l16.mode === r2.both, angle: S2() * c3, speed: g(l16.speed) / k5 }, l16.backColor) e6.backColor = Wi2(o7, l16.backColor);
  else if (l16.darken.enable && l16.enlighten.enable) {
    let n12 = S2() >= w ? pt2.darken : pt2.enlighten;
    e6.roll.alter = { type: n12, value: g(n12 === pt2.darken ? l16.darken.value : l16.enlighten.value) };
  } else l16.darken.enable ? e6.roll.alter = { type: pt2.darken, value: g(l16.darken.value) } : l16.enlighten.enable && (e6.roll.alter = { type: pt2.enlighten, value: g(l16.enlighten.value) });
}
function m4(o7, e6) {
  let l16 = o7.options.roll, n12 = o7.roll;
  if (!n12 || !l16?.enable) return;
  let f11 = n12.speed * e6.factor, u11 = c3;
  n12.angle += f11, n12.angle > u11 && (n12.angle -= u11);
}
var i2 = class {
  constructor() {
    this.enable = false, this.value = 0;
  }
  load(e6) {
    h2(e6) || (e6.enable !== void 0 && (this.enable = e6.enable), e6.value !== void 0 && (this.value = x2(e6.value)));
  }
};
var s8 = class {
  constructor() {
    this.darken = new i2(), this.enable = false, this.enlighten = new i2(), this.mode = r2.vertical, this.speed = 25;
  }
  load(e6) {
    h2(e6) || (e6.backColor !== void 0 && (this.backColor = T2.create(this.backColor, e6.backColor)), this.darken.load(e6.darken), e6.enable !== void 0 && (this.enable = e6.enable), this.enlighten.load(e6.enlighten), e6.mode !== void 0 && (this.mode = e6.mode), e6.speed !== void 0 && (this.speed = x2(e6.speed)));
  }
};
var d5 = class {
  constructor(e6) {
    this._engine = e6;
  }
  getTransformValues(e6) {
    let l16 = e6.roll?.enable && e6.roll, n12 = l16 && l16.horizontal, f11 = l16 && l16.vertical;
    return { a: n12 ? Math.cos(l16.angle) : void 0, d: f11 ? Math.sin(l16.angle) : void 0 };
  }
  init(e6) {
    b5(this._engine, e6);
  }
  isEnabled(e6) {
    let l16 = e6.options.roll;
    return !e6.destroyed && !e6.spawning && !!l16?.enable;
  }
  loadOptions(e6, ...l16) {
    e6.roll || (e6.roll = new s8());
    for (let n12 of l16) e6.roll.load(n12?.roll);
  }
  update(e6, l16) {
    this.isEnabled(e6) && m4(e6, l16);
  }
};
async function q7(o7, e6 = true) {
  o7.checkVersion("3.8.1"), await o7.addParticleUpdater("roll", () => Promise.resolve(new d5(o7)), e6);
}

// /:https://esm.sh/*@tsparticles/move-base@3.8.1/es2022/move-base.mjs
var l2 = 0.5;
var I4 = 2;
var x5 = 0;
var r3 = 1;
var z5 = 60;
var D4 = 0;
var C3 = 0.01;
var A4 = Math.PI * I4;
function M3(n12) {
  let o7 = n12.initialPosition, { dx: e6, dy: i8 } = Ai2(o7, n12.position), a7 = Math.abs(e6), s17 = Math.abs(i8), { maxDistance: t12 } = n12.retina, y15 = t12.horizontal, v11 = t12.vertical;
  if (!y15 && !v11) return;
  let d16 = (y15 && a7 >= y15) ?? false, u11 = (v11 && s17 >= v11) ?? false;
  if ((d16 || u11) && !n12.misplaced) n12.misplaced = !!y15 && a7 > y15 || !!v11 && s17 > v11, y15 && (n12.velocity.x = n12.velocity.y * l2 - n12.velocity.x), v11 && (n12.velocity.y = n12.velocity.x * l2 - n12.velocity.y);
  else if ((!y15 || a7 < y15) && (!v11 || s17 < v11) && n12.misplaced) n12.misplaced = false;
  else if (n12.misplaced) {
    let f11 = n12.position, c14 = n12.velocity;
    y15 && (f11.x < o7.x && c14.x < x5 || f11.x > o7.x && c14.x > x5) && (c14.x *= -S2()), v11 && (f11.y < o7.y && c14.y < x5 || f11.y > o7.y && c14.y > x5) && (c14.y *= -S2());
  }
}
function P7(n12, o7, e6, i8, a7, s17) {
  E4(n12, s17);
  let t12 = n12.gravity, y15 = t12?.enable && t12.inverse ? -r3 : r3;
  a7 && e6 && (n12.velocity.x += a7 * s17.factor / (z5 * e6)), t12?.enable && e6 && (n12.velocity.y += y15 * (t12.acceleration * s17.factor) / (z5 * e6));
  let v11 = n12.moveDecay;
  n12.velocity.multTo(v11);
  let d16 = n12.velocity.mult(e6);
  t12?.enable && i8 > x5 && (!t12.inverse && d16.y >= x5 && d16.y >= i8 || t12.inverse && d16.y <= x5 && d16.y <= -i8) && (d16.y = y15 * i8, e6 && (n12.velocity.y = d16.y / e6));
  let u11 = n12.options.zIndex, f11 = (r3 - n12.zIndexFactor) ** u11.velocityRate;
  d16.multTo(f11);
  let { position: c14 } = n12;
  c14.addTo(d16), o7.vibrate && (c14.x += Math.sin(c14.x * Math.cos(c14.y)), c14.y += Math.cos(c14.y * Math.sin(c14.x)));
}
function R3(n12, o7) {
  let e6 = n12.container;
  if (!n12.spin) return;
  let i8 = n12.spin.direction === mr.clockwise, a7 = { x: i8 ? Math.cos : Math.sin, y: i8 ? Math.sin : Math.cos };
  n12.position.x = n12.spin.center.x + n12.spin.radius * a7.x(n12.spin.angle), n12.position.y = n12.spin.center.y + n12.spin.radius * a7.y(n12.spin.angle), n12.spin.radius += n12.spin.acceleration;
  let s17 = Math.max(e6.canvas.size.width, e6.canvas.size.height), t12 = s17 * l2;
  n12.spin.radius > t12 ? (n12.spin.radius = t12, n12.spin.acceleration *= -r3) : n12.spin.radius < D4 && (n12.spin.radius = D4, n12.spin.acceleration *= -r3), n12.spin.angle += o7 * C3 * (r3 - n12.spin.radius / s17);
}
function E4(n12, o7) {
  let e6 = n12.options, i8 = e6.move.path;
  if (!i8.enable) return;
  if (n12.lastPathTime <= n12.pathDelay) {
    n12.lastPathTime += o7.value;
    return;
  }
  let s17 = n12.pathGenerator?.generate(n12, o7);
  s17 && n12.velocity.addTo(s17), i8.clamp && (n12.velocity.x = me2(n12.velocity.x, -r3, r3), n12.velocity.y = me2(n12.velocity.y, -r3, r3)), n12.lastPathTime -= n12.pathDelay;
}
function w3(n12) {
  return n12.slow.inRange ? n12.slow.factor : r3;
}
function O4(n12) {
  let o7 = n12.container, e6 = n12.options, i8 = e6.move.spin;
  if (!i8.enable) return;
  let a7 = i8.position ?? { x: 50, y: 50 }, s17 = 0.01, t12 = { x: a7.x * s17 * o7.canvas.size.width, y: a7.y * s17 * o7.canvas.size.height }, y15 = n12.getPosition(), v11 = Re2(y15, t12), d16 = g(i8.acceleration);
  n12.retina.spinAcceleration = d16 * o7.retina.pixelRatio, n12.spin = { center: t12, direction: n12.velocity.x >= x5 ? mr.clockwise : mr.counterClockwise, angle: S2() * A4, radius: v11, acceleration: n12.retina.spinAcceleration };
}
var G5 = 2;
var H4 = 1;
var j4 = 1;
var m5 = class {
  init(o7) {
    let e6 = o7.options, i8 = e6.move.gravity;
    o7.gravity = { enable: i8.enable, acceleration: g(i8.acceleration), inverse: i8.inverse }, O4(o7);
  }
  isEnabled(o7) {
    return !o7.destroyed && o7.options.move.enable;
  }
  move(o7, e6) {
    let i8 = o7.options, a7 = i8.move;
    if (!a7.enable) return;
    let s17 = o7.container, t12 = s17.retina.pixelRatio;
    o7.retina.moveSpeed ??= g(a7.speed) * t12, o7.retina.moveDrift ??= g(o7.options.move.drift) * t12;
    let y15 = w3(o7), v11 = o7.retina.moveSpeed * s17.retina.reduceFactor, d16 = o7.retina.moveDrift, u11 = Pe2(i8.size.value) * t12, f11 = a7.size ? o7.getRadius() / u11 : H4, c14 = e6.factor || j4, b14 = v11 * f11 * y15 * c14 / G5, S9 = o7.retina.maxSpeed ?? s17.retina.maxSpeed;
    a7.spin.enable ? R3(o7, b14) : P7(o7, a7, b14, S9, d16, e6), M3(o7);
  }
};
async function U3(n12, o7 = true) {
  n12.checkVersion("3.8.1"), await n12.addMover("base", () => Promise.resolve(new m5()), o7);
}

// /:https://esm.sh/*@tsparticles/shape-circle@3.8.1/es2022/shape-circle.mjs
var s9 = Math.PI * 2;
var d6 = 0;
var o = { x: 0, y: 0 };
function l3(i8) {
  let { context: a7, particle: n12, radius: r8 } = i8;
  n12.circleRange || (n12.circleRange = { min: d6, max: s9 });
  let e6 = n12.circleRange;
  a7.arc(o.x, o.y, r8, e6.min, e6.max, false);
}
var g5 = 12;
var p6 = 360;
var m6 = 0;
var c4 = class {
  constructor() {
    this.validTypes = ["circle"];
  }
  draw(a7) {
    l3(a7);
  }
  getSidesCount() {
    return g5;
  }
  particleInit(a7, n12) {
    let r8 = n12.shapeData, e6 = r8?.angle ?? { max: p6, min: m6 };
    n12.circleRange = pe2(e6) ? { min: lt2(e6.min), max: lt2(e6.max) } : { min: m6, max: lt2(e6) };
  }
};
async function b6(i8, a7 = true) {
  i8.checkVersion("3.8.1"), await i8.addShape(new c4(), a7);
}

// /:https://esm.sh/*@tsparticles/updater-color@3.8.1/es2022/updater-color.mjs
var i3 = class {
  constructor(o7, n12) {
    this._container = o7, this._engine = n12;
  }
  init(o7) {
    let n12 = Wi2(this._engine, o7.options.color, o7.id, o7.options.reduceDuplicates);
    n12 && (o7.color = Ws(n12, o7.options.color.animation, this._container.retina.reduceFactor));
  }
  isEnabled(o7) {
    let { h: n12, s: r8, l: s17 } = o7.options.color.animation, { color: t12 } = o7;
    return !o7.destroyed && !o7.spawning && (t12?.h.value !== void 0 && n12.enable || t12?.s.value !== void 0 && r8.enable || t12?.l.value !== void 0 && s17.enable);
  }
  update(o7, n12) {
    Us(o7.color, n12);
  }
};
async function h3(e6, o7 = true) {
  e6.checkVersion("3.8.1"), await e6.addParticleUpdater("color", (n12) => Promise.resolve(new i3(n12, e6)), o7);
}

// /:https://esm.sh/*@tsparticles/plugin-hex-color@3.8.1/es2022/plugin-hex-color.mjs
var a2;
(function(r8) {
  r8[r8.r = 1] = "r", r8[r8.g = 2] = "g", r8[r8.b = 3] = "b", r8[r8.a = 4] = "a";
})(a2 || (a2 = {}));
var h4 = /^#?([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i;
var p7 = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i;
var n2 = 16;
var l4 = 1;
var c5 = 255;
var i4 = class {
  constructor() {
    this.key = "hex", this.stringPrefix = "#";
  }
  handleColor(t12) {
    return this._parseString(t12.value);
  }
  handleRangeColor(t12) {
    return this._parseString(t12.value);
  }
  parseString(t12) {
    return this._parseString(t12);
  }
  _parseString(t12) {
    if (typeof t12 != "string" || !t12?.startsWith(this.stringPrefix)) return;
    let d16 = t12.replace(h4, (g14, f11, o7, u11, s17) => f11 + f11 + o7 + o7 + u11 + u11 + (s17 !== void 0 ? s17 + s17 : "")), e6 = p7.exec(d16);
    return e6 ? { a: e6[a2.a] !== void 0 ? parseInt(e6[a2.a], n2) / c5 : l4, b: parseInt(e6[a2.b], n2), g: parseInt(e6[a2.g], n2), r: parseInt(e6[a2.r], n2) } : void 0;
  }
};
async function _3(r8, t12 = true) {
  r8.checkVersion("3.8.1"), await r8.addColorManager(new i4(), t12);
}

// /:https://esm.sh/*@tsparticles/plugin-hsl-color@3.8.1/es2022/plugin-hsl-color.mjs
var l5;
(function(a7) {
  a7[a7.h = 1] = "h", a7[a7.s = 2] = "s", a7[a7.l = 3] = "l", a7[a7.a = 5] = "a";
})(l5 || (l5 = {}));
var n3 = class {
  constructor() {
    this.key = "hsl", this.stringPrefix = "hsl";
  }
  handleColor(e6) {
    let s17 = e6.value, r8 = s17.hsl ?? e6.value;
    if (r8.h !== void 0 && r8.s !== void 0 && r8.l !== void 0) return mt2(r8);
  }
  handleRangeColor(e6) {
    let s17 = e6.value, r8 = s17.hsl ?? e6.value;
    if (r8.h !== void 0 && r8.l !== void 0) return mt2({ h: g(r8.h), l: g(r8.l), s: g(r8.s) });
  }
  parseString(e6) {
    if (!e6.startsWith("hsl")) return;
    let s17 = /hsla?\(\s*(\d+)\s*[\s,]\s*(\d+)%\s*[\s,]\s*(\d+)%\s*([\s,]\s*(0|1|0?\.\d+|(\d{1,3})%)\s*)?\)/i, r8 = s17.exec(e6), i8 = 4, u11 = 1, t12 = 10;
    return r8 ? Hs({ a: r8.length > i8 ? is(r8[l5.a]) : u11, h: parseInt(r8[l5.h], t12), l: parseInt(r8[l5.l], t12), s: parseInt(r8[l5.s], t12) }) : void 0;
  }
};
async function C4(a7, e6 = true) {
  a7.checkVersion("3.8.1"), await a7.addColorManager(new n3(), e6);
}

// /:https://esm.sh/*@tsparticles/updater-opacity@3.8.1/es2022/updater-opacity.mjs
var t8 = class {
  constructor(o7) {
    this.container = o7;
  }
  init(o7) {
    let n12 = o7.options.opacity, e6 = 1;
    o7.opacity = Yo(n12, e6);
    let a7 = n12.animation;
    a7.enable && (o7.opacity.velocity = g(a7.speed) / D2 * this.container.retina.reduceFactor, a7.sync || (o7.opacity.velocity *= S2()));
  }
  isEnabled(o7) {
    return !o7.destroyed && !o7.spawning && !!o7.opacity && o7.opacity.enable && ((o7.opacity.maxLoops ?? 0) <= 0 || (o7.opacity.maxLoops ?? 0) > 0 && (o7.opacity.loops ?? 0) < (o7.opacity.maxLoops ?? 0));
  }
  reset(o7) {
    o7.opacity && (o7.opacity.time = 0, o7.opacity.loops = 0);
  }
  update(o7, n12) {
    !this.isEnabled(o7) || !o7.opacity || Ds(o7, o7.opacity, true, o7.options.opacity.animation.destroy, n12);
  }
};
async function f4(i8, o7 = true) {
  i8.checkVersion("3.8.1"), await i8.addParticleUpdater("opacity", (n12) => Promise.resolve(new t8(n12)), o7);
}

// /:https://esm.sh/*@tsparticles/updater-out-modes@3.8.1/es2022/updater-out-modes.mjs
var b7 = 0;
var y5 = 0;
function E5(i8) {
  if (i8.outMode !== ve2.bounce && i8.outMode !== ve2.split || i8.direction !== de2.left && i8.direction !== de2.right) return;
  i8.bounds.right < y5 && i8.direction === de2.left ? i8.particle.position.x = i8.size + i8.offset.x : i8.bounds.left > i8.canvasSize.width && i8.direction === de2.right && (i8.particle.position.x = i8.canvasSize.width - i8.size - i8.offset.x);
  let o7 = i8.particle.velocity.x, t12 = false;
  if (i8.direction === de2.right && i8.bounds.right >= i8.canvasSize.width && o7 > b7 || i8.direction === de2.left && i8.bounds.left <= y5 && o7 < b7) {
    let f11 = g(i8.particle.options.bounce.horizontal.value);
    i8.particle.velocity.x *= -f11, t12 = true;
  }
  if (!t12) return;
  let e6 = i8.offset.x + i8.size;
  i8.bounds.right >= i8.canvasSize.width && i8.direction === de2.right ? i8.particle.position.x = i8.canvasSize.width - e6 : i8.bounds.left <= y5 && i8.direction === de2.left && (i8.particle.position.x = e6), i8.outMode === ve2.split && i8.particle.destroy();
}
function j5(i8) {
  if (i8.outMode !== ve2.bounce && i8.outMode !== ve2.split || i8.direction !== de2.bottom && i8.direction !== de2.top) return;
  i8.bounds.bottom < y5 && i8.direction === de2.top ? i8.particle.position.y = i8.size + i8.offset.y : i8.bounds.top > i8.canvasSize.height && i8.direction === de2.bottom && (i8.particle.position.y = i8.canvasSize.height - i8.size - i8.offset.y);
  let o7 = i8.particle.velocity.y, t12 = false;
  if (i8.direction === de2.bottom && i8.bounds.bottom >= i8.canvasSize.height && o7 > b7 || i8.direction === de2.top && i8.bounds.top <= y5 && o7 < b7) {
    let f11 = g(i8.particle.options.bounce.vertical.value);
    i8.particle.velocity.y *= -f11, t12 = true;
  }
  if (!t12) return;
  let e6 = i8.offset.y + i8.size;
  i8.bounds.bottom >= i8.canvasSize.height && i8.direction === de2.bottom ? i8.particle.position.y = i8.canvasSize.height - e6 : i8.bounds.top <= y5 && i8.direction === de2.top && (i8.particle.position.y = e6), i8.outMode === ve2.split && i8.particle.destroy();
}
var p8 = class {
  constructor(o7) {
    this.container = o7, this.modes = [ve2.bounce, ve2.split];
  }
  update(o7, t12, e6, f11) {
    if (!this.modes.includes(f11)) return;
    let r8 = this.container, s17 = false;
    for (let x12 of r8.plugins.values()) if (x12.particleBounce !== void 0 && (s17 = x12.particleBounce(o7, e6, t12)), s17) break;
    if (s17) return;
    let u11 = o7.getPosition(), n12 = o7.offset, m11 = o7.getRadius(), d16 = Qo(u11, m11), g14 = r8.canvas.size;
    E5({ particle: o7, outMode: f11, direction: t12, bounds: d16, canvasSize: g14, offset: n12, size: m11 }), j5({ particle: o7, outMode: f11, direction: t12, bounds: d16, canvasSize: g14, offset: n12, size: m11 });
  }
};
var z6 = 0;
var l6 = class {
  constructor(o7) {
    this.container = o7, this.modes = [ve2.destroy];
  }
  update(o7, t12, e6, f11) {
    if (!this.modes.includes(f11)) return;
    let r8 = this.container;
    switch (o7.outType) {
      case Te2.normal:
      case Te2.outside:
        if (bs(o7.position, r8.canvas.size, Z2.origin, o7.getRadius(), t12)) return;
        break;
      case Te2.inside: {
        let { dx: s17, dy: u11 } = Ai2(o7.position, o7.moveCenter), { x: n12, y: m11 } = o7.velocity;
        if (n12 < z6 && s17 > o7.moveCenter.radius || m11 < z6 && u11 > o7.moveCenter.radius || n12 >= z6 && s17 < -o7.moveCenter.radius || m11 >= z6 && u11 < -o7.moveCenter.radius) return;
        break;
      }
    }
    r8.particles.remove(o7, o7.group, true);
  }
};
var M4 = 0;
var w4 = class {
  constructor(o7) {
    this.container = o7, this.modes = [ve2.none];
  }
  update(o7, t12, e6, f11) {
    if (!this.modes.includes(f11) || ((o7.options.move.distance.horizontal && (t12 === de2.left || t12 === de2.right)) ?? (o7.options.move.distance.vertical && (t12 === de2.top || t12 === de2.bottom)))) return;
    let r8 = o7.options.move.gravity, s17 = this.container, u11 = s17.canvas.size, n12 = o7.getRadius();
    if (r8.enable) {
      let m11 = o7.position;
      (!r8.inverse && m11.y > u11.height + n12 && t12 === de2.bottom || r8.inverse && m11.y < -n12 && t12 === de2.top) && s17.particles.remove(o7);
    } else {
      if (o7.velocity.y > M4 && o7.position.y <= u11.height + n12 || o7.velocity.y < M4 && o7.position.y >= -n12 || o7.velocity.x > M4 && o7.position.x <= u11.width + n12 || o7.velocity.x < M4 && o7.position.x >= -n12) return;
      bs(o7.position, s17.canvas.size, Z2.origin, n12, t12) || s17.particles.remove(o7);
    }
  }
};
var V3 = 0;
var R4 = 0;
var S3 = class {
  constructor(o7) {
    this.container = o7, this.modes = [ve2.out];
  }
  update(o7, t12, e6, f11) {
    if (!this.modes.includes(f11)) return;
    let r8 = this.container;
    switch (o7.outType) {
      case Te2.inside: {
        let { x: s17, y: u11 } = o7.velocity, n12 = Z2.origin;
        n12.length = o7.moveCenter.radius, n12.angle = o7.velocity.angle + Math.PI, n12.addTo(Z2.create(o7.moveCenter));
        let { dx: m11, dy: d16 } = Ai2(o7.position, n12);
        if (s17 <= V3 && m11 >= R4 || u11 <= V3 && d16 >= R4 || s17 >= V3 && m11 <= R4 || u11 >= V3 && d16 <= R4) return;
        o7.position.x = Math.floor(U2({ min: 0, max: r8.canvas.size.width })), o7.position.y = Math.floor(U2({ min: 0, max: r8.canvas.size.height }));
        let { dx: g14, dy: x12 } = Ai2(o7.position, o7.moveCenter);
        o7.direction = Math.atan2(-x12, -g14), o7.velocity.angle = o7.direction;
        break;
      }
      default: {
        if (bs(o7.position, r8.canvas.size, Z2.origin, o7.getRadius(), t12)) return;
        switch (o7.outType) {
          case Te2.outside: {
            o7.position.x = Math.floor(U2({ min: -o7.moveCenter.radius, max: o7.moveCenter.radius })) + o7.moveCenter.x, o7.position.y = Math.floor(U2({ min: -o7.moveCenter.radius, max: o7.moveCenter.radius })) + o7.moveCenter.y;
            let { dx: s17, dy: u11 } = Ai2(o7.position, o7.moveCenter);
            o7.moveCenter.radius && (o7.direction = Math.atan2(u11, s17), o7.velocity.angle = o7.direction);
            break;
          }
          case Te2.normal: {
            let s17 = o7.options.move.warp, u11 = r8.canvas.size, n12 = { bottom: u11.height + o7.getRadius() + o7.offset.y, left: -o7.getRadius() - o7.offset.x, right: u11.width + o7.getRadius() + o7.offset.x, top: -o7.getRadius() - o7.offset.y }, m11 = o7.getRadius(), d16 = Qo(o7.position, m11);
            t12 === de2.right && d16.left > u11.width + o7.offset.x ? (o7.position.x = n12.left, o7.initialPosition.x = o7.position.x, s17 || (o7.position.y = S2() * u11.height, o7.initialPosition.y = o7.position.y)) : t12 === de2.left && d16.right < -o7.offset.x && (o7.position.x = n12.right, o7.initialPosition.x = o7.position.x, s17 || (o7.position.y = S2() * u11.height, o7.initialPosition.y = o7.position.y)), t12 === de2.bottom && d16.top > u11.height + o7.offset.y ? (s17 || (o7.position.x = S2() * u11.width, o7.initialPosition.x = o7.position.x), o7.position.y = n12.top, o7.initialPosition.y = o7.position.y) : t12 === de2.top && d16.bottom < -o7.offset.y && (s17 || (o7.position.x = S2() * u11.width, o7.initialPosition.x = o7.position.x), o7.position.y = n12.bottom, o7.initialPosition.y = o7.position.y);
            break;
          }
        }
        break;
      }
    }
  }
};
var Z4 = (i8, o7) => i8.default === o7 || i8.bottom === o7 || i8.left === o7 || i8.right === o7 || i8.top === o7;
var k6 = class {
  constructor(o7) {
    this._addUpdaterIfMissing = (t12, e6, f11) => {
      let r8 = t12.options.move.outModes;
      !this.updaters.has(e6) && Z4(r8, e6) && this.updaters.set(e6, f11(this.container));
    }, this._updateOutMode = (t12, e6, f11, r8) => {
      for (let s17 of this.updaters.values()) s17.update(t12, r8, e6, f11);
    }, this.container = o7, this.updaters = /* @__PURE__ */ new Map();
  }
  init(o7) {
    this._addUpdaterIfMissing(o7, ve2.bounce, (t12) => new p8(t12)), this._addUpdaterIfMissing(o7, ve2.out, (t12) => new S3(t12)), this._addUpdaterIfMissing(o7, ve2.destroy, (t12) => new l6(t12)), this._addUpdaterIfMissing(o7, ve2.none, (t12) => new w4(t12));
  }
  isEnabled(o7) {
    return !o7.destroyed && !o7.spawning;
  }
  update(o7, t12) {
    let e6 = o7.options.move.outModes;
    this._updateOutMode(o7, t12, e6.bottom ?? e6.default, de2.bottom), this._updateOutMode(o7, t12, e6.left ?? e6.default, de2.left), this._updateOutMode(o7, t12, e6.right ?? e6.default, de2.right), this._updateOutMode(o7, t12, e6.top ?? e6.default, de2.top);
  }
};
async function bo2(i8, o7 = true) {
  i8.checkVersion("3.8.1"), await i8.addParticleUpdater("outModes", (t12) => Promise.resolve(new k6(t12)), o7);
}

// /:https://esm.sh/*@tsparticles/plugin-rgb-color@3.8.1/es2022/plugin-rgb-color.mjs
var e2;
(function(a7) {
  a7[a7.r = 1] = "r", a7[a7.g = 2] = "g", a7[a7.b = 3] = "b", a7[a7.a = 5] = "a";
})(e2 || (e2 = {}));
var o2 = class {
  constructor() {
    this.key = "rgb", this.stringPrefix = "rgb";
  }
  handleColor(t12) {
    let n12 = t12.value, r8 = n12.rgb ?? t12.value;
    if (r8.r !== void 0) return r8;
  }
  handleRangeColor(t12) {
    let n12 = t12.value, r8 = n12.rgb ?? t12.value;
    if (r8.r !== void 0) return { r: g(r8.r), g: g(r8.g), b: g(r8.b) };
  }
  parseString(t12) {
    if (!t12.startsWith(this.stringPrefix)) return;
    let n12 = /rgba?\(\s*(\d{1,3})\s*[\s,]\s*(\d{1,3})\s*[\s,]\s*(\d{1,3})\s*([\s,]\s*(0|1|0?\.\d+|(\d{1,3})%)\s*)?\)/i, r8 = n12.exec(t12), s17 = 10;
    return r8 ? { a: r8.length > 4 ? is(r8[e2.a]) : 1, b: parseInt(r8[e2.b], s17), g: parseInt(r8[e2.g], s17), r: parseInt(r8[e2.r], s17) } : void 0;
  }
};
async function c6(a7, t12 = true) {
  a7.checkVersion("3.8.1"), await a7.addColorManager(new o2(), t12);
}

// /:https://esm.sh/*@tsparticles/updater-size@3.8.1/es2022/updater-size.mjs
var o3 = 0;
var n4 = class {
  init(e6) {
    let i8 = e6.container, a7 = e6.options.size, t12 = a7.animation;
    t12.enable && (e6.size.velocity = (e6.retina.sizeAnimationSpeed ?? i8.retina.sizeAnimationSpeed) / D2 * i8.retina.reduceFactor, t12.sync || (e6.size.velocity *= S2()));
  }
  isEnabled(e6) {
    return !e6.destroyed && !e6.spawning && e6.size.enable && ((e6.size.maxLoops ?? o3) <= o3 || (e6.size.maxLoops ?? o3) > o3 && (e6.size.loops ?? o3) < (e6.size.maxLoops ?? o3));
  }
  reset(e6) {
    e6.size.loops = o3;
  }
  update(e6, i8) {
    this.isEnabled(e6) && Ds(e6, e6.size, true, e6.options.size.animation.destroy, i8);
  }
};
async function f5(s17, e6 = true) {
  s17.checkVersion("3.8.1"), await s17.addParticleUpdater("size", () => Promise.resolve(new n4()), e6);
}

// /:https://esm.sh/*@tsparticles/basic@3.8.1/es2022/basic.mjs
async function y6(a7, o7 = true) {
  a7.checkVersion("3.8.1"), await _3(a7, false), await C4(a7, false), await c6(a7, false), await U3(a7, false), await b6(a7, false), await h3(a7, false), await f4(a7, false), await bo2(a7, false), await f5(a7, false), await a7.refresh(o7);
}

// /:https://esm.sh/*@tsparticles/plugin-easing-quad@3.8.1/es2022/plugin-easing-quad.mjs
async function r4(s17, t12 = true) {
  s17.checkVersion("3.8.1"), await s17.addEasing(xr.easeInQuad, (a7) => a7 ** 2, false), await s17.addEasing(xr.easeOutQuad, (a7) => 1 - (1 - a7) ** 2, false), await s17.addEasing(xr.easeInOutQuad, (a7) => a7 < 0.5 ? 2 * a7 ** 2 : 1 - (-2 * a7 + 2) ** 2 / 2, false), await s17.refresh(t12);
}

// /:https://esm.sh/*@tsparticles/shape-emoji@3.8.1/es2022/shape-emoji.mjs
function x6(p15, o7) {
  let { context: e6, opacity: s17 } = p15, a7 = 0.5, n12 = e6.globalAlpha;
  if (!o7) return;
  let t12 = o7.width, l16 = t12 * a7;
  e6.globalAlpha = s17, e6.drawImage(o7, -l16, -l16, t12, t12), e6.globalAlpha = n12;
}
var j6 = '"Twemoji Mozilla", Apple Color Emoji, "Segoe UI Emoji", "Noto Color Emoji", "EmojiOne Color"';
var v6 = 0;
var m7 = class {
  constructor() {
    this.validTypes = ["emoji"], this._emojiShapeDict = /* @__PURE__ */ new Map();
  }
  destroy() {
    for (let [o7, e6] of this._emojiShapeDict) e6 instanceof ImageBitmap && e6?.close(), this._emojiShapeDict.delete(o7);
  }
  draw(o7) {
    let e6 = o7.particle.emojiDataKey;
    if (!e6) return;
    let s17 = this._emojiShapeDict.get(e6);
    s17 && x6(o7, s17);
  }
  async init(o7) {
    let e6 = o7.actualOptions, { validTypes: s17 } = this;
    if (!s17.find((t12) => ht2(t12, e6.particles.shape.type))) return;
    let a7 = [ws(j6)], n12 = s17.map((t12) => e6.particles.shape.options[t12]).find((t12) => !!t12);
    n12 && A2(n12, (t12) => {
      t12.font && a7.push(ws(t12.font));
    }), await Promise.all(a7);
  }
  particleDestroy(o7) {
    o7.emojiDataKey = void 0;
  }
  particleInit(o7, e6) {
    let a7 = e6.shapeData;
    if (!a7?.value) return;
    let n12 = G2(a7.value, e6.randomIndexData);
    if (!n12) return;
    let t12 = typeof n12 == "string" ? { font: a7.font ?? j6, padding: a7.padding ?? v6, value: n12 } : { font: j6, padding: v6, ...a7, ...n12 }, l16 = t12.font, u11 = t12.value, d16 = `${u11}_${l16}`;
    if (this._emojiShapeDict.has(d16)) {
      e6.emojiDataKey = d16;
      return;
    }
    let D10 = t12.padding * 2, h9 = Pe2(e6.size.value), c14 = h9 + D10, f11 = c14 * 2, g14;
    if (typeof OffscreenCanvas < "u") {
      let r8 = new OffscreenCanvas(f11, f11), i8 = r8.getContext("2d");
      if (!i8) return;
      i8.font = `400 ${h9 * 2}px ${l16}`, i8.textBaseline = "middle", i8.textAlign = "center", i8.fillText(u11, c14, c14), g14 = r8.transferToImageBitmap();
    } else {
      let r8 = document.createElement("canvas");
      r8.width = f11, r8.height = f11;
      let i8 = r8.getContext("2d");
      if (!i8) return;
      i8.font = `400 ${h9 * 2}px ${l16}`, i8.textBaseline = "middle", i8.textAlign = "center", i8.fillText(u11, c14, c14), g14 = r8;
    }
    this._emojiShapeDict.set(d16, g14), e6.emojiDataKey = d16;
  }
};
async function T4(p15, o7 = true) {
  p15.checkVersion("3.8.1"), await p15.addShape(new m7(), o7);
}

// /:https://esm.sh/*@tsparticles/interaction-external-attract@3.8.1/es2022/interaction-external-attract.mjs
var w5 = 1;
var C5 = 1;
var x7 = 0;
function k7(c14, t12, e6, i8, a7, r8) {
  let s17 = t12.actualOptions.interactivity.modes.attract;
  if (!s17) return;
  let o7 = t12.particles.quadTree.query(a7, r8);
  for (let d16 of o7) {
    let { dx: n12, dy: b14, distance: l16 } = Ai2(d16.position, e6), h9 = s17.speed * s17.factor, v11 = me2(c14.getEasing(s17.easing)(C5 - l16 / i8) * h9, w5, s17.maxSpeed), E11 = Z2.create(l16 ? n12 / l16 * v11 : h9, l16 ? b14 / l16 * v11 : h9);
    d16.position.subFrom(E11);
  }
}
function g6(c14, t12, e6) {
  t12.attract || (t12.attract = { particles: [] });
  let { attract: i8 } = t12;
  if (i8.finish || (i8.count || (i8.count = 0), i8.count++, i8.count === t12.particles.count && (i8.finish = true)), i8.clicking) {
    let a7 = t12.interactivity.mouse.clickPosition, r8 = t12.retina.attractModeDistance;
    if (!r8 || r8 < x7 || !a7) return;
    k7(c14, t12, a7, r8, new Ge2(a7.x, a7.y, r8), (s17) => e6(s17));
  } else i8.clicking === false && (i8.particles = []);
}
function M5(c14, t12, e6) {
  let i8 = t12.interactivity.mouse.position, a7 = t12.retina.attractModeDistance;
  !a7 || a7 < x7 || !i8 || k7(c14, t12, i8, a7, new Ge2(i8.x, i8.y, a7), (r8) => e6(r8));
}
var f6 = class {
  constructor() {
    this.distance = 200, this.duration = 0.4, this.easing = xr.easeOutQuad, this.factor = 1, this.maxSpeed = 50, this.speed = 1;
  }
  load(t12) {
    h2(t12) || (t12.distance !== void 0 && (this.distance = t12.distance), t12.duration !== void 0 && (this.duration = t12.duration), t12.easing !== void 0 && (this.easing = t12.easing), t12.factor !== void 0 && (this.factor = t12.factor), t12.maxSpeed !== void 0 && (this.maxSpeed = t12.maxSpeed), t12.speed !== void 0 && (this.speed = t12.speed));
  }
};
var u5 = "attract";
var m8 = class extends ur {
  constructor(t12, e6) {
    super(e6), this._engine = t12, e6.attract || (e6.attract = { particles: [] }), this.handleClickMode = (i8) => {
      let a7 = this.container.actualOptions, r8 = a7.interactivity.modes.attract;
      if (!(!r8 || i8 !== u5)) {
        e6.attract || (e6.attract = { particles: [] }), e6.attract.clicking = true, e6.attract.count = 0;
        for (let s17 of e6.attract.particles) this.isEnabled(s17) && s17.velocity.setTo(s17.initialVelocity);
        e6.attract.particles = [], e6.attract.finish = false, setTimeout(() => {
          e6.destroyed || (e6.attract || (e6.attract = { particles: [] }), e6.attract.clicking = false);
        }, r8.duration * I2);
      }
    };
  }
  clear() {
  }
  init() {
    let t12 = this.container, e6 = t12.actualOptions.interactivity.modes.attract;
    e6 && (t12.retina.attractModeDistance = e6.distance * t12.retina.pixelRatio);
  }
  interact() {
    let t12 = this.container, e6 = t12.actualOptions, i8 = t12.interactivity.status === yi2, a7 = e6.interactivity.events, { enable: r8, mode: s17 } = a7.onHover, { enable: o7, mode: d16 } = a7.onClick;
    i8 && r8 && ht2(u5, s17) ? M5(this._engine, this.container, (n12) => this.isEnabled(n12)) : o7 && ht2(u5, d16) && g6(this._engine, this.container, (n12) => this.isEnabled(n12));
  }
  isEnabled(t12) {
    let e6 = this.container, i8 = e6.actualOptions, a7 = e6.interactivity.mouse, r8 = (t12?.interactivity ?? i8.interactivity).events;
    if ((!a7.position || !r8.onHover.enable) && (!a7.clickPosition || !r8.onClick.enable)) return false;
    let s17 = r8.onHover.mode, o7 = r8.onClick.mode;
    return ht2(u5, s17) || ht2(u5, o7);
  }
  loadModeOptions(t12, ...e6) {
    t12.attract || (t12.attract = new f6());
    for (let i8 of e6) t12.attract.load(i8?.attract);
  }
  reset() {
  }
};
async function z7(c14, t12 = true) {
  c14.checkVersion("3.8.1"), await c14.addInteractor("externalAttract", (e6) => Promise.resolve(new m8(c14, e6)), t12);
}

// /:https://esm.sh/*@tsparticles/interaction-external-bounce@3.8.1/es2022/interaction-external-bounce.mjs
var O5 = 2;
var f7 = 0.5;
var T5 = Math.PI * f7;
var x8 = 2;
var b8 = 10;
var S4 = 0;
function B3(i8, e6, t12, n12, c14) {
  let r8 = i8.particles.quadTree.query(n12, c14);
  for (let o7 of r8) n12 instanceof Ge2 ? Rs(Ps(o7), { position: e6, radius: t12, mass: t12 ** O5 * T5, velocity: Z2.origin, factor: Z2.origin }) : n12 instanceof he && Ss(o7, Qo(e6, t12));
}
function W3(i8, e6, t12, n12) {
  let c14 = document.querySelectorAll(e6);
  c14.length && c14.forEach((r8) => {
    let o7 = r8, s17 = i8.retina.pixelRatio, a7 = { x: (o7.offsetLeft + o7.offsetWidth * f7) * s17, y: (o7.offsetTop + o7.offsetHeight * f7) * s17 }, v11 = o7.offsetWidth * f7 * s17, u11 = b8 * s17, R8 = t12.type === Mt.circle ? new Ge2(a7.x, a7.y, v11 + u11) : new he(o7.offsetLeft * s17 - u11, o7.offsetTop * s17 - u11, o7.offsetWidth * s17 + u11 * x8, o7.offsetHeight * s17 + u11 * x8);
    n12(a7, v11, R8);
  });
}
function E6(i8, e6, t12, n12) {
  zs(t12, e6, (c14, r8) => W3(i8, c14, r8, (o7, s17, a7) => B3(i8, o7, s17, a7, n12)));
}
function M6(i8, e6) {
  let t12 = i8.retina.pixelRatio, n12 = b8 * t12, c14 = i8.interactivity.mouse.position, r8 = i8.retina.bounceModeDistance;
  !r8 || r8 < S4 || !c14 || B3(i8, c14, r8, new Ge2(c14.x, c14.y, r8 + n12), e6);
}
var l7 = class {
  constructor() {
    this.distance = 200;
  }
  load(e6) {
    h2(e6) || e6.distance !== void 0 && (this.distance = e6.distance);
  }
};
var d7 = "bounce";
var p9 = class extends ur {
  constructor(e6) {
    super(e6);
  }
  clear() {
  }
  init() {
    let e6 = this.container, t12 = e6.actualOptions.interactivity.modes.bounce;
    t12 && (e6.retina.bounceModeDistance = t12.distance * e6.retina.pixelRatio);
  }
  interact() {
    let e6 = this.container, t12 = e6.actualOptions, n12 = t12.interactivity.events, c14 = e6.interactivity.status === yi2, r8 = n12.onHover.enable, o7 = n12.onHover.mode, s17 = n12.onDiv;
    c14 && r8 && ht2(d7, o7) ? M6(this.container, (a7) => this.isEnabled(a7)) : E6(this.container, s17, d7, (a7) => this.isEnabled(a7));
  }
  isEnabled(e6) {
    let t12 = this.container, n12 = t12.actualOptions, c14 = t12.interactivity.mouse, r8 = (e6?.interactivity ?? n12.interactivity).events, o7 = r8.onDiv;
    return !!c14.position && r8.onHover.enable && ht2(d7, r8.onHover.mode) || Ms(d7, o7);
  }
  loadModeOptions(e6, ...t12) {
    e6.bounce || (e6.bounce = new l7());
    for (let n12 of t12) e6.bounce.load(n12?.bounce);
  }
  reset() {
  }
};
async function U4(i8, e6 = true) {
  i8.checkVersion("3.8.1"), await i8.addInteractor("externalBounce", (t12) => Promise.resolve(new p9(t12)), e6);
}

// /:https://esm.sh/*@tsparticles/interaction-external-bubble@3.8.1/es2022/interaction-external-bubble.mjs
var O6 = class {
  constructor() {
    this.distance = 200, this.duration = 0.4, this.mix = false;
  }
  load(i8) {
    if (!h2(i8)) {
      if (i8.distance !== void 0 && (this.distance = i8.distance), i8.duration !== void 0 && (this.duration = i8.duration), i8.mix !== void 0 && (this.mix = i8.mix), i8.opacity !== void 0 && (this.opacity = i8.opacity), i8.color !== void 0) {
        let l16 = E2(this.color) ? void 0 : this.color;
        this.color = A2(i8.color, (e6) => T2.create(l16, e6));
      }
      i8.size !== void 0 && (this.size = i8.size);
    }
  }
};
var z8 = class extends O6 {
  constructor() {
    super(), this.selectors = [];
  }
  load(i8) {
    super.load(i8), !h2(i8) && i8.selectors !== void 0 && (this.selectors = i8.selectors);
  }
};
var g7 = class extends O6 {
  load(i8) {
    super.load(i8), !h2(i8) && (this.divs = A2(i8.divs, (l16) => {
      let e6 = new z8();
      return e6.load(l16), e6;
    }));
  }
};
var p10;
(function(a7) {
  a7.color = "color", a7.opacity = "opacity", a7.size = "size";
})(p10 || (p10 = {}));
function _4(a7, i8, l16, e6) {
  if (i8 >= l16) {
    let s17 = a7 + (i8 - l16) * e6;
    return me2(s17, a7, i8);
  } else if (i8 < l16) {
    let s17 = a7 - (l16 - i8) * e6;
    return me2(s17, i8, a7);
  }
}
var y7 = "bubble";
var E7 = 0;
var te3 = 0;
var oe2 = 2;
var T6 = 1;
var q8 = 1;
var ne3 = 0;
var be3 = 0;
var k8 = 0.5;
var R5 = 1;
var M7 = class extends ur {
  constructor(i8, l16) {
    super(i8), this._clickBubble = () => {
      let e6 = this.container, s17 = e6.actualOptions, r8 = e6.interactivity.mouse.clickPosition, n12 = s17.interactivity.modes.bubble;
      if (!n12 || !r8) return;
      e6.bubble || (e6.bubble = {});
      let o7 = e6.retina.bubbleModeDistance;
      if (!o7 || o7 < E7) return;
      let b14 = e6.particles.quadTree.queryCircle(r8, o7, (t12) => this.isEnabled(t12)), { bubble: u11 } = e6;
      for (let t12 of b14) {
        if (!u11.clicking) continue;
        t12.bubble.inRange = !u11.durationEnd;
        let f11 = t12.getPosition(), d16 = Re2(f11, r8), v11 = ((/* @__PURE__ */ new Date()).getTime() - (e6.interactivity.mouse.clickTime ?? te3)) / I2;
        v11 > n12.duration && (u11.durationEnd = true), v11 > n12.duration * oe2 && (u11.clicking = false, u11.durationEnd = false);
        let h9 = { bubbleObj: { optValue: e6.retina.bubbleModeSize, value: t12.bubble.radius }, particlesObj: { optValue: Pe2(t12.options.size.value) * e6.retina.pixelRatio, value: t12.size.value }, type: p10.size };
        this._process(t12, d16, v11, h9);
        let m11 = { bubbleObj: { optValue: n12.opacity, value: t12.bubble.opacity }, particlesObj: { optValue: Pe2(t12.options.opacity.value), value: t12.opacity?.value ?? T6 }, type: p10.opacity };
        this._process(t12, d16, v11, m11), !u11.durationEnd && d16 <= o7 ? this._hoverBubbleColor(t12, d16) : delete t12.bubble.color;
      }
    }, this._hoverBubble = () => {
      let e6 = this.container, s17 = e6.interactivity.mouse.position, r8 = e6.retina.bubbleModeDistance;
      if (!r8 || r8 < E7 || !s17) return;
      let n12 = e6.particles.quadTree.queryCircle(s17, r8, (o7) => this.isEnabled(o7));
      for (let o7 of n12) {
        o7.bubble.inRange = true;
        let b14 = o7.getPosition(), u11 = Re2(b14, s17), t12 = q8 - u11 / r8;
        u11 <= r8 ? t12 >= be3 && e6.interactivity.status === yi2 && (this._hoverBubbleSize(o7, t12), this._hoverBubbleOpacity(o7, t12), this._hoverBubbleColor(o7, t12)) : this.reset(o7), e6.interactivity.status === gi2 && this.reset(o7);
      }
    }, this._hoverBubbleColor = (e6, s17, r8) => {
      let n12 = this.container.actualOptions, o7 = r8 ?? n12.interactivity.modes.bubble;
      if (o7) {
        if (!e6.bubble.finalColor) {
          let b14 = o7.color;
          if (!b14) return;
          let u11 = G2(b14);
          e6.bubble.finalColor = Wi2(this._engine, u11);
        }
        if (e6.bubble.finalColor) if (o7.mix) {
          e6.bubble.color = void 0;
          let b14 = e6.getFillColor();
          e6.bubble.color = b14 ? er(Rr(b14, e6.bubble.finalColor, q8 - s17, s17)) : e6.bubble.finalColor;
        } else e6.bubble.color = e6.bubble.finalColor;
      }
    }, this._hoverBubbleOpacity = (e6, s17, r8) => {
      let n12 = this.container, o7 = n12.actualOptions, b14 = r8?.opacity ?? o7.interactivity.modes.bubble?.opacity;
      if (!b14) return;
      let u11 = e6.options.opacity.value, t12 = e6.opacity?.value ?? T6, f11 = _4(t12, b14, Pe2(u11), s17);
      f11 !== void 0 && (e6.bubble.opacity = f11);
    }, this._hoverBubbleSize = (e6, s17, r8) => {
      let n12 = this.container, o7 = r8?.size ? r8.size * n12.retina.pixelRatio : n12.retina.bubbleModeSize;
      if (o7 === void 0) return;
      let b14 = Pe2(e6.options.size.value) * n12.retina.pixelRatio, u11 = e6.size.value, t12 = _4(u11, o7, b14, s17);
      t12 !== void 0 && (e6.bubble.radius = t12);
    }, this._process = (e6, s17, r8, n12) => {
      let o7 = this.container, b14 = n12.bubbleObj.optValue, u11 = o7.actualOptions, t12 = u11.interactivity.modes.bubble;
      if (!t12 || b14 === void 0) return;
      let f11 = t12.duration, d16 = o7.retina.bubbleModeDistance, v11 = n12.particlesObj.optValue, h9 = n12.bubbleObj.value, m11 = n12.particlesObj.value ?? ne3, c14 = n12.type;
      if (!(!d16 || d16 < E7 || b14 === v11)) if (o7.bubble || (o7.bubble = {}), o7.bubble.durationEnd) h9 && (c14 === p10.size && delete e6.bubble.radius, c14 === p10.opacity && delete e6.bubble.opacity);
      else if (s17 <= d16) {
        if ((h9 ?? m11) !== b14) {
          let x12 = m11 - r8 * (m11 - b14) / f11;
          c14 === p10.size && (e6.bubble.radius = x12), c14 === p10.opacity && (e6.bubble.opacity = x12);
        }
      } else c14 === p10.size && delete e6.bubble.radius, c14 === p10.opacity && delete e6.bubble.opacity;
    }, this._singleSelectorHover = (e6, s17, r8) => {
      let n12 = this.container, o7 = document.querySelectorAll(s17), b14 = n12.actualOptions.interactivity.modes.bubble;
      !b14 || !o7.length || o7.forEach((u11) => {
        let t12 = u11, f11 = n12.retina.pixelRatio, d16 = { x: (t12.offsetLeft + t12.offsetWidth * k8) * f11, y: (t12.offsetTop + t12.offsetHeight * k8) * f11 }, v11 = t12.offsetWidth * k8 * f11, h9 = r8.type === Mt.circle ? new Ge2(d16.x, d16.y, v11) : new he(t12.offsetLeft * f11, t12.offsetTop * f11, t12.offsetWidth * f11, t12.offsetHeight * f11), m11 = n12.particles.quadTree.query(h9, (c14) => this.isEnabled(c14));
        for (let c14 of m11) {
          if (!h9.contains(c14.getPosition())) continue;
          c14.bubble.inRange = true;
          let S9 = b14.divs, x12 = Os(S9, t12);
          (!c14.bubble.div || c14.bubble.div !== t12) && (this.clear(c14, e6, true), c14.bubble.div = t12), this._hoverBubbleSize(c14, R5, x12), this._hoverBubbleOpacity(c14, R5, x12), this._hoverBubbleColor(c14, R5, x12);
        }
      });
    }, this._engine = l16, i8.bubble || (i8.bubble = {}), this.handleClickMode = (e6) => {
      e6 === y7 && (i8.bubble || (i8.bubble = {}), i8.bubble.clicking = true);
    };
  }
  clear(i8, l16, e6) {
    i8.bubble.inRange && !e6 || (delete i8.bubble.div, delete i8.bubble.opacity, delete i8.bubble.radius, delete i8.bubble.color);
  }
  init() {
    let i8 = this.container, l16 = i8.actualOptions.interactivity.modes.bubble;
    l16 && (i8.retina.bubbleModeDistance = l16.distance * i8.retina.pixelRatio, l16.size !== void 0 && (i8.retina.bubbleModeSize = l16.size * i8.retina.pixelRatio));
  }
  interact(i8) {
    let l16 = this.container.actualOptions, e6 = l16.interactivity.events, s17 = e6.onHover, r8 = e6.onClick, n12 = s17.enable, o7 = s17.mode, b14 = r8.enable, u11 = r8.mode, t12 = e6.onDiv;
    n12 && ht2(y7, o7) ? this._hoverBubble() : b14 && ht2(y7, u11) ? this._clickBubble() : zs(y7, t12, (f11, d16) => this._singleSelectorHover(i8, f11, d16));
  }
  isEnabled(i8) {
    let l16 = this.container, e6 = l16.actualOptions, s17 = l16.interactivity.mouse, r8 = (i8?.interactivity ?? e6.interactivity).events, { onClick: n12, onDiv: o7, onHover: b14 } = r8, u11 = Ms(y7, o7);
    return u11 || b14.enable && s17.position || n12.enable && s17.clickPosition ? ht2(y7, b14.mode) || ht2(y7, n12.mode) || u11 : false;
  }
  loadModeOptions(i8, ...l16) {
    i8.bubble || (i8.bubble = new g7());
    for (let e6 of l16) i8.bubble.load(e6?.bubble);
  }
  reset(i8) {
    i8.bubble.inRange = false;
  }
};
async function Be3(a7, i8 = true) {
  a7.checkVersion("3.8.1"), await a7.addInteractor("externalBubble", (l16) => Promise.resolve(new M7(l16, a7)), i8);
}

// /:https://esm.sh/*@tsparticles/interaction-external-connect@3.8.1/es2022/interaction-external-connect.mjs
var l8 = class {
  constructor() {
    this.opacity = 0.5;
  }
  load(t12) {
    h2(t12) || t12.opacity !== void 0 && (this.opacity = t12.opacity);
  }
};
var u6 = class {
  constructor() {
    this.distance = 80, this.links = new l8(), this.radius = 60;
  }
  load(t12) {
    h2(t12) || (t12.distance !== void 0 && (this.distance = t12.distance), this.links.load(t12.links), t12.radius !== void 0 && (this.radius = t12.radius));
  }
};
var g8 = 0;
var v7 = 1;
var F4 = 0;
function H5(n12, t12, o7, e6) {
  let i8 = Math.floor(o7.getRadius() / t12.getRadius()), r8 = t12.getFillColor(), s17 = o7.getFillColor();
  if (!r8 || !s17) return;
  let d16 = t12.getPosition(), c14 = o7.getPosition(), p15 = Rr(r8, s17, t12.getRadius(), o7.getRadius()), a7 = n12.createLinearGradient(d16.x, d16.y, c14.x, c14.y);
  return a7.addColorStop(g8, Ui2(r8, e6)), a7.addColorStop(me2(i8, g8, v7), Se2(p15, e6)), a7.addColorStop(v7, Ui2(s17, e6)), a7;
}
function I5(n12, t12, o7, e6, i8) {
  Ys(n12, e6, i8), n12.lineWidth = t12, n12.strokeStyle = o7, n12.stroke();
}
function L4(n12, t12, o7, e6) {
  let i8 = n12.actualOptions, r8 = i8.interactivity.modes.connect;
  if (r8) return H5(t12, o7, e6, r8.links.opacity);
}
function M8(n12, t12, o7) {
  n12.canvas.draw((e6) => {
    let i8 = L4(n12, e6, t12, o7);
    if (!i8) return;
    let r8 = t12.getPosition(), s17 = o7.getPosition();
    I5(e6, t12.retina.linksWidth ?? F4, i8, r8, s17);
  });
}
var N2 = "connect";
var C6 = 0;
var f8 = class extends ur {
  constructor(t12) {
    super(t12);
  }
  clear() {
  }
  init() {
    let t12 = this.container, o7 = t12.actualOptions.interactivity.modes.connect;
    o7 && (t12.retina.connectModeDistance = o7.distance * t12.retina.pixelRatio, t12.retina.connectModeRadius = o7.radius * t12.retina.pixelRatio);
  }
  interact() {
    let t12 = this.container;
    if (t12.actualOptions.interactivity.events.onHover.enable && t12.interactivity.status === "pointermove") {
      let e6 = t12.interactivity.mouse.position, { connectModeDistance: i8, connectModeRadius: r8 } = t12.retina;
      if (!i8 || i8 < C6 || !r8 || r8 < C6 || !e6) return;
      let s17 = Math.abs(r8), d16 = t12.particles.quadTree.queryCircle(e6, s17, (c14) => this.isEnabled(c14));
      d16.forEach((c14, p15) => {
        let a7 = c14.getPosition(), b14 = 1;
        for (let m11 of d16.slice(p15 + b14)) {
          let x12 = m11.getPosition(), y15 = Math.abs(i8), P13 = Math.abs(a7.x - x12.x), R8 = Math.abs(a7.y - x12.y);
          P13 < y15 && R8 < y15 && M8(t12, c14, m11);
        }
      });
    }
  }
  isEnabled(t12) {
    let o7 = this.container, e6 = o7.interactivity.mouse, i8 = (t12?.interactivity ?? o7.actualOptions.interactivity).events;
    return i8.onHover.enable && e6.position ? ht2(N2, i8.onHover.mode) : false;
  }
  loadModeOptions(t12, ...o7) {
    t12.connect || (t12.connect = new u6());
    for (let e6 of o7) t12.connect.load(e6?.connect);
  }
  reset() {
  }
};
async function Y4(n12, t12 = true) {
  n12.checkVersion("3.8.1"), await n12.addInteractor("externalConnect", (o7) => Promise.resolve(new f8(o7)), t12);
}

// /:https://esm.sh/*@tsparticles/interaction-external-grab@3.8.1/es2022/interaction-external-grab.mjs
var c7 = class {
  constructor() {
    this.blink = false, this.consent = false, this.opacity = 1;
  }
  load(i8) {
    h2(i8) || (i8.blink !== void 0 && (this.blink = i8.blink), i8.color !== void 0 && (this.color = T2.create(this.color, i8.color)), i8.consent !== void 0 && (this.consent = i8.consent), i8.opacity !== void 0 && (this.opacity = i8.opacity));
  }
};
var a3 = class {
  constructor() {
    this.distance = 100, this.links = new c7();
  }
  load(i8) {
    h2(i8) || (i8.distance !== void 0 && (this.distance = i8.distance), this.links.load(i8.links));
  }
};
var C7 = 0;
function D5(o7, i8, t12, n12, e6, r8) {
  Ys(o7, t12, n12), o7.strokeStyle = Se2(e6, r8), o7.lineWidth = i8, o7.stroke();
}
function y8(o7, i8, t12, n12, e6) {
  o7.canvas.draw((r8) => {
    let p15 = i8.getPosition();
    D5(r8, i8.retina.linksWidth ?? C7, p15, e6, t12, n12);
  });
}
var H6 = "grab";
var R6 = 0;
var W4 = 0;
var l9 = class extends ur {
  constructor(i8, t12) {
    super(i8), this._engine = t12;
  }
  clear() {
  }
  init() {
    let i8 = this.container, t12 = i8.actualOptions.interactivity.modes.grab;
    t12 && (i8.retina.grabModeDistance = t12.distance * i8.retina.pixelRatio);
  }
  interact() {
    let i8 = this.container, t12 = i8.actualOptions, n12 = t12.interactivity;
    if (!n12.modes.grab || !n12.events.onHover.enable || i8.interactivity.status !== yi2) return;
    let e6 = i8.interactivity.mouse.position;
    if (!e6) return;
    let r8 = i8.retina.grabModeDistance;
    if (!r8 || r8 < R6) return;
    let p15 = i8.particles.quadTree.queryCircle(e6, r8, (s17) => this.isEnabled(s17));
    for (let s17 of p15) {
      let k14 = s17.getPosition(), f11 = Re2(k14, e6);
      if (f11 > r8) continue;
      let u11 = n12.modes.grab.links, d16 = u11.opacity, m11 = d16 - f11 * d16 / r8;
      if (m11 <= W4) continue;
      let b14 = u11.color ?? s17.options.links?.color;
      if (!i8.particles.grabLineColor && b14) {
        let h9 = n12.modes.grab.links;
        i8.particles.grabLineColor = Bs(this._engine, b14, h9.blink, h9.consent);
      }
      let g14 = qs(s17, void 0, i8.particles.grabLineColor);
      g14 && y8(i8, s17, g14, m11, e6);
    }
  }
  isEnabled(i8) {
    let t12 = this.container, n12 = t12.interactivity.mouse, e6 = (i8?.interactivity ?? t12.actualOptions.interactivity).events;
    return e6.onHover.enable && !!n12.position && ht2(H6, e6.onHover.mode);
  }
  loadModeOptions(i8, ...t12) {
    i8.grab || (i8.grab = new a3());
    for (let n12 of t12) i8.grab.load(n12?.grab);
  }
  reset() {
  }
};
async function Q3(o7, i8 = true) {
  o7.checkVersion("3.8.1"), await o7.addInteractor("externalGrab", (t12) => Promise.resolve(new l9(t12, o7)), i8);
}

// /:https://esm.sh/*@tsparticles/interaction-external-pause@3.8.1/es2022/interaction-external-pause.mjs
var s10 = "pause";
var e3 = class extends ur {
  constructor(r8) {
    super(r8), this.handleClickMode = (a7) => {
      if (a7 !== s10) return;
      let n12 = this.container;
      n12.animationStatus ? n12.pause() : n12.play();
    };
  }
  clear() {
  }
  init() {
  }
  interact() {
  }
  isEnabled() {
    return true;
  }
  reset() {
  }
};
async function l10(t12, r8 = true) {
  t12.checkVersion("3.8.1"), await t12.addInteractor("externalPause", (a7) => Promise.resolve(new e3(a7)), r8);
}

// /:https://esm.sh/*@tsparticles/interaction-external-push@3.8.1/es2022/interaction-external-push.mjs
var n5 = class {
  constructor() {
    this.default = true, this.groups = [], this.quantity = 4;
  }
  load(t12) {
    if (h2(t12)) return;
    t12.default !== void 0 && (this.default = t12.default), t12.groups !== void 0 && (this.groups = t12.groups.map((r8) => r8)), this.groups.length || (this.default = true);
    let e6 = t12.quantity;
    e6 !== void 0 && (this.quantity = x2(e6));
  }
};
var g9 = "push";
var y9 = 0;
var o4 = class extends ur {
  constructor(t12) {
    super(t12), this.handleClickMode = (e6) => {
      if (e6 !== g9) return;
      let r8 = this.container, p15 = r8.actualOptions, s17 = p15.interactivity.modes.push;
      if (!s17) return;
      let a7 = g(s17.quantity);
      if (a7 <= y9) return;
      let u11 = ft2([void 0, ...s17.groups]), c14 = u11 !== void 0 ? r8.actualOptions.particles.groups[u11] : void 0;
      r8.particles.push(a7, r8.interactivity.mouse, c14, u11);
    };
  }
  clear() {
  }
  init() {
  }
  interact() {
  }
  isEnabled() {
    return true;
  }
  loadModeOptions(t12, ...e6) {
    t12.push || (t12.push = new n5());
    for (let r8 of e6) t12.push.load(r8?.push);
  }
  reset() {
  }
};
async function I6(i8, t12 = true) {
  i8.checkVersion("3.8.1"), await i8.addInteractor("externalPush", (e6) => Promise.resolve(new o4(e6)), t12);
}

// /:https://esm.sh/*@tsparticles/interaction-external-remove@3.8.1/es2022/interaction-external-remove.mjs
var n6 = class {
  constructor() {
    this.quantity = 2;
  }
  load(e6) {
    if (h2(e6)) return;
    let t12 = e6.quantity;
    t12 !== void 0 && (this.quantity = x2(t12));
  }
};
var d8 = "remove";
var i5 = class extends ur {
  constructor(e6) {
    super(e6), this.handleClickMode = (t12) => {
      let o7 = this.container, a7 = o7.actualOptions;
      if (!a7.interactivity.modes.remove || t12 !== d8) return;
      let s17 = g(a7.interactivity.modes.remove.quantity);
      o7.particles.removeQuantity(s17);
    };
  }
  clear() {
  }
  init() {
  }
  interact() {
  }
  isEnabled() {
    return true;
  }
  loadModeOptions(e6, ...t12) {
    e6.remove || (e6.remove = new n6());
    for (let o7 of t12) e6.remove.load(o7?.remove);
  }
  reset() {
  }
};
async function q9(r8, e6 = true) {
  r8.checkVersion("3.8.1"), await r8.addInteractor("externalRemove", (t12) => Promise.resolve(new i5(t12)), e6);
}

// /:https://esm.sh/*@tsparticles/interaction-external-repulse@3.8.1/es2022/interaction-external-repulse.mjs
var y10 = class {
  constructor() {
    this.distance = 200, this.duration = 0.4, this.factor = 100, this.speed = 1, this.maxSpeed = 50, this.easing = xr.easeOutQuad;
  }
  load(e6) {
    h2(e6) || (e6.distance !== void 0 && (this.distance = e6.distance), e6.duration !== void 0 && (this.duration = e6.duration), e6.easing !== void 0 && (this.easing = e6.easing), e6.factor !== void 0 && (this.factor = e6.factor), e6.speed !== void 0 && (this.speed = e6.speed), e6.maxSpeed !== void 0 && (this.maxSpeed = e6.maxSpeed));
  }
};
var k9 = class extends y10 {
  constructor() {
    super(), this.selectors = [];
  }
  load(e6) {
    super.load(e6), !h2(e6) && e6.selectors !== void 0 && (this.selectors = e6.selectors);
  }
};
var M9 = class extends y10 {
  load(e6) {
    super.load(e6), !h2(e6) && (this.divs = A2(e6.divs, (s17) => {
      let i8 = new k9();
      return i8.load(s17), i8;
    }));
  }
};
var m9 = "repulse";
var G6 = 0;
var J3 = 6;
var K3 = 3;
var U5 = 2;
var X3 = 0;
var Y5 = 0;
var Z5 = 1;
var b9 = 0.5;
var E8 = class extends ur {
  constructor(e6, s17) {
    super(s17), this._clickRepulse = () => {
      let i8 = this.container, r8 = i8.actualOptions.interactivity.modes.repulse;
      if (!r8) return;
      let t12 = i8.repulse ?? { particles: [] };
      if (t12.finish || (t12.count || (t12.count = 0), t12.count++, t12.count === i8.particles.count && (t12.finish = true)), t12.clicking) {
        let o7 = i8.retina.repulseModeDistance;
        if (!o7 || o7 < G6) return;
        let c14 = Math.pow(o7 / J3, K3), p15 = i8.interactivity.mouse.clickPosition;
        if (p15 === void 0) return;
        let n12 = new Ge2(p15.x, p15.y, c14), l16 = i8.particles.quadTree.query(n12, (u11) => this.isEnabled(u11));
        for (let u11 of l16) {
          let { dx: a7, dy: h9, distance: x12 } = Ai2(p15, u11.position), f11 = x12 ** U5, v11 = r8.speed, S9 = -c14 * v11 / f11;
          if (f11 <= c14) {
            t12.particles.push(u11);
            let R8 = Z2.create(a7, h9);
            R8.length = S9, u11.velocity.setTo(R8);
          }
        }
      } else if (t12.clicking === false) {
        for (let o7 of t12.particles) o7.velocity.setTo(o7.initialVelocity);
        t12.particles = [];
      }
    }, this._hoverRepulse = () => {
      let i8 = this.container, r8 = i8.interactivity.mouse.position, t12 = i8.retina.repulseModeDistance;
      !t12 || t12 < X3 || !r8 || this._processRepulse(r8, t12, new Ge2(r8.x, r8.y, t12));
    }, this._processRepulse = (i8, r8, t12, o7) => {
      let c14 = this.container, p15 = c14.particles.quadTree.query(t12, (v11) => this.isEnabled(v11)), n12 = c14.actualOptions.interactivity.modes.repulse;
      if (!n12) return;
      let { easing: l16, speed: u11, factor: a7, maxSpeed: h9 } = n12, x12 = this._engine.getEasing(l16), f11 = (o7?.speed ?? u11) * a7;
      for (let v11 of p15) {
        let { dx: S9, dy: R8, distance: g14 } = Ai2(v11.position, i8), w9 = me2(x12(Z5 - g14 / r8) * f11, Y5, h9), q14 = Z2.create(g14 ? S9 / g14 * w9 : f11, g14 ? R8 / g14 * w9 : f11);
        v11.position.addTo(q14);
      }
    }, this._singleSelectorRepulse = (i8, r8) => {
      let t12 = this.container, o7 = t12.actualOptions.interactivity.modes.repulse;
      if (!o7) return;
      let c14 = document.querySelectorAll(i8);
      c14.length && c14.forEach((p15) => {
        let n12 = p15, l16 = t12.retina.pixelRatio, u11 = { x: (n12.offsetLeft + n12.offsetWidth * b9) * l16, y: (n12.offsetTop + n12.offsetHeight * b9) * l16 }, a7 = n12.offsetWidth * b9 * l16, h9 = r8.type === Mt.circle ? new Ge2(u11.x, u11.y, a7) : new he(n12.offsetLeft * l16, n12.offsetTop * l16, n12.offsetWidth * l16, n12.offsetHeight * l16), x12 = o7.divs, f11 = Os(x12, n12);
        this._processRepulse(u11, a7, h9, f11);
      });
    }, this._engine = e6, s17.repulse || (s17.repulse = { particles: [] }), this.handleClickMode = (i8) => {
      let r8 = this.container.actualOptions, t12 = r8.interactivity.modes.repulse;
      if (!t12 || i8 !== m9) return;
      s17.repulse || (s17.repulse = { particles: [] });
      let o7 = s17.repulse;
      o7.clicking = true, o7.count = 0;
      for (let c14 of s17.repulse.particles) this.isEnabled(c14) && c14.velocity.setTo(c14.initialVelocity);
      o7.particles = [], o7.finish = false, setTimeout(() => {
        s17.destroyed || (o7.clicking = false);
      }, t12.duration * I2);
    };
  }
  clear() {
  }
  init() {
    let e6 = this.container, s17 = e6.actualOptions.interactivity.modes.repulse;
    s17 && (e6.retina.repulseModeDistance = s17.distance * e6.retina.pixelRatio);
  }
  interact() {
    let e6 = this.container, s17 = e6.actualOptions, i8 = e6.interactivity.status === yi2, r8 = s17.interactivity.events, t12 = r8.onHover, o7 = t12.enable, c14 = t12.mode, p15 = r8.onClick, n12 = p15.enable, l16 = p15.mode, u11 = r8.onDiv;
    i8 && o7 && ht2(m9, c14) ? this._hoverRepulse() : n12 && ht2(m9, l16) ? this._clickRepulse() : zs(m9, u11, (a7, h9) => this._singleSelectorRepulse(a7, h9));
  }
  isEnabled(e6) {
    let s17 = this.container, i8 = s17.actualOptions, r8 = s17.interactivity.mouse, t12 = (e6?.interactivity ?? i8.interactivity).events, o7 = t12.onDiv, c14 = t12.onHover, p15 = t12.onClick, n12 = Ms(m9, o7);
    if (!(n12 || c14.enable && r8.position || p15.enable && r8.clickPosition)) return false;
    let l16 = c14.mode, u11 = p15.mode;
    return ht2(m9, l16) || ht2(m9, u11) || n12;
  }
  loadModeOptions(e6, ...s17) {
    e6.repulse || (e6.repulse = new M9());
    for (let i8 of s17) e6.repulse.load(i8?.repulse);
  }
  reset() {
  }
};
async function fe2(d16, e6 = true) {
  d16.checkVersion("3.8.1"), await d16.addInteractor("externalRepulse", (s17) => Promise.resolve(new E8(d16, s17)), e6);
}

// /:https://esm.sh/*@tsparticles/interaction-external-slow@3.8.1/es2022/interaction-external-slow.mjs
var n7 = class {
  constructor() {
    this.factor = 3, this.radius = 200;
  }
  load(o7) {
    h2(o7) || (o7.factor !== void 0 && (this.factor = o7.factor), o7.radius !== void 0 && (this.radius = o7.radius));
  }
};
var y11 = "slow";
var h5 = 0;
var a4 = class extends ur {
  constructor(o7) {
    super(o7);
  }
  clear(o7, t12, r8) {
    o7.slow.inRange && !r8 || (o7.slow.factor = 1);
  }
  init() {
    let o7 = this.container, t12 = o7.actualOptions.interactivity.modes.slow;
    t12 && (o7.retina.slowModeRadius = t12.radius * o7.retina.pixelRatio);
  }
  interact() {
  }
  isEnabled(o7) {
    let t12 = this.container, r8 = t12.interactivity.mouse, i8 = (o7?.interactivity ?? t12.actualOptions.interactivity).events;
    return i8.onHover.enable && !!r8.position && ht2(y11, i8.onHover.mode);
  }
  loadModeOptions(o7, ...t12) {
    o7.slow || (o7.slow = new n7());
    for (let r8 of t12) o7.slow.load(r8?.slow);
  }
  reset(o7) {
    o7.slow.inRange = false;
    let t12 = this.container, r8 = t12.actualOptions, i8 = t12.interactivity.mouse.position, s17 = t12.retina.slowModeRadius, c14 = r8.interactivity.modes.slow;
    if (!c14 || !s17 || s17 < h5 || !i8) return;
    let f11 = o7.getPosition(), l16 = Re2(i8, f11), d16 = l16 / s17, w9 = c14.factor, { slow: u11 } = o7;
    l16 > s17 || (u11.inRange = true, u11.factor = d16 / w9);
  }
};
async function E9(e6, o7 = true) {
  e6.checkVersion("3.8.1"), await e6.addInteractor("externalSlow", (t12) => Promise.resolve(new a4(t12)), o7);
}

// /:https://esm.sh/*@tsparticles/shape-image@3.8.1/es2022/shape-image.mjs
var H7 = 0;
var ee3 = 1;
var te4 = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d.]+%?\))|currentcolor/gi;
function oe3(e6, t12, i8) {
  let { svgData: r8 } = e6;
  if (!r8) return "";
  let a7 = Ui2(t12, i8);
  if (r8.includes("fill")) return r8.replace(te4, () => a7);
  let n12 = r8.indexOf(">");
  return `${r8.substring(H7, n12)} fill="${a7}"${r8.substring(n12)}`;
}
async function L5(e6) {
  return new Promise((t12) => {
    e6.loading = true;
    let i8 = new Image();
    e6.element = i8, i8.addEventListener("load", () => {
      e6.loading = false, t12();
    }), i8.addEventListener("error", () => {
      e6.element = void 0, e6.error = true, e6.loading = false, K2().error(`${V2} loading image: ${e6.source}`), t12();
    }), i8.src = e6.source;
  });
}
async function S5(e6) {
  if (e6.type !== "svg") {
    await L5(e6);
    return;
  }
  e6.loading = true;
  let t12 = await fetch(e6.source);
  t12.ok ? e6.svgData = await t12.text() : (K2().error(`${V2} Image not found`), e6.error = true), e6.loading = false;
}
function Q4(e6, t12, i8, r8) {
  let a7 = oe3(e6, i8, r8.opacity?.value ?? ee3), n12 = { color: i8, gif: t12.gif, data: { ...e6, svgData: a7 }, loaded: false, ratio: t12.width / t12.height, replaceColor: t12.replaceColor, source: t12.src };
  return new Promise((o7) => {
    let l16 = new Blob([a7], { type: "image/svg+xml" }), g14 = URL || window.URL || window.webkitURL || window, d16 = g14.createObjectURL(l16), c14 = new Image();
    c14.addEventListener("load", () => {
      n12.loaded = true, n12.element = c14, o7(n12), g14.revokeObjectURL(d16);
    });
    let p15 = async () => {
      g14.revokeObjectURL(d16);
      let x12 = { ...e6, error: false, loading: true };
      await L5(x12), n12.loaded = true, n12.element = x12.element, o7(n12);
    };
    c14.addEventListener("error", () => void p15()), c14.src = d16;
  });
}
var U6 = [0, 4, 2, 1];
var $4 = [8, 8, 4, 2];
var P8 = class {
  constructor(t12) {
    this.pos = 0, this.data = new Uint8ClampedArray(t12);
  }
  getString(t12) {
    let i8 = this.data.slice(this.pos, this.pos + t12);
    return this.pos += i8.length, i8.reduce((r8, a7) => r8 + String.fromCharCode(a7), "");
  }
  nextByte() {
    return this.data[this.pos++];
  }
  nextTwoBytes() {
    return this.pos += 2, this.data[this.pos - 2] + (this.data[this.pos - 1] << 8);
  }
  readSubBlocks() {
    let t12 = "", i8 = 0, r8 = 0, a7 = 0;
    do {
      i8 = this.data[this.pos++];
      for (let n12 = i8; --n12 >= r8; t12 += String.fromCharCode(this.data[this.pos++])) ;
    } while (i8 !== a7);
    return t12;
  }
  readSubBlocksBin() {
    let t12 = this.data[this.pos], i8 = 0, r8 = 0, a7 = 1;
    for (let o7 = 0; t12 !== r8; o7 += t12 + a7, t12 = this.data[this.pos + o7]) i8 += t12;
    let n12 = new Uint8Array(i8);
    t12 = this.data[this.pos++];
    for (let o7 = 0; t12 !== r8; t12 = this.data[this.pos++]) for (let l16 = t12; --l16 >= r8; n12[o7++] = this.data[this.pos++]) ;
    return n12;
  }
  skipSubBlocks() {
    for (let t12 = 1, i8 = 0; this.data[this.pos] !== i8; this.pos += this.data[this.pos] + t12) ;
    this.pos++;
  }
};
var I7;
(function(e6) {
  e6[e6.Replace = 0] = "Replace", e6[e6.Combine = 1] = "Combine", e6[e6.RestoreBackground = 2] = "RestoreBackground", e6[e6.RestorePrevious = 3] = "RestorePrevious", e6[e6.UndefinedA = 4] = "UndefinedA", e6[e6.UndefinedB = 5] = "UndefinedB", e6[e6.UndefinedC = 6] = "UndefinedC", e6[e6.UndefinedD = 7] = "UndefinedD";
})(I7 || (I7 = {}));
var E10;
(function(e6) {
  e6[e6.Extension = 33] = "Extension", e6[e6.ApplicationExtension = 255] = "ApplicationExtension", e6[e6.GraphicsControlExtension = 249] = "GraphicsControlExtension", e6[e6.PlainTextExtension = 1] = "PlainTextExtension", e6[e6.CommentExtension = 254] = "CommentExtension", e6[e6.Image = 44] = "Image", e6[e6.EndOfFile = 59] = "EndOfFile";
})(E10 || (E10 = {}));
var w6 = { x: 0, y: 0 };
var ie3 = 0;
var W5 = 0.5;
var ne4 = 0;
var q10 = 0;
var G7 = 0;
function J4(e6, t12) {
  let i8 = [];
  for (let r8 = 0; r8 < t12; r8++) i8.push({ r: e6.data[e6.pos], g: e6.data[e6.pos + 1], b: e6.data[e6.pos + 2] }), e6.pos += 3;
  return i8;
}
function re3(e6, t12, i8, r8) {
  switch (e6.nextByte()) {
    case E10.GraphicsControlExtension: {
      let a7 = t12.frames[i8(false)];
      e6.pos++;
      let n12 = e6.nextByte();
      a7.GCreserved = (n12 & 224) >>> 5, a7.disposalMethod = (n12 & 28) >>> 2, a7.userInputDelayFlag = (n12 & 2) === 2;
      let o7 = (n12 & 1) === 1;
      a7.delayTime = e6.nextTwoBytes() * 10;
      let l16 = e6.nextByte();
      o7 && r8(l16), e6.pos++;
      break;
    }
    case E10.ApplicationExtension: {
      e6.pos++;
      let a7 = { identifier: e6.getString(8), authenticationCode: e6.getString(3), data: e6.readSubBlocksBin() };
      t12.applicationExtensions.push(a7);
      break;
    }
    case E10.CommentExtension: {
      t12.comments.push([i8(false), e6.readSubBlocks()]);
      break;
    }
    case E10.PlainTextExtension: {
      if (t12.globalColorTable.length === 0) throw new EvalError("plain text extension without global color table");
      e6.pos++, t12.frames[i8(false)].plainTextData = { left: e6.nextTwoBytes(), top: e6.nextTwoBytes(), width: e6.nextTwoBytes(), height: e6.nextTwoBytes(), charSize: { width: e6.nextTwoBytes(), height: e6.nextTwoBytes() }, foregroundColor: e6.nextByte(), backgroundColor: e6.nextByte(), text: e6.readSubBlocks() };
      break;
    }
    default:
      e6.skipSubBlocks();
      break;
  }
}
async function ae3(e6, t12, i8, r8, a7, n12) {
  let o7 = t12.frames[r8(true)];
  o7.left = e6.nextTwoBytes(), o7.top = e6.nextTwoBytes(), o7.width = e6.nextTwoBytes(), o7.height = e6.nextTwoBytes();
  let l16 = e6.nextByte(), g14 = (l16 & 128) === 128, d16 = (l16 & 64) === 64;
  o7.sortFlag = (l16 & 32) === 32, o7.reserved = (l16 & 24) >>> 3;
  let c14 = 1 << (l16 & 7) + 1;
  g14 && (o7.localColorTable = J4(e6, c14));
  let p15 = (f11) => {
    let { r: h9, g: m11, b: s17 } = (g14 ? o7.localColorTable : t12.globalColorTable)[f11];
    return f11 !== a7(null) ? { r: h9, g: m11, b: s17, a: 255 } : { r: h9, g: m11, b: s17, a: i8 ? ~~((h9 + m11 + s17) / 3) : 0 };
  }, x12 = (() => {
    try {
      return new ImageData(o7.width, o7.height, { colorSpace: "srgb" });
    } catch (f11) {
      if (f11 instanceof DOMException && f11.name === "IndexSizeError") return null;
      throw f11;
    }
  })();
  if (x12 == null) throw new EvalError("GIF frame size is to large");
  let k14 = e6.nextByte(), D10 = e6.readSubBlocksBin(), C13 = 1 << k14, v11 = (f11, h9) => {
    let m11 = f11 >>> 3, s17 = f11 & 7;
    return (D10[m11] + (D10[m11 + 1] << 8) + (D10[m11 + 2] << 16) & (1 << h9) - 1 << s17) >>> s17;
  };
  if (d16) {
    for (let f11 = 0, h9 = k14 + 1, m11 = 0, s17 = [[0]], y15 = 0; y15 < 4; y15++) {
      if (U6[y15] < o7.height) {
        let u11 = 0, T10 = 0, B4 = false;
        for (; !B4; ) {
          let R8 = f11;
          if (f11 = v11(m11, h9), m11 += h9 + 1, f11 === C13) {
            h9 = k14 + 1, s17.length = C13 + 2;
            for (let b14 = 0; b14 < s17.length; b14++) s17[b14] = b14 < C13 ? [b14] : [];
          } else {
            f11 >= s17.length ? s17.push(s17[R8].concat(s17[R8][0])) : R8 !== C13 && s17.push(s17[R8].concat(s17[f11][0]));
            for (let b14 of s17[f11]) {
              let { r: F7, g: z10, b: Y6, a: Z6 } = p15(b14);
              x12.data.set([F7, z10, Y6, Z6], U6[y15] * o7.width + $4[y15] * T10 + u11 % (o7.width * 4)), u11 += 4;
            }
            s17.length === 1 << h9 && h9 < 12 && h9++;
          }
          u11 === o7.width * 4 * (T10 + 1) && (T10++, U6[y15] + $4[y15] * T10 >= o7.height && (B4 = true));
        }
      }
      n12?.(e6.pos / (e6.data.length - 1), r8(false) + 1, x12, { x: o7.left, y: o7.top }, { width: t12.width, height: t12.height });
    }
    o7.image = x12, o7.bitmap = await createImageBitmap(x12);
  } else {
    let f11 = 0, h9 = k14 + 1, m11 = 0, s17 = -4, y15 = false, u11 = [[0]];
    for (; !y15; ) {
      let T10 = f11;
      if (f11 = v11(m11, h9), m11 += h9, f11 === C13) {
        h9 = k14 + 1, u11.length = C13 + 2;
        for (let B4 = 0; B4 < u11.length; B4++) u11[B4] = B4 < C13 ? [B4] : [];
      } else {
        if (f11 === C13 + 1) {
          y15 = true;
          break;
        }
        f11 >= u11.length ? u11.push(u11[T10].concat(u11[T10][0])) : T10 !== C13 && u11.push(u11[T10].concat(u11[f11][0]));
        for (let B4 of u11[f11]) {
          let { r: R8, g: b14, b: F7, a: z10 } = p15(B4);
          x12.data.set([R8, b14, F7, z10], s17 += 4);
        }
        u11.length >= 1 << h9 && h9 < 12 && h9++;
      }
    }
    o7.image = x12, o7.bitmap = await createImageBitmap(x12), n12?.((e6.pos + 1) / e6.data.length, r8(false) + 1, o7.image, { x: o7.left, y: o7.top }, { width: t12.width, height: t12.height });
  }
}
async function se3(e6, t12, i8, r8, a7, n12) {
  switch (e6.nextByte()) {
    case E10.EndOfFile:
      return true;
    case E10.Image:
      await ae3(e6, t12, i8, r8, a7, n12);
      break;
    case E10.Extension:
      re3(e6, t12, r8, a7);
      break;
    default:
      throw new EvalError("undefined block found");
  }
  return false;
}
function le3(e6) {
  for (let t12 of e6.applicationExtensions) if (t12.identifier + t12.authenticationCode === "NETSCAPE2.0") return t12.data[1] + (t12.data[2] << 8);
  return NaN;
}
async function ce3(e6, t12, i8) {
  i8 || (i8 = false);
  let r8 = await fetch(e6);
  if (!r8.ok && r8.status === 404) throw new EvalError("file not found");
  let a7 = await r8.arrayBuffer(), n12 = { width: 0, height: 0, totalTime: 0, colorRes: 0, pixelAspectRatio: 0, frames: [], sortFlag: false, globalColorTable: [], backgroundImage: new ImageData(1, 1, { colorSpace: "srgb" }), comments: [], applicationExtensions: [] }, o7 = new P8(new Uint8ClampedArray(a7));
  if (o7.getString(6) !== "GIF89a") throw new Error("not a supported GIF file");
  n12.width = o7.nextTwoBytes(), n12.height = o7.nextTwoBytes();
  let l16 = o7.nextByte(), g14 = (l16 & 128) === 128;
  n12.colorRes = (l16 & 112) >>> 4, n12.sortFlag = (l16 & 8) === 8;
  let d16 = 1 << (l16 & 7) + 1, c14 = o7.nextByte();
  n12.pixelAspectRatio = o7.nextByte(), n12.pixelAspectRatio !== 0 && (n12.pixelAspectRatio = (n12.pixelAspectRatio + 15) / 64), g14 && (n12.globalColorTable = J4(o7, d16));
  let p15 = (() => {
    try {
      return new ImageData(n12.width, n12.height, { colorSpace: "srgb" });
    } catch (s17) {
      if (s17 instanceof DOMException && s17.name === "IndexSizeError") return null;
      throw s17;
    }
  })();
  if (p15 == null) throw new Error("GIF frame size is to large");
  let { r: x12, g: k14, b: D10 } = n12.globalColorTable[c14];
  p15.data.set(g14 ? [x12, k14, D10, 255] : [0, 0, 0, 0]);
  for (let s17 = 4; s17 < p15.data.length; s17 *= 2) p15.data.copyWithin(s17, 0, s17);
  n12.backgroundImage = p15;
  let C13 = -1, v11 = true, f11 = -1, h9 = (s17) => (s17 && (v11 = true), C13), m11 = (s17) => (s17 != null && (f11 = s17), f11);
  try {
    do
      v11 && (n12.frames.push({ left: 0, top: 0, width: 0, height: 0, disposalMethod: I7.Replace, image: new ImageData(1, 1, { colorSpace: "srgb" }), plainTextData: null, userInputDelayFlag: false, delayTime: 0, sortFlag: false, localColorTable: [], reserved: 0, GCreserved: 0 }), C13++, f11 = -1, v11 = false);
    while (!await se3(o7, n12, i8, h9, m11, t12));
    n12.frames.length--;
    for (let s17 of n12.frames) {
      if (s17.userInputDelayFlag && s17.delayTime === 0) {
        n12.totalTime = 1 / 0;
        break;
      }
      n12.totalTime += s17.delayTime;
    }
    return n12;
  } catch (s17) {
    throw s17 instanceof EvalError ? new Error(`error while parsing frame ${C13} "${s17.message}"`) : s17;
  }
}
function K4(e6) {
  let { context: t12, radius: i8, particle: r8, delta: a7 } = e6, n12 = r8.image;
  if (!n12?.gifData || !n12.gif) return;
  let o7 = new OffscreenCanvas(n12.gifData.width, n12.gifData.height), l16 = o7.getContext("2d");
  if (!l16) throw new Error("could not create offscreen canvas context");
  l16.imageSmoothingQuality = "low", l16.imageSmoothingEnabled = false, l16.clearRect(w6.x, w6.y, o7.width, o7.height), r8.gifLoopCount === void 0 && (r8.gifLoopCount = n12.gifLoopCount ?? G7);
  let g14 = r8.gifFrame ?? ie3, d16 = { x: -n12.gifData.width * W5, y: -n12.gifData.height * W5 }, c14 = n12.gifData.frames[g14];
  if (r8.gifTime === void 0 && (r8.gifTime = ne4), !!c14.bitmap) {
    switch (t12.scale(i8 / n12.gifData.width, i8 / n12.gifData.height), c14.disposalMethod) {
      case I7.UndefinedA:
      case I7.UndefinedB:
      case I7.UndefinedC:
      case I7.UndefinedD:
      case I7.Replace:
        l16.drawImage(c14.bitmap, c14.left, c14.top), t12.drawImage(o7, d16.x, d16.y), l16.clearRect(w6.x, w6.y, o7.width, o7.height);
        break;
      case I7.Combine:
        l16.drawImage(c14.bitmap, c14.left, c14.top), t12.drawImage(o7, d16.x, d16.y);
        break;
      case I7.RestoreBackground:
        l16.drawImage(c14.bitmap, c14.left, c14.top), t12.drawImage(o7, d16.x, d16.y), l16.clearRect(w6.x, w6.y, o7.width, o7.height), n12.gifData.globalColorTable.length ? l16.putImageData(n12.gifData.backgroundImage, d16.x, d16.y) : l16.putImageData(n12.gifData.frames[q10].image, d16.x + c14.left, d16.y + c14.top);
        break;
      case I7.RestorePrevious:
        {
          let p15 = l16.getImageData(w6.x, w6.y, o7.width, o7.height);
          l16.drawImage(c14.bitmap, c14.left, c14.top), t12.drawImage(o7, d16.x, d16.y), l16.clearRect(w6.x, w6.y, o7.width, o7.height), l16.putImageData(p15, w6.x, w6.y);
        }
        break;
    }
    if (r8.gifTime += a7.value, r8.gifTime > c14.delayTime) {
      if (r8.gifTime -= c14.delayTime, ++g14 >= n12.gifData.frames.length) {
        if (--r8.gifLoopCount <= G7) return;
        g14 = q10, l16.clearRect(w6.x, w6.y, o7.width, o7.height);
      }
      r8.gifFrame = g14;
    }
    t12.scale(n12.gifData.width / i8, n12.gifData.height / i8);
  }
}
async function V4(e6) {
  if (e6.type !== "gif") {
    await L5(e6);
    return;
  }
  e6.loading = true;
  try {
    e6.gifData = await ce3(e6.source), e6.gifLoopCount = le3(e6.gifData) ?? G7, e6.gifLoopCount || (e6.gifLoopCount = 1 / 0);
  } catch {
    e6.error = true;
  }
  e6.loading = false;
}
var ge3 = 2;
var de3 = 1;
var he2 = 12;
var pe3 = 1;
var A5 = class {
  constructor(t12) {
    this.validTypes = ["image", "images"], this.loadImageShape = async (i8) => {
      if (!this._engine.loadImage) throw new Error(`${V2} image shape not initialized`);
      await this._engine.loadImage({ gif: i8.gif, name: i8.name, replaceColor: i8.replaceColor ?? false, src: i8.src });
    }, this._engine = t12;
  }
  addImage(t12) {
    this._engine.images || (this._engine.images = []), this._engine.images.push(t12);
  }
  draw(t12) {
    let { context: i8, radius: r8, particle: a7, opacity: n12 } = t12, o7 = a7.image, l16 = o7?.element;
    if (o7) {
      if (i8.globalAlpha = n12, o7.gif && o7.gifData) K4(t12);
      else if (l16) {
        let g14 = o7.ratio, d16 = { x: -r8, y: -r8 }, c14 = r8 * ge3;
        i8.drawImage(l16, d16.x, d16.y, c14, c14 / g14);
      }
      i8.globalAlpha = de3;
    }
  }
  getSidesCount() {
    return he2;
  }
  async init(t12) {
    let i8 = t12.actualOptions;
    if (!(!i8.preload || !this._engine.loadImage)) for (let r8 of i8.preload) await this._engine.loadImage(r8);
  }
  loadShape(t12) {
    if (t12.shape !== "image" && t12.shape !== "images") return;
    this._engine.images || (this._engine.images = []);
    let i8 = t12.shapeData;
    if (!i8) return;
    this._engine.images.find((a7) => a7.name === i8.name || a7.source === i8.src) || this.loadImageShape(i8).then(() => {
      this.loadShape(t12);
    });
  }
  particleInit(t12, i8) {
    if (i8.shape !== "image" && i8.shape !== "images") return;
    this._engine.images || (this._engine.images = []);
    let r8 = this._engine.images, a7 = i8.shapeData;
    if (!a7) return;
    let n12 = i8.getFillColor(), o7 = r8.find((g14) => g14.name === a7.name || g14.source === a7.src);
    if (!o7) return;
    let l16 = a7.replaceColor ?? o7.replaceColor;
    if (o7.loading) {
      setTimeout(() => {
        this.particleInit(t12, i8);
      });
      return;
    }
    (async () => {
      let g14;
      o7.svgData && n12 ? g14 = await Q4(o7, a7, n12, i8) : g14 = { color: n12, data: o7, element: o7.element, gif: o7.gif, gifData: o7.gifData, gifLoopCount: o7.gifLoopCount, loaded: true, ratio: a7.width && a7.height ? a7.width / a7.height : o7.ratio ?? pe3, replaceColor: l16, source: a7.src }, g14.ratio || (g14.ratio = 1);
      let d16 = a7.fill ?? i8.shapeFill, c14 = a7.close ?? i8.shapeClose, p15 = { image: g14, fill: d16, close: c14 };
      i8.image = p15.image, i8.shapeFill = p15.fill, i8.shapeClose = p15.close;
    })();
  }
};
var O7 = class {
  constructor() {
    this.src = "", this.gif = false;
  }
  load(t12) {
    h2(t12) || (t12.gif !== void 0 && (this.gif = t12.gif), t12.height !== void 0 && (this.height = t12.height), t12.name !== void 0 && (this.name = t12.name), t12.replaceColor !== void 0 && (this.replaceColor = t12.replaceColor), t12.src !== void 0 && (this.src = t12.src), t12.width !== void 0 && (this.width = t12.width));
  }
};
var _5 = class {
  constructor(t12) {
    this.id = "imagePreloader", this._engine = t12;
  }
  async getPlugin() {
    return await Promise.resolve(), {};
  }
  loadOptions(t12, i8) {
    if (!i8?.preload) return;
    t12.preload || (t12.preload = []);
    let r8 = t12.preload;
    for (let a7 of i8.preload) {
      let n12 = r8.find((o7) => o7.name === a7.name || o7.src === a7.src);
      if (n12) n12.load(a7);
      else {
        let o7 = new O7();
        o7.load(a7), r8.push(o7);
      }
    }
  }
  needsPlugin() {
    return true;
  }
};
var me3 = 3;
function we3(e6) {
  e6.loadImage || (e6.loadImage = async (t12) => {
    if (!t12.name && !t12.src) throw new Error(`${V2} no image source provided`);
    if (e6.images || (e6.images = []), !e6.images.find((i8) => i8.name === t12.name || i8.source === t12.src)) try {
      let i8 = { gif: t12.gif ?? false, name: t12.name ?? t12.src, source: t12.src, type: t12.src.substring(t12.src.length - me3), error: false, loading: true, replaceColor: t12.replaceColor, ratio: t12.width && t12.height ? t12.width / t12.height : void 0 };
      e6.images.push(i8);
      let r8;
      t12.gif ? r8 = V4 : r8 = t12.replaceColor ? S5 : L5, await r8(i8);
    } catch {
      throw new Error(`${V2} ${t12.name ?? t12.src} not found`);
    }
  });
}
async function Qe3(e6, t12 = true) {
  e6.checkVersion("3.8.1"), we3(e6);
  let i8 = new _5(e6);
  await e6.addPlugin(i8, t12), await e6.addShape(new A5(e6), t12);
}

// /:https://esm.sh/*@tsparticles/updater-life@3.8.1/es2022/updater-life.mjs
var u7 = class extends te2 {
  constructor() {
    super(), this.sync = false;
  }
  load(e6) {
    h2(e6) || (super.load(e6), e6.sync !== void 0 && (this.sync = e6.sync));
  }
};
var f9 = class extends te2 {
  constructor() {
    super(), this.sync = false;
  }
  load(e6) {
    h2(e6) || (super.load(e6), e6.sync !== void 0 && (this.sync = e6.sync));
  }
};
var d9 = class {
  constructor() {
    this.count = 0, this.delay = new u7(), this.duration = new f9();
  }
  load(e6) {
    h2(e6) || (e6.count !== void 0 && (this.count = e6.count), this.delay.load(e6.delay), this.duration.load(e6.duration));
  }
};
var r5 = 0;
var P9 = -1;
var g10 = 0;
var p11 = 0;
function w7(i8, e6, o7) {
  if (!i8.life) return;
  let n12 = i8.life, t12 = false;
  if (i8.spawning) if (n12.delayTime += e6.value, n12.delayTime >= i8.life.delay) t12 = true, i8.spawning = false, n12.delayTime = r5, n12.time = r5;
  else return;
  if (n12.duration === P9 || i8.spawning || (t12 ? n12.time = r5 : n12.time += e6.value, n12.time < n12.duration)) return;
  if (n12.time = r5, i8.life.count > g10 && i8.life.count--, i8.life.count === g10) {
    i8.destroy();
    return;
  }
  let F7 = x2(p11, o7.width), L7 = x2(p11, o7.width);
  i8.position.x = U2(F7), i8.position.y = U2(L7), i8.spawning = true, n12.delayTime = r5, n12.time = r5, i8.reset();
  let a7 = i8.options.life;
  a7 && (n12.delay = g(a7.delay.value) * I2, n12.duration = g(a7.duration.value) * I2);
}
var s11 = 0;
var v8 = 1;
var V5 = -1;
var l11 = class {
  constructor(e6) {
    this.container = e6;
  }
  init(e6) {
    let o7 = this.container, n12 = e6.options, t12 = n12.life;
    t12 && (e6.life = { delay: o7.retina.reduceFactor ? g(t12.delay.value) * (t12.delay.sync ? v8 : S2()) / o7.retina.reduceFactor * I2 : s11, delayTime: s11, duration: o7.retina.reduceFactor ? g(t12.duration.value) * (t12.duration.sync ? v8 : S2()) / o7.retina.reduceFactor * I2 : s11, time: s11, count: t12.count }, e6.life.duration <= s11 && (e6.life.duration = V5), e6.life.count <= s11 && (e6.life.count = V5), e6.life && (e6.spawning = e6.life.delay > s11));
  }
  isEnabled(e6) {
    return !e6.destroyed;
  }
  loadOptions(e6, ...o7) {
    e6.life || (e6.life = new d9());
    for (let n12 of o7) e6.life.load(n12?.life);
  }
  update(e6, o7) {
    !this.isEnabled(e6) || !e6.life || w7(e6, o7, this.container.canvas.size);
  }
};
async function M10(i8, e6 = true) {
  i8.checkVersion("3.8.1"), await i8.addParticleUpdater("life", async (o7) => Promise.resolve(new l11(o7)), e6);
}

// /:https://esm.sh/*@tsparticles/shape-line@3.8.1/es2022/shape-line.mjs
function n8(t12) {
  let { context: e6, particle: i8, radius: o7 } = t12, s17 = i8.shapeData, r8 = 0;
  e6.moveTo(-o7, r8), e6.lineTo(o7, r8), e6.lineCap = s17?.cap ?? "butt";
}
var c8 = 1;
var a5 = class {
  constructor() {
    this.validTypes = ["line"];
  }
  draw(e6) {
    n8(e6);
  }
  getSidesCount() {
    return c8;
  }
};
async function h6(t12, e6 = true) {
  t12.checkVersion("3.8.1"), await t12.addShape(new a5(), e6);
}

// /:https://esm.sh/*@tsparticles/move-parallax@3.8.1/es2022/move-parallax.mjs
var y12 = 0.5;
var e4 = class {
  init() {
  }
  isEnabled(a7) {
    return !xe() && !a7.destroyed && a7.container.actualOptions.interactivity.events.onHover.parallax.enable;
  }
  move(a7) {
    let n12 = a7.container, u11 = n12.actualOptions, r8 = u11.interactivity.events.onHover.parallax;
    if (xe() || !r8.enable) return;
    let f11 = r8.force, i8 = n12.interactivity.mouse.position;
    if (!i8) return;
    let s17 = n12.canvas.size, c14 = { x: s17.width * y12, y: s17.height * y12 }, l16 = r8.smooth, x12 = a7.getRadius() / f11, v11 = { x: (i8.x - c14.x) * x12, y: (i8.y - c14.y) * x12 }, { offset: t12 } = a7;
    t12.x += (v11.x - t12.x) / l16, t12.y += (v11.y - t12.y) / l16;
  }
};
async function b10(o7, a7 = true) {
  o7.checkVersion("3.8.1"), await o7.addMover("parallax", () => Promise.resolve(new e4()), a7);
}

// /:https://esm.sh/*@tsparticles/interaction-particles-attract@3.8.1/es2022/interaction-particles-attract.mjs
var u8 = 1e3;
var D6 = 1;
var o5 = class extends pr {
  constructor(t12) {
    super(t12);
  }
  clear() {
  }
  init() {
  }
  interact(t12) {
    let a7 = this.container;
    t12.attractDistance === void 0 && (t12.attractDistance = g(t12.options.move.attract.distance) * a7.retina.pixelRatio);
    let y15 = t12.attractDistance, i8 = t12.getPosition(), v11 = a7.particles.quadTree.queryCircle(i8, y15);
    for (let e6 of v11) {
      if (t12 === e6 || !e6.options.move.attract.enable || e6.destroyed || e6.spawning) continue;
      let m11 = e6.getPosition(), { dx: p15, dy: x12 } = Ai2(i8, m11), n12 = t12.options.move.attract.rotate, s17 = p15 / (n12.x * u8), l16 = x12 / (n12.y * u8), c14 = e6.size.value / t12.size.value, d16 = D6 / c14;
      t12.velocity.x -= s17 * c14, t12.velocity.y -= l16 * c14, e6.velocity.x += s17 * d16, e6.velocity.y += l16 * d16;
    }
  }
  isEnabled(t12) {
    return t12.options.move.attract.enable;
  }
  reset() {
  }
};
async function F5(r8, t12 = true) {
  r8.checkVersion("3.8.1"), await r8.addInteractor("particlesAttract", (a7) => Promise.resolve(new o5(a7)), t12);
}

// /:https://esm.sh/*@tsparticles/interaction-particles-collisions@3.8.1/es2022/interaction-particles-collisions.mjs
var M11 = 0.5;
var k10 = 10;
var C8 = 0;
function b11(e6, o7, i8, t12, n12, s17) {
  let a7 = me2(e6.options.collisions.absorb.speed * n12.factor / k10, C8, t12);
  e6.size.value += a7 * M11, i8.size.value -= a7, t12 <= s17 && (i8.size.value = 0, i8.destroy());
}
function m10(e6, o7, i8, t12) {
  let n12 = e6.getRadius(), s17 = o7.getRadius();
  n12 === void 0 && s17 !== void 0 ? e6.destroy() : n12 !== void 0 && s17 === void 0 ? o7.destroy() : n12 !== void 0 && s17 !== void 0 && (n12 >= s17 ? b11(e6, n12, o7, s17, i8, t12) : b11(o7, s17, e6, n12, i8, t12));
}
var y13 = (e6) => {
  e6.collisionMaxSpeed === void 0 && (e6.collisionMaxSpeed = g(e6.options.collisions.maxSpeed)), e6.velocity.length > e6.collisionMaxSpeed && (e6.velocity.length = e6.collisionMaxSpeed);
};
function d10(e6, o7) {
  Rs(Ps(e6), Ps(o7)), y13(e6), y13(o7);
}
function x9(e6, o7) {
  !e6.unbreakable && !o7.unbreakable && d10(e6, o7), e6.getRadius() === void 0 && o7.getRadius() !== void 0 ? e6.destroy() : e6.getRadius() !== void 0 && o7.getRadius() === void 0 ? o7.destroy() : e6.getRadius() !== void 0 && o7.getRadius() !== void 0 && (e6.getRadius() >= o7.getRadius() ? o7 : e6).destroy();
}
function R7(e6, o7, i8, t12) {
  switch (e6.options.collisions.mode) {
    case Ft.absorb: {
      m10(e6, o7, i8, t12);
      break;
    }
    case Ft.bounce: {
      d10(e6, o7);
      break;
    }
    case Ft.destroy: {
      x9(e6, o7);
      break;
    }
  }
}
var q11 = 2;
var c9 = class extends pr {
  constructor(o7) {
    super(o7);
  }
  clear() {
  }
  init() {
  }
  interact(o7, i8) {
    if (o7.destroyed || o7.spawning) return;
    let t12 = this.container, n12 = o7.getPosition(), s17 = o7.getRadius(), a7 = t12.particles.quadTree.queryCircle(n12, s17 * q11);
    for (let r8 of a7) {
      if (o7 === r8 || !r8.options.collisions.enable || o7.options.collisions.mode !== r8.options.collisions.mode || r8.destroyed || r8.spawning) continue;
      let u11 = r8.getPosition(), f11 = r8.getRadius();
      if (Math.abs(Math.round(n12.z) - Math.round(u11.z)) > s17 + f11) continue;
      let h9 = Re2(n12, u11), P13 = s17 + f11;
      h9 > P13 || R7(o7, r8, i8, t12.retina.pixelRatio);
    }
  }
  isEnabled(o7) {
    return o7.options.collisions.enable;
  }
  reset() {
  }
};
async function Q5(e6, o7 = true) {
  e6.checkVersion("3.8.1"), await e6.addInteractor("particlesCollisions", (i8) => Promise.resolve(new c9(i8)), o7);
}

// /:https://esm.sh/*@tsparticles/interaction-particles-links@3.8.1/es2022/interaction-particles-links.mjs
var O8 = 2;
var b12 = class extends Ge2 {
  constructor(i8, e6, n12, t12) {
    super(i8, e6, n12), this.canvasSize = t12, this.canvasSize = { ...t12 };
  }
  contains(i8) {
    let { width: e6, height: n12 } = this.canvasSize, { x: t12, y: s17 } = i8;
    return super.contains(i8) || super.contains({ x: t12 - e6, y: s17 }) || super.contains({ x: t12 - e6, y: s17 - n12 }) || super.contains({ x: t12, y: s17 - n12 });
  }
  intersects(i8) {
    if (super.intersects(i8)) return true;
    let e6 = i8, n12 = i8, t12 = { x: i8.position.x - this.canvasSize.width, y: i8.position.y - this.canvasSize.height };
    if (n12.radius !== void 0) {
      let s17 = new Ge2(t12.x, t12.y, n12.radius * O8);
      return super.intersects(s17);
    } else if (e6.size !== void 0) {
      let s17 = new he(t12.x, t12.y, e6.size.width * O8, e6.size.height * O8);
      return super.intersects(s17);
    }
    return false;
  }
};
var C9 = class {
  constructor() {
    this.blur = 5, this.color = new T2(), this.color.value = "#000", this.enable = false;
  }
  load(i8) {
    h2(i8) || (i8.blur !== void 0 && (this.blur = i8.blur), this.color = T2.create(this.color, i8.color), i8.enable !== void 0 && (this.enable = i8.enable));
  }
};
var q12 = class {
  constructor() {
    this.enable = false, this.frequency = 1;
  }
  load(i8) {
    h2(i8) || (i8.color !== void 0 && (this.color = T2.create(this.color, i8.color)), i8.enable !== void 0 && (this.enable = i8.enable), i8.frequency !== void 0 && (this.frequency = i8.frequency), i8.opacity !== void 0 && (this.opacity = i8.opacity));
  }
};
var _6 = class {
  constructor() {
    this.blink = false, this.color = new T2(), this.color.value = "#fff", this.consent = false, this.distance = 100, this.enable = false, this.frequency = 1, this.opacity = 1, this.shadow = new C9(), this.triangles = new q12(), this.width = 1, this.warp = false;
  }
  load(i8) {
    h2(i8) || (i8.id !== void 0 && (this.id = i8.id), i8.blink !== void 0 && (this.blink = i8.blink), this.color = T2.create(this.color, i8.color), i8.consent !== void 0 && (this.consent = i8.consent), i8.distance !== void 0 && (this.distance = i8.distance), i8.enable !== void 0 && (this.enable = i8.enable), i8.frequency !== void 0 && (this.frequency = i8.frequency), i8.opacity !== void 0 && (this.opacity = i8.opacity), this.shadow.load(i8.shadow), this.triangles.load(i8.triangles), i8.width !== void 0 && (this.width = i8.width), i8.warp !== void 0 && (this.warp = i8.warp));
  }
};
var V6 = 2;
var oi4 = 1;
var L6 = { x: 0, y: 0 };
var ri2 = 0;
function li3(l16, i8, e6, n12, t12) {
  let { dx: s17, dy: o7, distance: r8 } = Ai2(l16, i8);
  if (!t12 || r8 <= e6) return r8;
  let a7 = { x: Math.abs(s17), y: Math.abs(o7) }, f11 = { x: Math.min(a7.x, n12.width - a7.x), y: Math.min(a7.y, n12.height - a7.y) };
  return Math.sqrt(f11.x ** V6 + f11.y ** V6);
}
var P10 = class extends pr {
  constructor(i8, e6) {
    super(i8), this._setColor = (n12) => {
      if (!n12.options.links) return;
      let t12 = this._linkContainer, s17 = n12.options.links, o7 = s17.id === void 0 ? t12.particles.linksColor : t12.particles.linksColors.get(s17.id);
      if (o7) return;
      let r8 = s17.color;
      o7 = Bs(this._engine, r8, s17.blink, s17.consent), s17.id === void 0 ? t12.particles.linksColor = o7 : t12.particles.linksColors.set(s17.id, o7);
    }, this._linkContainer = i8, this._engine = e6;
  }
  clear() {
  }
  init() {
    this._linkContainer.particles.linksColor = void 0, this._linkContainer.particles.linksColors = /* @__PURE__ */ new Map();
  }
  interact(i8) {
    if (!i8.options.links) return;
    i8.links = [];
    let e6 = i8.getPosition(), n12 = this.container, t12 = n12.canvas.size;
    if (e6.x < L6.x || e6.y < L6.y || e6.x > t12.width || e6.y > t12.height) return;
    let s17 = i8.options.links, o7 = s17.opacity, r8 = i8.retina.linksDistance ?? ri2, a7 = s17.warp, f11;
    a7 ? f11 = new b12(e6.x, e6.y, r8, t12) : f11 = new Ge2(e6.x, e6.y, r8);
    let y15 = n12.particles.quadTree.query(f11);
    for (let d16 of y15) {
      let h9 = d16.options.links;
      if (i8 === d16 || !h9?.enable || s17.id !== h9.id || d16.spawning || d16.destroyed || !d16.links || i8.links.some((g14) => g14.destination === d16) || d16.links.some((g14) => g14.destination === i8)) continue;
      let u11 = d16.getPosition();
      if (u11.x < L6.x || u11.y < L6.y || u11.x > t12.width || u11.y > t12.height) continue;
      let c14 = li3(e6, u11, r8, t12, a7 && h9.warp);
      if (c14 > r8) continue;
      let p15 = (oi4 - c14 / r8) * o7;
      this._setColor(i8), i8.links.push({ destination: d16, opacity: p15 });
    }
  }
  isEnabled(i8) {
    return !!i8.options.links?.enable;
  }
  loadParticlesOptions(i8, ...e6) {
    i8.links || (i8.links = new _6());
    for (let n12 of e6) i8.links.load(n12?.links);
  }
  reset() {
  }
};
async function j7(l16, i8 = true) {
  await l16.addInteractor("particlesLinks", async (e6) => Promise.resolve(new P10(e6, l16)), i8);
}
function di3(l16, i8, e6, n12) {
  l16.beginPath(), l16.moveTo(i8.x, i8.y), l16.lineTo(e6.x, e6.y), l16.lineTo(n12.x, n12.y), l16.closePath();
}
function K5(l16) {
  let i8 = false, { begin: e6, end: n12, engine: t12, maxDistance: s17, context: o7, canvasSize: r8, width: a7, backgroundMask: f11, colorLine: y15, opacity: d16, links: h9 } = l16;
  if (Re2(e6, n12) <= s17) Ys(o7, e6, n12), i8 = true;
  else if (h9.warp) {
    let c14, p15, g14 = { x: n12.x - r8.width, y: n12.y }, w9 = Ai2(e6, g14);
    if (w9.distance <= s17) {
      let k14 = e6.y - w9.dy / w9.dx * e6.x;
      c14 = { x: 0, y: k14 }, p15 = { x: r8.width, y: k14 };
    } else {
      let k14 = { x: n12.x, y: n12.y - r8.height }, x12 = Ai2(e6, k14);
      if (x12.distance <= s17) {
        let m11 = -(e6.y - x12.dy / x12.dx * e6.x) / (x12.dy / x12.dx);
        c14 = { x: m11, y: 0 }, p15 = { x: m11, y: r8.height };
      } else {
        let D10 = { x: n12.x - r8.width, y: n12.y - r8.height }, m11 = Ai2(e6, D10);
        if (m11.distance <= s17) {
          let I9 = e6.y - m11.dy / m11.dx * e6.x;
          c14 = { x: -I9 / (m11.dy / m11.dx), y: I9 }, p15 = { x: c14.x + r8.width, y: c14.y + r8.height };
        }
      }
    }
    c14 && p15 && (Ys(o7, e6, c14), Ys(o7, n12, p15), i8 = true);
  }
  if (!i8) return;
  o7.lineWidth = a7, f11.enable && (o7.globalCompositeOperation = f11.composite), o7.strokeStyle = Se2(y15, d16);
  let { shadow: u11 } = h9;
  if (u11.enable) {
    let c14 = Q2(t12, u11.color);
    c14 && (o7.shadowBlur = u11.blur, o7.shadowColor = Se2(c14));
  }
  o7.stroke();
}
function A6(l16) {
  let { context: i8, pos1: e6, pos2: n12, pos3: t12, backgroundMask: s17, colorTriangle: o7, opacityTriangle: r8 } = l16;
  di3(i8, e6, n12, t12), s17.enable && (i8.globalCompositeOperation = s17.composite), i8.fillStyle = Se2(o7, r8), i8.fill();
}
function ui3(l16) {
  return l16.sort((i8, e6) => i8 - e6), l16.join("_");
}
function z9(l16, i8) {
  let e6 = ui3(l16.map((t12) => t12.id)), n12 = i8.get(e6);
  return n12 === void 0 && (n12 = S2(), i8.set(e6, n12)), n12;
}
var J5 = 0;
var W6 = 0;
var Q6 = 0;
var ki2 = 0.5;
var yi3 = 1;
var T7 = class {
  constructor(i8, e6) {
    this._drawLinkLine = (n12, t12) => {
      let s17 = n12.options.links;
      if (!s17?.enable) return;
      let o7 = this._container, r8 = o7.actualOptions, a7 = t12.destination, f11 = n12.getPosition(), y15 = a7.getPosition(), d16 = t12.opacity;
      o7.canvas.draw((h9) => {
        let u11, c14 = n12.options.twinkle?.lines;
        if (c14?.enable) {
          let k14 = c14.frequency, x12 = Q2(this._engine, c14.color);
          S2() < k14 && x12 && (u11 = x12, d16 = g(c14.opacity));
        }
        if (!u11) {
          let k14 = s17.id !== void 0 ? o7.particles.linksColors.get(s17.id) : o7.particles.linksColor;
          u11 = qs(n12, a7, k14);
        }
        if (!u11) return;
        let p15 = n12.retina.linksWidth ?? W6, g14 = n12.retina.linksDistance ?? Q6, { backgroundMask: w9 } = r8;
        K5({ context: h9, width: p15, begin: f11, end: y15, engine: this._engine, maxDistance: g14, canvasSize: o7.canvas.size, links: s17, backgroundMask: w9, colorLine: u11, opacity: d16 });
      });
    }, this._drawLinkTriangle = (n12, t12, s17) => {
      let o7 = n12.options.links;
      if (!o7?.enable) return;
      let r8 = o7.triangles;
      if (!r8.enable) return;
      let a7 = this._container, f11 = a7.actualOptions, y15 = t12.destination, d16 = s17.destination, h9 = r8.opacity ?? (t12.opacity + s17.opacity) * ki2;
      h9 <= J5 || a7.canvas.draw((u11) => {
        let c14 = n12.getPosition(), p15 = y15.getPosition(), g14 = d16.getPosition(), w9 = n12.retina.linksDistance ?? Q6;
        if (Re2(c14, p15) > w9 || Re2(g14, p15) > w9 || Re2(g14, c14) > w9) return;
        let k14 = Q2(this._engine, r8.color);
        if (!k14) {
          let x12 = o7.id !== void 0 ? a7.particles.linksColors.get(o7.id) : a7.particles.linksColor;
          k14 = qs(n12, y15, x12);
        }
        k14 && A6({ context: u11, pos1: c14, pos2: p15, pos3: g14, backgroundMask: f11.backgroundMask, colorTriangle: k14, opacityTriangle: h9 });
      });
    }, this._drawTriangles = (n12, t12, s17, o7) => {
      let r8 = s17.destination;
      if (!(n12.links?.triangles.enable && r8.options.links?.triangles.enable)) return;
      let a7 = r8.links?.filter((f11) => {
        let y15 = this._getLinkFrequency(r8, f11.destination);
        return r8.options.links && y15 <= r8.options.links.frequency && o7.findIndex((h9) => h9.destination === f11.destination) >= 0;
      });
      if (a7?.length) for (let f11 of a7) {
        let y15 = f11.destination;
        this._getTriangleFrequency(t12, r8, y15) > n12.links.triangles.frequency || this._drawLinkTriangle(t12, s17, f11);
      }
    }, this._getLinkFrequency = (n12, t12) => z9([n12, t12], this._freqs.links), this._getTriangleFrequency = (n12, t12, s17) => z9([n12, t12, s17], this._freqs.triangles), this._container = i8, this._engine = e6, this._freqs = { links: /* @__PURE__ */ new Map(), triangles: /* @__PURE__ */ new Map() };
  }
  drawParticle(i8, e6) {
    let { links: n12, options: t12 } = e6;
    if (!n12?.length) return;
    let s17 = n12.filter((o7) => t12.links && (t12.links.frequency >= yi3 || this._getLinkFrequency(e6, o7.destination) <= t12.links.frequency));
    for (let o7 of s17) this._drawTriangles(t12, e6, o7, s17), o7.opacity > J5 && (e6.retina.linksWidth ?? W6) > W6 && this._drawLinkLine(e6, o7);
  }
  async init() {
    this._freqs.links = /* @__PURE__ */ new Map(), this._freqs.triangles = /* @__PURE__ */ new Map(), await Promise.resolve();
  }
  particleCreated(i8) {
    if (i8.links = [], !i8.options.links) return;
    let e6 = this._container.retina.pixelRatio, { retina: n12 } = i8, { distance: t12, width: s17 } = i8.options.links;
    n12.linksDistance = t12 * e6, n12.linksWidth = s17 * e6;
  }
  particleDestroyed(i8) {
    i8.links = [];
  }
};
var v9 = class {
  constructor(i8) {
    this.id = "links", this._engine = i8;
  }
  getPlugin(i8) {
    return Promise.resolve(new T7(i8, this._engine));
  }
  loadOptions() {
  }
  needsPlugin() {
    return true;
  }
};
async function U7(l16, i8 = true) {
  let e6 = new v9(l16);
  await l16.addPlugin(e6, i8);
}
async function Gi2(l16, i8 = true) {
  l16.checkVersion("3.8.1"), await j7(l16, i8), await U7(l16, i8);
}

// /:https://esm.sh/*@tsparticles/shape-polygon@3.8.1/es2022/shape-polygon.mjs
var f10 = 180;
var s12 = { x: 0, y: 0 };
var x10 = 2;
function l12(r8, e6, t12) {
  let { context: o7 } = r8, u11 = t12.count.numerator * t12.count.denominator, a7 = t12.count.numerator / t12.count.denominator, m11 = f10 * (a7 - x10) / a7, y15 = Math.PI - lt2(m11);
  if (o7) {
    o7.beginPath(), o7.translate(e6.x, e6.y), o7.moveTo(s12.x, s12.y);
    for (let d16 = 0; d16 < u11; d16++) o7.lineTo(t12.length, s12.y), o7.translate(t12.length, s12.y), o7.rotate(y15);
  }
}
var w8 = 5;
var n9 = class {
  draw(e6) {
    let { particle: t12, radius: o7 } = e6, u11 = this.getCenter(t12, o7), a7 = this.getSidesData(t12, o7);
    l12(e6, u11, a7);
  }
  getSidesCount(e6) {
    let t12 = e6.shapeData;
    return Math.round(g(t12?.sides ?? w8));
  }
};
var p12 = 3.5;
var g11 = 2.66;
var C10 = 3;
var i6 = class extends n9 {
  constructor() {
    super(...arguments), this.validTypes = ["polygon"];
  }
  getCenter(e6, t12) {
    return { x: -t12 / (e6.sides / p12), y: -t12 / (g11 / p12) };
  }
  getSidesData(e6, t12) {
    let o7 = e6.sides;
    return { count: { denominator: 1, numerator: o7 }, length: t12 * g11 / (o7 / C10) };
  }
};
var D7 = 1.66;
var P11 = 3;
var T8 = 2;
var c10 = class extends n9 {
  constructor() {
    super(...arguments), this.validTypes = ["triangle"];
  }
  getCenter(e6, t12) {
    return { x: -t12, y: t12 / D7 };
  }
  getSidesCount() {
    return P11;
  }
  getSidesData(e6, t12) {
    let o7 = t12 * T8;
    return { count: { denominator: 2, numerator: 3 }, length: o7 };
  }
};
async function F6(r8, e6 = true) {
  r8.checkVersion("3.8.1"), await r8.addShape(new i6(), e6);
}
async function V7(r8, e6 = true) {
  r8.checkVersion("3.8.1"), await r8.addShape(new c10(), e6);
}
async function q13(r8, e6 = true) {
  r8.checkVersion("3.8.1"), await F6(r8, e6), await V7(r8, e6);
}

// /:https://esm.sh/*@tsparticles/updater-rotate@3.8.1/es2022/updater-rotate.mjs
var r6 = class {
  constructor() {
    this.enable = false, this.speed = 0, this.decay = 0, this.sync = false;
  }
  load(e6) {
    h2(e6) || (e6.enable !== void 0 && (this.enable = e6.enable), e6.speed !== void 0 && (this.speed = x2(e6.speed)), e6.decay !== void 0 && (this.decay = x2(e6.decay)), e6.sync !== void 0 && (this.sync = e6.sync));
  }
};
var a6 = class extends te2 {
  constructor() {
    super(), this.animation = new r6(), this.direction = mr.clockwise, this.path = false, this.value = 0;
  }
  load(e6) {
    h2(e6) || (super.load(e6), e6.direction !== void 0 && (this.direction = e6.direction), this.animation.load(e6.animation), e6.path !== void 0 && (this.path = e6.path));
  }
};
var h7 = 2;
var g12 = Math.PI * h7;
var k11 = 1;
var v10 = 360;
var d11 = class {
  constructor(e6) {
    this.container = e6;
  }
  init(e6) {
    let t12 = e6.options.rotate;
    if (!t12) return;
    e6.rotate = { enable: t12.animation.enable, value: lt2(g(t12.value)), min: 0, max: g12 }, e6.pathRotation = t12.path;
    let n12 = t12.direction;
    switch (n12 === mr.random && (n12 = Math.floor(S2() * h7) > 0 ? mr.counterClockwise : mr.clockwise), n12) {
      case mr.counterClockwise:
      case "counterClockwise":
        e6.rotate.status = O2.decreasing;
        break;
      case mr.clockwise:
        e6.rotate.status = O2.increasing;
        break;
    }
    let s17 = t12.animation;
    s17.enable && (e6.rotate.decay = k11 - g(s17.decay), e6.rotate.velocity = g(s17.speed) / v10 * this.container.retina.reduceFactor, s17.sync || (e6.rotate.velocity *= S2())), e6.rotation = e6.rotate.value;
  }
  isEnabled(e6) {
    let t12 = e6.options.rotate;
    return t12 ? !e6.destroyed && !e6.spawning && (!!t12.value || t12.animation.enable || t12.path) : false;
  }
  loadOptions(e6, ...t12) {
    e6.rotate || (e6.rotate = new a6());
    for (let n12 of t12) e6.rotate.load(n12?.rotate);
  }
  update(e6, t12) {
    this.isEnabled(e6) && (e6.isRotating = !!e6.rotate, e6.rotate && (Ds(e6, e6.rotate, false, J2.none, t12), e6.rotation = e6.rotate.value));
  }
};
async function U8(o7, e6 = true) {
  o7.checkVersion("3.8.1"), await o7.addParticleUpdater("rotate", (t12) => Promise.resolve(new d11(t12)), e6);
}

// /:https://esm.sh/*@tsparticles/shape-square@3.8.1/es2022/shape-square.mjs
var s13 = Math.sqrt(2);
var c11 = 2;
function d12(r8) {
  let { context: e6, radius: i8 } = r8, a7 = i8 / s13, o7 = a7 * c11;
  e6.rect(-a7, -a7, o7, o7);
}
var u9 = 4;
var t9 = class {
  constructor() {
    this.validTypes = ["edge", "square"];
  }
  draw(e6) {
    d12(e6);
  }
  getSidesCount() {
    return u9;
  }
};
async function S6(r8, e6 = true) {
  r8.checkVersion("3.8.1"), await r8.addShape(new t9(), e6);
}

// /:https://esm.sh/*@tsparticles/shape-star@3.8.1/es2022/shape-star.mjs
var e5 = { x: 0, y: 0 };
function d13(s17) {
  let { context: t12, particle: a7, radius: r8 } = s17, n12 = a7.sides, u11 = a7.starInset ?? 2;
  t12.moveTo(e5.x, e5.y - r8);
  for (let i8 = 0; i8 < n12; i8++) t12.rotate(Math.PI / n12), t12.lineTo(e5.x, e5.y - r8 * u11), t12.rotate(Math.PI / n12), t12.lineTo(e5.x, e5.y - r8);
}
var l13 = 2;
var p13 = 5;
var o6 = class {
  constructor() {
    this.validTypes = ["star"];
  }
  draw(t12) {
    d13(t12);
  }
  getSidesCount(t12) {
    let a7 = t12.shapeData;
    return Math.round(g(a7?.sides ?? p13));
  }
  particleInit(t12, a7) {
    let r8 = a7.shapeData;
    a7.starInset = g(r8?.inset ?? l13);
  }
};
async function S7(s17, t12 = true) {
  s17.checkVersion("3.8.1"), await s17.addShape(new o6(), t12);
}

// /:https://esm.sh/*@tsparticles/updater-stroke-color@3.8.1/es2022/updater-stroke-color.mjs
var k12 = 1;
var s14 = class {
  constructor(o7, e6) {
    this._container = o7, this._engine = e6;
  }
  init(o7) {
    let e6 = this._container, t12 = o7.options, r8 = G2(t12.stroke, o7.id, t12.reduceDuplicates);
    o7.strokeWidth = g(r8.width) * e6.retina.pixelRatio, o7.strokeOpacity = g(r8.opacity ?? k12), o7.strokeAnimation = r8.color?.animation;
    let i8 = Wi2(this._engine, r8.color) ?? o7.getFillColor();
    i8 && (o7.strokeColor = Ws(i8, o7.strokeAnimation, e6.retina.reduceFactor));
  }
  isEnabled(o7) {
    let e6 = o7.strokeAnimation, { strokeColor: t12 } = o7;
    return !o7.destroyed && !o7.spawning && !!e6 && (t12?.h.value !== void 0 && t12.h.enable || t12?.s.value !== void 0 && t12.s.enable || t12?.l.value !== void 0 && t12.l.enable);
  }
  update(o7, e6) {
    this.isEnabled(o7) && Us(o7.strokeColor, e6);
  }
};
async function C11(n12, o7 = true) {
  n12.checkVersion("3.8.1"), await n12.addParticleUpdater("strokeColor", (e6) => Promise.resolve(new s14(e6, n12)), o7);
}

// /:https://esm.sh/*@tsparticles/slim@3.8.1/es2022/slim.mjs
async function n10(a7, o7 = true) {
  a7.checkVersion("3.8.1"), await b10(a7, false), await z7(a7, false), await U4(a7, false), await Be3(a7, false), await Y4(a7, false), await Q3(a7, false), await l10(a7, false), await I6(a7, false), await q9(a7, false), await fe2(a7, false), await E9(a7, false), await F5(a7, false), await Q5(a7, false), await Gi2(a7, false), await r4(a7, false), await T4(a7, false), await Qe3(a7, false), await h6(a7, false), await q13(a7, false), await S6(a7, false), await S7(a7, false), await M10(a7, false), await U8(a7, false), await C11(a7, false), await y6(a7, o7);
}

// /:https://esm.sh/*@tsparticles/shape-text@3.8.1/es2022/shape-text.mjs
var h8 = 2;
var d14 = 0.5;
function u10(r8) {
  let { context: e6, particle: t12, radius: o7, opacity: a7 } = r8, i8 = t12.shapeData;
  if (!i8) return;
  let n12 = i8.value;
  if (n12 === void 0) return;
  t12.text === void 0 && (t12.text = G2(n12, t12.randomIndexData));
  let s17 = t12.text, l16 = i8.style ?? "", x12 = i8.weight ?? "400", m11 = Math.round(o7) * h8, y15 = i8.font ?? "Verdana", w9 = t12.shapeFill, f11 = s17?.split(`
`);
  if (f11) {
    e6.font = `${l16} ${x12} ${m11}px "${y15}"`, e6.globalAlpha = a7;
    for (let p15 = 0; p15 < f11.length; p15++) T9(e6, f11[p15], o7, a7, p15, w9);
    e6.globalAlpha = 1;
  }
}
function T9(r8, e6, t12, o7, a7, i8) {
  let n12 = e6.length * t12 * d14, s17 = { x: -n12, y: t12 * d14 }, l16 = t12 * h8;
  i8 ? r8.fillText(e6, s17.x, s17.y + l16 * a7) : r8.strokeText(e6, s17.x, s17.y + l16 * a7);
}
var c12 = class {
  constructor() {
    this.validTypes = ["text", "character", "char", "multiline-text"];
  }
  draw(e6) {
    u10(e6);
  }
  async init(e6) {
    let t12 = e6.actualOptions, { validTypes: o7 } = this;
    if (o7.find((a7) => ht2(a7, t12.particles.shape.type))) {
      let a7 = o7.map((n12) => t12.particles.shape.options[n12]).find((n12) => !!n12), i8 = [];
      A2(a7, (n12) => {
        i8.push(ws(n12.font, n12.weight));
      }), await Promise.all(i8);
    }
  }
  particleInit(e6, t12) {
    if (!t12.shape || !this.validTypes.includes(t12.shape)) return;
    let o7 = t12.shapeData;
    if (o7 === void 0) return;
    let a7 = o7.value;
    a7 !== void 0 && (t12.text = G2(a7, t12.randomIndexData));
  }
};
async function k13(r8, e6 = true) {
  r8.checkVersion("3.8.1"), await r8.addShape(new c12(), e6);
}

// /:https://esm.sh/*@tsparticles/updater-tilt@3.8.1/es2022/updater-tilt.mjs
var t10;
(function(n12) {
  n12.clockwise = "clockwise", n12.counterClockwise = "counter-clockwise", n12.random = "random";
})(t10 || (t10 = {}));
var r7 = class {
  constructor() {
    this.enable = false, this.speed = 0, this.decay = 0, this.sync = false;
  }
  load(e6) {
    h2(e6) || (e6.enable !== void 0 && (this.enable = e6.enable), e6.speed !== void 0 && (this.speed = x2(e6.speed)), e6.decay !== void 0 && (this.decay = x2(e6.decay)), e6.sync !== void 0 && (this.sync = e6.sync));
  }
};
var c13 = class extends te2 {
  constructor() {
    super(), this.animation = new r7(), this.direction = t10.clockwise, this.enable = false, this.value = 0;
  }
  load(e6) {
    super.load(e6), !h2(e6) && (this.animation.load(e6.animation), e6.direction !== void 0 && (this.direction = e6.direction), e6.enable !== void 0 && (this.enable = e6.enable));
  }
};
var s15 = 1;
var b13 = 2;
var g13 = Math.PI * b13;
var D8 = 360;
var d15 = class {
  constructor(e6) {
    this.container = e6;
  }
  getTransformValues(e6) {
    let i8 = e6.tilt?.enable && e6.tilt;
    return { b: i8 ? Math.cos(i8.value) * i8.cosDirection : void 0, c: i8 ? Math.sin(i8.value) * i8.sinDirection : void 0 };
  }
  init(e6) {
    let i8 = e6.options.tilt;
    if (!i8) return;
    e6.tilt = { enable: i8.enable, value: lt2(g(i8.value)), sinDirection: S2() >= w ? s15 : -s15, cosDirection: S2() >= w ? s15 : -s15, min: 0, max: g13 };
    let o7 = i8.direction;
    switch (o7 === t10.random && (o7 = Math.floor(S2() * b13) > 0 ? t10.counterClockwise : t10.clockwise), o7) {
      case t10.counterClockwise:
      case "counterClockwise":
        e6.tilt.status = O2.decreasing;
        break;
      case t10.clockwise:
        e6.tilt.status = O2.increasing;
        break;
    }
    let l16 = e6.options.tilt?.animation;
    l16?.enable && (e6.tilt.decay = s15 - g(l16.decay), e6.tilt.velocity = g(l16.speed) / D8 * this.container.retina.reduceFactor, l16.sync || (e6.tilt.velocity *= S2()));
  }
  isEnabled(e6) {
    let i8 = e6.options.tilt?.animation;
    return !e6.destroyed && !e6.spawning && !!i8?.enable;
  }
  loadOptions(e6, ...i8) {
    e6.tilt || (e6.tilt = new c13());
    for (let o7 of i8) e6.tilt.load(o7?.tilt);
  }
  async update(e6, i8) {
    !this.isEnabled(e6) || !e6.tilt || (Ds(e6, e6.tilt, false, J2.none, i8), await Promise.resolve());
  }
};
async function W7(n12, e6 = true) {
  n12.checkVersion("3.8.1"), await n12.addParticleUpdater("tilt", (i8) => Promise.resolve(new d15(i8)), e6);
}

// /:https://esm.sh/*@tsparticles/updater-twinkle@3.8.1/es2022/updater-twinkle.mjs
var n11 = class {
  constructor() {
    this.enable = false, this.frequency = 0.05, this.opacity = 1;
  }
  load(e6) {
    h2(e6) || (e6.color !== void 0 && (this.color = T2.create(this.color, e6.color)), e6.enable !== void 0 && (this.enable = e6.enable), e6.frequency !== void 0 && (this.frequency = e6.frequency), e6.opacity !== void 0 && (this.opacity = x2(e6.opacity)));
  }
};
var s16 = class {
  constructor() {
    this.lines = new n11(), this.particles = new n11();
  }
  load(e6) {
    h2(e6) || (this.lines.load(e6.lines), this.particles.load(e6.particles));
  }
};
var l14 = class {
  constructor(e6) {
    this._engine = e6;
  }
  getColorStyles(e6, o7, t12, w9) {
    let y15 = e6.options, f11 = y15.twinkle;
    if (!f11) return {};
    let r8 = f11.particles, p15 = r8.enable && S2() < r8.frequency, k14 = e6.options.zIndex, m11 = 1, h9 = (m11 - e6.zIndexFactor) ** k14.opacityRate, g14 = p15 ? g(r8.opacity) * h9 : w9, u11 = Wi2(this._engine, r8.color), c14 = u11 ? Ui2(u11, g14) : void 0, a7 = {}, d16 = p15 && c14;
    return a7.fill = d16 ? c14 : void 0, a7.stroke = d16 ? c14 : void 0, a7;
  }
  async init() {
    await Promise.resolve();
  }
  isEnabled(e6) {
    let o7 = e6.options, t12 = o7.twinkle;
    return t12 ? t12.particles.enable : false;
  }
  loadOptions(e6, ...o7) {
    e6.twinkle || (e6.twinkle = new s16());
    for (let t12 of o7) e6.twinkle.load(t12?.twinkle);
  }
  async update() {
    await Promise.resolve();
  }
};
async function _7(i8, e6 = true) {
  i8.checkVersion("3.8.1"), await i8.addParticleUpdater("twinkle", () => Promise.resolve(new l14(i8)), e6);
}

// /:https://esm.sh/*@tsparticles/updater-wobble@3.8.1/es2022/updater-wobble.mjs
var i7 = class {
  constructor() {
    this.angle = 50, this.move = 10;
  }
  load(e6) {
    h2(e6) || (e6.angle !== void 0 && (this.angle = x2(e6.angle)), e6.move !== void 0 && (this.move = x2(e6.move)));
  }
};
var t11 = class {
  constructor() {
    this.distance = 5, this.enable = false, this.speed = new i7();
  }
  load(e6) {
    if (!h2(e6) && (e6.distance !== void 0 && (this.distance = x2(e6.distance)), e6.enable !== void 0 && (this.enable = e6.enable), e6.speed !== void 0)) if (W2(e6.speed)) this.speed.load({ angle: e6.speed });
    else {
      let o7 = e6.speed;
      o7.min !== void 0 ? this.speed.load({ angle: o7 }) : this.speed.load(e6.speed);
    }
  }
};
var S8 = 0;
var x11 = 2;
var P12 = Math.PI * x11;
var M12 = 60;
function p14(n12, e6) {
  let { wobble: o7 } = n12.options, { wobble: s17 } = n12;
  if (!o7?.enable || !s17) return;
  let c14 = s17.angleSpeed * e6.factor, u11 = s17.moveSpeed * e6.factor, d16 = u11 * ((n12.retina.wobbleDistance ?? S8) * e6.factor) / (I2 / M12), r8 = P12, { position: b14 } = n12;
  s17.angle += c14, s17.angle > r8 && (s17.angle -= r8), b14.x += d16 * Math.cos(s17.angle), b14.y += d16 * Math.abs(Math.sin(s17.angle));
}
var D9 = 2;
var I8 = Math.PI * D9;
var V8 = 360;
var y14 = 10;
var N3 = 0;
var l15 = class {
  constructor(e6) {
    this.container = e6;
  }
  init(e6) {
    let o7 = e6.options.wobble;
    o7?.enable ? e6.wobble = { angle: S2() * I8, angleSpeed: g(o7.speed.angle) / V8, moveSpeed: g(o7.speed.move) / y14 } : e6.wobble = { angle: 0, angleSpeed: 0, moveSpeed: 0 }, e6.retina.wobbleDistance = g(o7?.distance ?? N3) * this.container.retina.pixelRatio;
  }
  isEnabled(e6) {
    return !e6.destroyed && !e6.spawning && !!e6.options.wobble?.enable;
  }
  loadOptions(e6, ...o7) {
    e6.wobble || (e6.wobble = new t11());
    for (let s17 of o7) e6.wobble.load(s17?.wobble);
  }
  update(e6, o7) {
    this.isEnabled(e6) && p14(e6, o7);
  }
};
async function C12(n12, e6 = true) {
  n12.checkVersion("3.8.1"), await n12.addParticleUpdater("wobble", (o7) => Promise.resolve(new l15(o7)), e6);
}

// /:https://esm.sh/*tsparticles@3.8.1/es2022/tsparticles.mjs
async function A7(a7, o7 = true) {
  a7.checkVersion("3.8.1"), await yo2(a7, false), await q7(a7, false), await W7(a7, false), await _7(a7, false), await C12(a7, false), await k13(a7, false), await q6(a7, false), await Fi3(a7, false), await ii4(a7, false), await v4(a7, false), await T3(a7, false), await n10(a7, o7);
}

// /:https://framerusercontent.com/modules/wb6ZrZlCLNQ5HHBJtNND/c1GLxCsQBQvlLXhkz7er/Particles.js
import { useCallback } from "react";
function ParticleWrapper(props) {
  const { background, color, radius, number, densityOptions, sizeOptions, opacityOptions, linksOptions, modeOptions, moveOptions, shapeOptions, clickOptions, hoverOptions, rotateOptions, particlesID, fpsOptions, colors } = props;
  const { densityEnable, densityArea, densityFactor } = densityOptions;
  const { linksEnabled, linksColor, linksOpacity, linksDistance, linksWidth } = linksOptions;
  const { size, sizeType, sizeMin, sizeMax } = sizeOptions;
  const { opacity, opacityType, opacityMin, opacityMax } = opacityOptions;
  const { connectDistance, connectRadius, connectLinksOpacity, grabDistance, grabLinksOpacity, bubbleDistance, bubbleSize, bubbleDuration, repulseDistance, repulseDuration, pushQuantity, removeQuantity, trailQuantity, trailDelay } = modeOptions;
  const { moveEnabled, moveDirection, moveSpeed, moveRandom, moveStraight, moveOut, moveVibrate, moveGravityEnabled, moveGravityAcceleration, moveGravityMaxSpeed, moveTrailEnabled, moveTrailAmount, moveSpinEnabled, moveSpinAcceleration, moveAttractEnabled, moveAttractDistance } = moveOptions;
  const { shapeType, characterType, imageSource, imageWidth, imageHeight } = shapeOptions;
  const { clickEnabled, clickModes } = clickOptions;
  const { hoverEnabled, hoverModes, hoverParallax, hoverForce, hoverSmooth } = hoverOptions;
  const { rotateDirection, rotateValue, rotateAnimation, rotateSpeed, rotateSync } = rotateOptions;
  const particlesInit = useCallback(async (engine) => {
    await A7(engine);
  }, []);
  const isCanvas = RenderTarget.current() === RenderTarget.canvas;
  const hasMultipleColors = colors.length > 0;
  return /* @__PURE__ */ _jsx("div", { style: { width: "100%", height: "100%", overflow: "hidden", backgroundColor: background, transform: "translateZ(0)", borderRadius: radius, position: "relative" }, children: /* @__PURE__ */ _jsx(k2, { id: particlesID, init: particlesInit, style: { width: "100%", height: "100%", position: "absolute" }, options: {
    // autoPlay: !isCanvas,
    background: { color: { value: "transparent" } },
    fpsLimit: isCanvas ? 1 : fpsOptions,
    fullScreen: false,
    pauseOnBlur: true,
    pauseOnOutsideViewport: true,
    interactivity: isCanvas ? {} : { events: { resize: true, onClick: { enable: isCanvas ? false : clickEnabled, mode: clickModes }, onHover: { enable: isCanvas ? false : hoverEnabled, mode: hoverModes, parallax: { enable: isCanvas ? false : hoverEnabled ? hoverParallax : false, force: hoverForce, smooth: hoverForce } } }, modes: { connect: { distance: connectDistance, radius: connectRadius, links: { opacity: connectLinksOpacity } }, grab: { distance: grabDistance, links: { opacity: grabLinksOpacity } }, bubble: { distance: bubbleDistance, size: bubbleSize, duration: bubbleDuration }, repulse: { distance: repulseDistance, duration: repulseDuration }, push: { quantity: pushQuantity }, remove: { quantity: removeQuantity }, trail: { delay: trailDelay, quantity: trailQuantity } } },
    particles: { color: { value: hasMultipleColors ? colors.map((color2) => makeHex(color2)) : makeHex(color) }, collisions: { enable: false }, rotate: { direction: rotateDirection, value: rotateValue, animation: !isCanvas && { enable: rotateAnimation, speed: rotateSpeed } }, move: { direction: moveDirection, outMode: moveOut, enable: isCanvas ? false : moveEnabled, random: moveRandom, speed: moveSpeed, straight: moveStraight, trail: { enable: moveTrailEnabled, length: moveTrailAmount }, spin: { enable: moveSpinEnabled, acceleration: moveSpinAcceleration }, attract: { enable: moveAttractEnabled, distance: moveAttractDistance }, gravity: { enable: moveGravityEnabled, acceleration: moveGravityAcceleration, maxSpeed: moveGravityMaxSpeed }, vibrate: moveVibrate }, links: { enable: linksEnabled, color: makeHex(linksColor), opacity: linksOpacity, distance: linksDistance, width: linksWidth }, number: { value: number, density: { enable: densityEnable, area: densityEnable && densityArea, factor: densityEnable && densityFactor } }, opacity: { value: opacityType ? opacity : { min: opacityMin, max: opacityMax } }, shape: { type: shapeType, character: { value: characterType }, image: { src: imageSource, width: imageWidth, height: imageHeight } }, size: { value: sizeType ? size : { min: sizeMin, max: sizeMax } } },
    detectRetina: true
  } }) });
}
ParticleWrapper.defaultProps = { background: "#000000", color: "#ffffff", radius: 0, number: 100, densityOptions: { densityEnable: false, densityArea: 5e3, densityFactor: 50 }, sizeOptions: { sizeType: true, size: 1, sizeMin: 1, sizeMax: 10 }, opacityOptions: { opacityType: true, opacity: 1, opacityMin: 0, opacityMax: 1 }, linksOptions: { linksEnabled: false, linksColor: "#ffffff", linksOpacity: 0.2, linksDistance: 100, linksWidth: 1 }, modeOptions: { connectDistance: 100, connectRadius: 50, connectLinksOpacity: 0.2, grabDistance: 100, grabLinksOpacity: 0.2, bubbleDistance: 100, bubbleSize: 40, bubbleDuration: 0.4, repulseDistance: 200, repulseDuration: 1.2, pushQuantity: 4, removeQuantity: 4, trailDelay: 0.1, trailQuantity: 10 }, moveOptions: { moveEnabled: true, moveDirection: "none", moveSpeed: 1, moveRandom: false, moveStraight: false, moveOut: "out", moveVibrate: false, moveGravityEnabled: false, moveGravityAcceleration: 1, moveGravityMaxSpeed: 2, moveTrailEnabled: false, moveTrailAmount: 100, moveSpinEnabled: false, moveSpinAcceleration: 1, moveAttractEnabled: false, moveAttractDistance: 100 }, shapeOptions: { shapeType: "circle", characterType: "\u{1F60E}", imageWidth: 100, imageHeight: 100 }, clickOptions: { clickEnabled: false, clickModes: "push" }, hoverOptions: { hoverEnabled: true, hoverModes: "none", hoverParallax: true, hoverForce: 10, hoverSmooth: 10 }, rotateOptions: { rotateDirection: "random", rotateValue: 0, rotateAnimation: false, rotateSpeed: 5, rotateSync: false }, particlesID: "Unique ID", colors: [] };
ParticleWrapper.displayName = "Particles";
addPropertyControls(ParticleWrapper, { background: { type: ControlType.Color, defaultValue: ParticleWrapper.defaultProps.background, title: "Backdrop" }, color: { type: ControlType.Color, defaultValue: ParticleWrapper.defaultProps.color, title: "Color" }, colors: { type: ControlType.Array, control: { type: ControlType.Color }, defaultValue: ParticleWrapper.defaultProps.colors }, fpsOptions: { type: ControlType.Enum, title: "FPS", options: [30, 60, 120], optionTitles: ["30", "60", "120"], defaultValue: 60, displaySegmentedControl: true }, number: { type: ControlType.Number, title: "Amount", min: 0, max: 1e3, step: 1, defaultValue: ParticleWrapper.defaultProps.number }, densityOptions: { type: ControlType.Object, title: "Density", controls: { densityEnable: { type: ControlType.Boolean, title: "Enable", defaultValue: ParticleWrapper.defaultProps.densityOptions.densityEnable }, densityArea: { type: ControlType.Number, title: "Area", min: 100, max: 1e4, step: 1, defaultValue: ParticleWrapper.defaultProps.densityOptions.densityArea, hidden: (props) => !props.densityEnable }, densityFactor: { type: ControlType.Number, title: "Factor", min: 0, max: 100, step: 0.5, displayStepper: true, defaultValue: ParticleWrapper.defaultProps.densityOptions.densityFactor, description: "Decrease the amount property when using these, as too many particles in dense areas can cause slowdowns.", hidden: (props) => !props.densityEnable } } }, sizeOptions: { type: ControlType.Object, title: "Size", controls: { sizeType: { type: ControlType.Boolean, title: "Type", enabledTitle: "Value", disabledTitle: "Range", defaultValue: ParticleWrapper.defaultProps.sizeOptions.sizeType }, size: { type: ControlType.Number, title: "Size", min: 0, max: 1e3, step: 0.5, displayStepper: true, defaultValue: ParticleWrapper.defaultProps.sizeOptions.size, hidden: (props) => !props.sizeType }, sizeMin: { type: ControlType.Number, title: "Min", min: 0, max: 1e3, step: 0.5, displayStepper: true, defaultValue: ParticleWrapper.defaultProps.sizeOptions.sizeMin, hidden: (props) => props.sizeType }, sizeMax: { type: ControlType.Number, title: "Max", min: 0, max: 1e3, step: 0.5, displayStepper: true, defaultValue: ParticleWrapper.defaultProps.sizeOptions.sizeMax, hidden: (props) => props.sizeType } } }, opacityOptions: { type: ControlType.Object, title: "Opacity", controls: { opacityType: { type: ControlType.Boolean, title: "Type", enabledTitle: "Value", disabledTitle: "Range", defaultValue: ParticleWrapper.defaultProps.opacityOptions.opacityType }, opacity: { type: ControlType.Number, title: "Opacity", min: 0, max: 1, step: 0.1, displayStepper: true, defaultValue: ParticleWrapper.defaultProps.opacityOptions.opacity, hidden: (props) => !props.opacityType }, opacityMin: { type: ControlType.Number, title: "Min", min: 0, max: 1, step: 0.05, displayStepper: true, defaultValue: ParticleWrapper.defaultProps.opacityOptions.opacityMin, hidden: (props) => props.opacityType }, opacityMax: { type: ControlType.Number, title: "Max", min: 0, max: 1, step: 0.05, displayStepper: true, defaultValue: ParticleWrapper.defaultProps.opacityOptions.opacityMax, hidden: (props) => props.opacityType } } }, linksOptions: { type: ControlType.Object, title: "Links", controls: { linksEnabled: { type: ControlType.Boolean, title: "Enable", defaultValue: ParticleWrapper.defaultProps.linksOptions.linksEnabled }, linksColor: { type: ControlType.Color, title: "Color", defaultValue: ParticleWrapper.defaultProps.linksOptions.linksColor, hidden: (props) => !props.linksEnabled }, linksOpacity: { type: ControlType.Number, title: "Opacity", min: 0, max: 1, step: 0.1, displayStepper: true, defaultValue: ParticleWrapper.defaultProps.linksOptions.linksOpacity, hidden: (props) => !props.linksEnabled }, linksDistance: { type: ControlType.Number, title: "Distance", min: 0, max: 500, step: 1, defaultValue: ParticleWrapper.defaultProps.linksOptions.linksDistance, hidden: (props) => !props.linksEnabled }, linksWidth: { type: ControlType.Number, title: "Width", min: 0, max: 10, step: 1, defaultValue: ParticleWrapper.defaultProps.linksOptions.linksWidth, hidden: (props) => !props.linksEnabled } } }, modeOptions: { type: ControlType.Object, title: "Modes", controls: { connectDistance: { type: ControlType.Number, title: "Connect", min: 0, max: 1e3, step: 1, defaultValue: ParticleWrapper.defaultProps.modeOptions.connectDistance }, connectRadius: { type: ControlType.Number, title: "Connect Radius", min: 0, max: 1e3, step: 1, defaultValue: ParticleWrapper.defaultProps.modeOptions.connectRadius }, connectLinksOpacity: { type: ControlType.Number, title: "Connect Links", min: 0, max: 1, step: 0.1, displayStepper: true, defaultValue: ParticleWrapper.defaultProps.modeOptions.connectLinksOpacity }, grabDistance: { type: ControlType.Number, title: "Grab", min: 0, max: 1e3, step: 1, defaultValue: ParticleWrapper.defaultProps.modeOptions.grabDistance }, grabLinksOpacity: { type: ControlType.Number, title: "Grab Links", min: 0, max: 1, step: 0.1, displayStepper: true, defaultValue: ParticleWrapper.defaultProps.modeOptions.grabLinksOpacity }, bubbleDistance: { type: ControlType.Number, title: "Bubble", min: 0, max: 1e3, step: 1, defaultValue: ParticleWrapper.defaultProps.modeOptions.bubbleDistance }, bubbleSize: { type: ControlType.Number, title: "Bubble Size", min: 0, max: 1e3, step: 1, defaultValue: ParticleWrapper.defaultProps.modeOptions.bubbleSize }, bubbleDuration: { type: ControlType.Number, title: "Bubble Duration", min: 0, max: 1, step: 0.1, displayStepper: true, defaultValue: ParticleWrapper.defaultProps.modeOptions.bubbleDuration }, repulseDistance: { type: ControlType.Number, title: "Repulse", min: 0, max: 1e3, defaultValue: ParticleWrapper.defaultProps.modeOptions.repulseDistance }, repulseDuration: { type: ControlType.Number, title: "Repulse Duration", min: 0, max: 10, step: 0.1, displayStepper: true, defaultValue: ParticleWrapper.defaultProps.modeOptions.repulseDuration }, pushQuantity: { type: ControlType.Number, title: "Push", min: 0, max: 100, step: 1, defaultValue: ParticleWrapper.defaultProps.modeOptions.pushQuantity }, removeQuantity: { type: ControlType.Number, title: "Remove", min: 0, max: 100, step: 1, defaultValue: ParticleWrapper.defaultProps.modeOptions.removeQuantity }, trailQuantity: { type: ControlType.Number, title: "Trail", min: 0, max: 100, step: 1, defaultValue: ParticleWrapper.defaultProps.modeOptions.trailQuantity }, trailDelay: { type: ControlType.Number, title: "Trail Delay", min: 0, max: 10, step: 0.1, defaultValue: ParticleWrapper.defaultProps.modeOptions.trailDelay } } }, moveOptions: { type: ControlType.Object, title: "Move", controls: { moveEnabled: { type: ControlType.Boolean, title: "Enable", defaultValue: ParticleWrapper.defaultProps.moveOptions.moveEnabled }, moveDirection: { type: ControlType.Enum, title: "Direction", options: ["none", "bottom", "left", "right", "top", "bottom-left", "bottom-right", "top-left", "top-right", "outside", "inside"], optionTitles: ["Random", "Bottom", "Left", "Right", "Top", "Bottom Left", "Bottom Right", "Top Left", "Top Right", "Outside", "Inside"], defaultValue: ParticleWrapper.defaultProps.moveOptions.moveDirection, hidden: (props) => !props.moveEnabled }, moveSpeed: { type: ControlType.Number, title: "Speed", min: 0, max: 100, step: 0.1, defaultValue: ParticleWrapper.defaultProps.moveOptions.moveSpeed, hidden: (props) => !props.moveEnabled }, moveRandom: { type: ControlType.Boolean, title: "Random", defaultValue: ParticleWrapper.defaultProps.moveOptions.moveRandom, hidden: (props) => !props.moveEnabled }, moveStraight: { type: ControlType.Boolean, title: "Straight", defaultValue: ParticleWrapper.defaultProps.moveOptions.moveStraight, hidden: (props) => !props.moveEnabled }, moveOut: { type: ControlType.Enum, title: "Out", options: ["none", "split", "bounce", "destroy", "out", "bounceHorizontal", "bounceVertical"], optionTitles: ["None", "Split", "Bounce", "Destroy", "Out", "Bounce Horizontal", "Bounce Vertical"], defaultValue: ParticleWrapper.defaultProps.moveOptions.moveOut, hidden: (props) => !props.moveEnabled }, moveVibrate: { type: ControlType.Boolean, title: "Vibrate", defaultValue: ParticleWrapper.defaultProps.moveOptions.moveVibrate, hidden: (props) => !props.moveEnabled }, moveGravityEnabled: { type: ControlType.Boolean, title: "Gravity", defaultValue: ParticleWrapper.defaultProps.moveOptions.moveGravityEnabled, hidden: (props) => !props.moveEnabled }, moveGravityAcceleration: { type: ControlType.Number, title: "Gravity Acceleration", min: 0, max: 100, step: 0.1, defaultValue: ParticleWrapper.defaultProps.moveOptions.moveGravityAcceleration, hidden: (props) => !props.moveEnabled || !props.moveGravityEnabled }, moveGravityMaxSpeed: { type: ControlType.Number, title: "Gravity Max Speed", min: 0, max: 100, step: 0.1, defaultValue: ParticleWrapper.defaultProps.moveOptions.moveGravityAcceleration, hidden: (props) => !props.moveEnabled || !props.moveGravityEnabled }, moveTrailEnabled: { type: ControlType.Boolean, title: "Trail", defaultValue: ParticleWrapper.defaultProps.moveOptions.moveTrailEnabled, hidden: (props) => !props.moveEnabled }, moveTrailAmount: { type: ControlType.Number, title: " ", min: 0, max: 1e3, step: 1, defaultValue: ParticleWrapper.defaultProps.moveOptions.moveTrailAmount, hidden: (props) => !props.moveEnabled || !props.moveTrailEnabled }, moveSpinEnabled: { type: ControlType.Boolean, title: "Spin", defaultValue: ParticleWrapper.defaultProps.moveOptions.moveSpinEnabled, hidden: (props) => !props.moveEnabled }, moveSpinAcceleration: { type: ControlType.Number, title: " ", min: 0, max: 1e3, step: 1, defaultValue: ParticleWrapper.defaultProps.moveOptions.moveSpinAcceleration, hidden: (props) => !props.moveEnabled || !props.moveSpinEnabled }, moveAttractEnabled: { type: ControlType.Boolean, title: "Attract", defaultValue: ParticleWrapper.defaultProps.moveOptions.moveAttractEnabled, hidden: (props) => !props.moveEnabled }, moveAttractDistance: { type: ControlType.Number, title: " ", min: 0, max: 1e3, step: 1, defaultValue: ParticleWrapper.defaultProps.moveOptions.moveAttractDistance, hidden: (props) => !props.moveEnabled || !props.moveAttractEnabled } } }, shapeOptions: { type: ControlType.Object, title: "Shape", controls: { shapeType: { type: ControlType.Enum, title: "Shape", options: ["circle", "edge", "triangle", "polygon", "star", "character", "image"], optionTitles: ["Circle", "Square", "Triangle", "Polygon", "Star", "Character", "Image"], defaultValue: ParticleWrapper.defaultProps.shapeOptions.characterType }, characterType: { type: ControlType.String, title: "Character", defaultValue: ParticleWrapper.defaultProps.shapeOptions.characterType, hidden: (props) => props.shapeType !== "character" }, imageSource: { type: ControlType.Image, title: "Image", hidden: (props) => props.shapeType !== "image" }, imageWidth: { type: ControlType.Number, title: "Width", min: 0, max: 1e3, defaultValue: ParticleWrapper.defaultProps.shapeOptions.imageWidth, hidden: (props) => props.shapeType !== "image" }, imageHeight: { type: ControlType.Number, title: "Height", min: 0, max: 1e3, defaultValue: ParticleWrapper.defaultProps.shapeOptions.imageWidth, hidden: (props) => props.shapeType !== "image" } } }, clickOptions: { type: ControlType.Object, title: "Click", controls: { clickEnabled: { type: ControlType.Boolean, title: "Enable", defaultValue: ParticleWrapper.defaultProps.clickOptions.clickEnabled }, clickModes: { type: ControlType.Enum, title: "Mode", options: ["attract", "bubble", "push", "remove", "repulse", "pause", "trail"], optionTitles: ["Attract", "Bubble", "Push", "Remove", "Repulse", "Pause", "Trail"], defaultValue: ParticleWrapper.defaultProps.clickOptions.clickModes, hidden: (props) => !props.clickEnabled } } }, hoverOptions: { type: ControlType.Object, title: "Hover", controls: { hoverEnabled: { type: ControlType.Boolean, title: "Enable", defaultValue: ParticleWrapper.defaultProps.hoverOptions.hoverEnabled }, hoverModes: { type: ControlType.Enum, title: "Mode", options: ["none", "attract", "bounce", "bubble", "connect", "grab", "light", "repulse", "slow", "trail"], optionTitles: ["None", "Attract", "Bounce", "Bubble", "Connect", "Grab", "Light", "Repulse", "Slow", "Trail"], defaultValue: ParticleWrapper.defaultProps.hoverOptions.hoverModes, hidden: (props) => !props.hoverEnabled }, hoverParallax: { type: ControlType.Boolean, title: "Parallax", defaultValue: ParticleWrapper.defaultProps.hoverOptions.hoverParallax, hidden: (props) => !props.hoverEnabled }, hoverForce: { type: ControlType.Number, min: 0, max: 50, step: 1, displayStepper: true, title: "Force", defaultValue: ParticleWrapper.defaultProps.hoverOptions.hoverForce, hidden: (props) => !props.hoverParallax || !props.hoverEnabled }, hoverSmooth: { type: ControlType.Number, min: 0, max: 50, step: 1, displayStepper: true, title: "Smooth", defaultValue: ParticleWrapper.defaultProps.hoverOptions.hoverSmooth, hidden: (props) => !props.hoverParallax || !props.hoverEnabled } } }, rotateOptions: { type: ControlType.Object, title: "Rotate", controls: { rotateValue: { type: ControlType.Number, title: "Value", min: -360, max: 360, step: 1, displayStepper: true, defaultValue: ParticleWrapper.defaultProps.rotateOptions.rotateValue }, rotateDirection: { type: ControlType.Enum, title: "Direction", options: ["clockwise", "counter-clockwise", "random"], optionTitles: ["Clockwise", "Counter Clockwise", "Random"], defaultValue: ParticleWrapper.defaultProps.rotateOptions.rotateDirection }, rotateAnimation: { type: ControlType.Boolean, title: "Animate", defaultValue: ParticleWrapper.defaultProps.rotateOptions.rotateAnimation }, rotateSpeed: { type: ControlType.Number, title: "Speed", min: 0, max: 100, step: 1, defaultValue: ParticleWrapper.defaultProps.rotateOptions.rotateSpeed, hidden: (props) => !props.rotateAnimation }, rotateSync: { type: ControlType.Boolean, title: "Sync", defaultValue: ParticleWrapper.defaultProps.rotateOptions.rotateSync, hidden: (props) => !props.rotateAnimation } } }, radius: { type: ControlType.Number, min: 0, max: 1e3, step: 1, displayStepper: true, defaultValue: ParticleWrapper.defaultProps.radius }, particlesID: { type: ControlType.String, title: "ID", defaultValue: "One", placeholder: ParticleWrapper.defaultProps.particlesID } });
var makeHex = (property) => Color.toHexString(Color(property));

export {
  ParticleWrapper
};
